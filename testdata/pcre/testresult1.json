[
  {
    "matchExpected": 1,
    "pattern": "/the quick brown fox/",
    "haystack": "the quick brown fox",
    "match": [
      {
        "match": "the quick brown fox"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/the quick brown fox/",
    "haystack": "What do you know about the quick brown fox?",
    "match": [
      {
        "match": "the quick brown fox"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/the quick brown fox/",
    "haystack": "The quick brown FOX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/the quick brown fox/",
    "haystack": "What do you know about THE QUICK BROWN FOX?",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/The quick brown fox/i",
    "haystack": "the quick brown fox",
    "match": [
      {
        "match": "the quick brown fox"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/The quick brown fox/i",
    "haystack": "The quick brown FOX",
    "match": [
      {
        "match": "The quick brown FOX"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/The quick brown fox/i",
    "haystack": "What do you know about the quick brown fox?",
    "match": [
      {
        "match": "the quick brown fox"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/The quick brown fox/i",
    "haystack": "What do you know about THE QUICK BROWN FOX?",
    "match": [
      {
        "match": "THE QUICK BROWN FOX"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abcd\\t\\n\\r\\f\\a\\e\\071\\x3b\\$\\\\\\?caxyz/",
    "haystack": "abcd\\t\\n\\r\\f\\a\\e9;\\$\\\\?caxyz",
    "match": [
      {
        "match": "abcd\\x09\\x0a\\x0d\\x0c\\x07\\x1b9;$\\?caxyz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "abxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "abxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "abxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "abxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aabxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aabxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aaabxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaaabxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aaaabxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "abcxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "abcxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aabcxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aabcxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabcxyzpqrrrabbxyyyypAzz",
    "match": [
      {
        "match": "aaabcxyzpqrrrabbxyyyypAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabcxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aaabcxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabcxyzpqrrrabbxyyyypqqAzz",
    "match": [
      {
        "match": "aaabcxyzpqrrrabbxyyyypqqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabcxyzpqrrrabbxyyyypqqqAzz",
    "match": [
      {
        "match": "aaabcxyzpqrrrabbxyyyypqqqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabcxyzpqrrrabbxyyyypqqqqAzz",
    "match": [
      {
        "match": "aaabcxyzpqrrrabbxyyyypqqqqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabcxyzpqrrrabbxyyyypqqqqqAzz",
    "match": [
      {
        "match": "aaabcxyzpqrrrabbxyyyypqqqqqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabcxyzpqrrrabbxyyyypqqqqqqAzz",
    "match": [
      {
        "match": "aaabcxyzpqrrrabbxyyyypqqqqqqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaaabcxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aaaabcxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "abxyzzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "abxyzzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aabxyzzzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aabxyzzzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabxyzzzzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aaabxyzzzzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaaabxyzzzzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aaaabxyzzzzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "abcxyzzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "abcxyzzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aabcxyzzzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aabcxyzzzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabcxyzzzzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aaabcxyzzzzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaaabcxyzzzzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aaaabcxyzzzzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaaabcxyzzzzpqrrrabbbxyyyypqAzz",
    "match": [
      {
        "match": "aaaabcxyzzzzpqrrrabbbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaaabcxyzzzzpqrrrabbbxyyyyypqAzz",
    "match": [
      {
        "match": "aaaabcxyzzzzpqrrrabbbxyyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabcxyzpqrrrabbxyyyypABzz",
    "match": [
      {
        "match": "aaabcxyzpqrrrabbxyyyypABzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabcxyzpqrrrabbxyyyypABBzz",
    "match": [
      {
        "match": "aaabcxyzpqrrrabbxyyyypABBzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": ">>>aaabxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aaabxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": ">aaaabxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "aaaabxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": ">>>>abcxyzpqrrrabbxyyyypqAzz",
    "match": [
      {
        "match": "abcxyzpqrrrabbxyyyypqAzz"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "abxyzpqrrabbxyyyypqAzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "abxyzpqrrrrabbxyyyypqAzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "abxyzpqrrrabxyyyypqAzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaaabcxyzzzzpqrrrabbbxyyyyyypqAzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaaabcxyzzzzpqrrrabbbxyyypqAzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz/",
    "haystack": "aaabcxyzpqrrrabbxyyyypqqqqqqqAzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(abc){1,2}zz/",
    "haystack": "abczz",
    "match": [
      {
        "match": "abczz",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(abc){1,2}zz/",
    "haystack": "abcabczz",
    "match": [
      {
        "match": "abcabczz",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(abc){1,2}zz/",
    "haystack": "zz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(abc){1,2}zz/",
    "haystack": "abcabcabczz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(abc){1,2}zz/",
    "haystack": ">>abczz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "bc",
    "match": [
      {
        "match": "bc",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "bbc",
    "match": [
      {
        "match": "bbc",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "bbbc",
    "match": [
      {
        "match": "bbbc",
        "group1": "bb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "bac",
    "match": [
      {
        "match": "bac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "bbac",
    "match": [
      {
        "match": "bbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "aac",
    "match": [
      {
        "match": "aac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "abbbbbbbbbbbc",
    "match": [
      {
        "match": "abbbbbbbbbbbc",
        "group1": "bbbbbbbbbbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "bbbbbbbbbbbac",
    "match": [
      {
        "match": "bbbbbbbbbbbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "aaac",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "abbbbbbbbbbbac",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}c/",
    "haystack": "bc",
    "match": [
      {
        "match": "bc",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}c/",
    "haystack": "bbc",
    "match": [
      {
        "match": "bbc",
        "group1": "bb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}c/",
    "haystack": "bbbc",
    "match": [
      {
        "match": "bbbc",
        "group1": "bbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}c/",
    "haystack": "bac",
    "match": [
      {
        "match": "bac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}c/",
    "haystack": "bbac",
    "match": [
      {
        "match": "bbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}c/",
    "haystack": "aac",
    "match": [
      {
        "match": "aac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}c/",
    "haystack": "abbbbbbbbbbbc",
    "match": [
      {
        "match": "abbbbbbbbbbbc",
        "group1": "bbbbbbbbbbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}c/",
    "haystack": "bbbbbbbbbbbac",
    "match": [
      {
        "match": "bbbbbbbbbbbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(b+|a){1,2}c/",
    "haystack": "aaac",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}c/",
    "haystack": "abbbbbbbbbbbac",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(ba|b*){1,2}?bc/",
    "haystack": "babc",
    "match": [
      {
        "match": "babc",
        "group1": "ba"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(ba|b*){1,2}?bc/",
    "haystack": "bbabc",
    "match": [
      {
        "match": "bbabc",
        "group1": "ba"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(ba|b*){1,2}?bc/",
    "haystack": "bababc",
    "match": [
      {
        "match": "bababc",
        "group1": "ba"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(ba|b*){1,2}?bc/",
    "haystack": "bababbc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(ba|b*){1,2}?bc/",
    "haystack": "babababc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\ca\\cA\\c[;\\c:/",
    "haystack": "\\x01\\x01\\e;z",
    "match": [
      {
        "match": "\\x01\\x01\\x1b;z"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab\\]cde]/",
    "haystack": "athing",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab\\]cde]/",
    "haystack": "bthing",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab\\]cde]/",
    "haystack": "]thing",
    "match": [
      {
        "match": "]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab\\]cde]/",
    "haystack": "cthing",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab\\]cde]/",
    "haystack": "dthing",
    "match": [
      {
        "match": "d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab\\]cde]/",
    "haystack": "ething",
    "match": [
      {
        "match": "e"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[ab\\]cde]/",
    "haystack": "fthing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab\\]cde]/",
    "haystack": "[thing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab\\]cde]/",
    "haystack": "\\\\thing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[]cde]/",
    "haystack": "]thing",
    "match": [
      {
        "match": "]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[]cde]/",
    "haystack": "cthing",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[]cde]/",
    "haystack": "dthing",
    "match": [
      {
        "match": "d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[]cde]/",
    "haystack": "ething",
    "match": [
      {
        "match": "e"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[]cde]/",
    "haystack": "athing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[]cde]/",
    "haystack": "fthing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^ab\\]cde]/",
    "haystack": "fthing",
    "match": [
      {
        "match": "f"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^ab\\]cde]/",
    "haystack": "[thing",
    "match": [
      {
        "match": "["
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^ab\\]cde]/",
    "haystack": "\\\\thing",
    "match": [
      {
        "match": "\\"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[^ab\\]cde]/",
    "haystack": "athing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^ab\\]cde]/",
    "haystack": "bthing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^ab\\]cde]/",
    "haystack": "]thing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^ab\\]cde]/",
    "haystack": "cthing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^ab\\]cde]/",
    "haystack": "dthing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^ab\\]cde]/",
    "haystack": "ething",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^]cde]/",
    "haystack": "athing",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^]cde]/",
    "haystack": "fthing",
    "match": [
      {
        "match": "f"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[^]cde]/",
    "haystack": "]thing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^]cde]/",
    "haystack": "cthing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^]cde]/",
    "haystack": "dthing",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^]cde]/",
    "haystack": "ething",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\/",
    "haystack": "",
    "match": [
      {
        "match": "\\x81"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^ÿ/",
    "haystack": "ÿ",
    "match": [
      {
        "match": "\\xff"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "0",
    "match": [
      {
        "match": "0"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "1",
    "match": [
      {
        "match": "1"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "2",
    "match": [
      {
        "match": "2"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "3",
    "match": [
      {
        "match": "3"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "4",
    "match": [
      {
        "match": "4"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "5",
    "match": [
      {
        "match": "5"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "6",
    "match": [
      {
        "match": "6"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "7",
    "match": [
      {
        "match": "7"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "8",
    "match": [
      {
        "match": "8"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "9",
    "match": [
      {
        "match": "9"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "10",
    "match": [
      {
        "match": "10"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9]+$/",
    "haystack": "100",
    "match": [
      {
        "match": "100"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[0-9]+$/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*nter/",
    "haystack": "enter",
    "match": [
      {
        "match": "enter"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*nter/",
    "haystack": "inter",
    "match": [
      {
        "match": "inter"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*nter/",
    "haystack": "uponter",
    "match": [
      {
        "match": "uponter"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^xxx[0-9]+$/",
    "haystack": "xxx0",
    "match": [
      {
        "match": "xxx0"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^xxx[0-9]+$/",
    "haystack": "xxx1234",
    "match": [
      {
        "match": "xxx1234"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^xxx[0-9]+$/",
    "haystack": "xxx",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.+[0-9][0-9][0-9]$/",
    "haystack": "x123",
    "match": [
      {
        "match": "x123"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.+[0-9][0-9][0-9]$/",
    "haystack": "x1234",
    "match": [
      {
        "match": "x1234"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.+[0-9][0-9][0-9]$/",
    "haystack": "xx123",
    "match": [
      {
        "match": "xx123"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.+[0-9][0-9][0-9]$/",
    "haystack": "123456",
    "match": [
      {
        "match": "123456"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^.+[0-9][0-9][0-9]$/",
    "haystack": "123",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.+?[0-9][0-9][0-9]$/",
    "haystack": "x123",
    "match": [
      {
        "match": "x123"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.+?[0-9][0-9][0-9]$/",
    "haystack": "x1234",
    "match": [
      {
        "match": "x1234"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.+?[0-9][0-9][0-9]$/",
    "haystack": "xx123",
    "match": [
      {
        "match": "xx123"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.+?[0-9][0-9][0-9]$/",
    "haystack": "123456",
    "match": [
      {
        "match": "123456"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^.+?[0-9][0-9][0-9]$/",
    "haystack": "123",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$/",
    "haystack": "abc!pqr=apquxz.ixr.zzz.ac.uk",
    "match": [
      {
        "match": "abc!pqr=apquxz.ixr.zzz.ac.uk",
        "group1": "abc",
        "group2": "pqr"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$/",
    "haystack": "!pqr=apquxz.ixr.zzz.ac.uk",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$/",
    "haystack": "abc!=apquxz.ixr.zzz.ac.uk",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$/",
    "haystack": "abc!pqr=apquxz:ixr.zzz.ac.uk",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$/",
    "haystack": "abc!pqr=apquxz.ixr.zzz.ac.ukk",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/:/",
    "haystack": "Well, we need a colon: somewhere",
    "match": [
      {
        "match": ":"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/:/",
    "haystack": "Fail without a colon",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "0abc",
    "match": [
      {
        "match": "0abc",
        "group1": "0abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "fed",
    "match": [
      {
        "match": "fed",
        "group1": "fed"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "E",
    "match": [
      {
        "match": "E",
        "group1": "E"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "::",
    "match": [
      {
        "match": "::",
        "group1": "::"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "5f03:12C0::932e",
    "match": [
      {
        "match": "5f03:12C0::932e",
        "group1": "5f03:12C0::932e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "fed def",
    "match": [
      {
        "match": "def",
        "group1": "def"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "Any old stuff",
    "match": [
      {
        "match": "ff",
        "group1": "ff"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "0zzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "gzzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "fed\\x20",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\da-f:]+)$/i",
    "haystack": "Any old rubbish",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/",
    "haystack": ".1.2.3",
    "match": [
      {
        "match": ".1.2.3",
        "group1": "1",
        "group2": "2",
        "group3": "3"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/",
    "haystack": "A.12.123.0",
    "match": [
      {
        "match": "A.12.123.0",
        "group1": "12",
        "group2": "123",
        "group3": "0"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/",
    "haystack": ".1.2.3333",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/",
    "haystack": "1.2.3",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/",
    "haystack": "1234.2.3",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$/",
    "haystack": "1 IN SOA non-sp1 non-sp2(",
    "match": [
      {
        "match": "1 IN SOA non-sp1 non-sp2(",
        "group1": "1",
        "group2": "non-sp1",
        "group3": "non-sp2"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$/",
    "haystack": "1    IN    SOA    non-sp1    non-sp2   (",
    "match": [
      {
        "match": "1    IN    SOA    non-sp1    non-sp2   (",
        "group1": "1",
        "group2": "non-sp1",
        "group3": "non-sp2"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$/",
    "haystack": "1IN SOA non-sp1 non-sp2(",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$/",
    "haystack": "a.",
    "match": [
      {
        "match": "a."
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$/",
    "haystack": "Z.",
    "match": [
      {
        "match": "Z."
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$/",
    "haystack": "2.",
    "match": [
      {
        "match": "2."
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$/",
    "haystack": "ab-c.pq-r.",
    "match": [
      {
        "match": "ab-c.pq-r.",
        "group1": ".pq-r"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$/",
    "haystack": "sxk.zzz.ac.uk.",
    "match": [
      {
        "match": "sxk.zzz.ac.uk.",
        "group1": ".uk"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$/",
    "haystack": "x-.y-.",
    "match": [
      {
        "match": "x-.y-.",
        "group1": ".y-"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$/",
    "haystack": "-abc.peq.",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$/",
    "haystack": "*.a",
    "match": [
      {
        "match": "*.a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$/",
    "haystack": "*.b0-a",
    "match": [
      {
        "match": "*.b0-a",
        "group1": "0-a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$/",
    "haystack": "*.c3-b.c",
    "match": [
      {
        "match": "*.c3-b.c",
        "group1": "3-b",
        "group2": ".c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$/",
    "haystack": "*.c-a.b-c",
    "match": [
      {
        "match": "*.c-a.b-c",
        "group1": "-a",
        "group2": ".b-c",
        "group3": "-c"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$/",
    "haystack": "*.0",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$/",
    "haystack": "*.a-",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$/",
    "haystack": "*.a-b.c-",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$/",
    "haystack": "*.c-a.0-c",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?=ab(de))(abd)(e)/",
    "haystack": "abde",
    "match": [
      {
        "match": "abde",
        "group1": "de",
        "group2": "abd",
        "group3": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!(ab)de|x)(abd)(f)/",
    "haystack": "abdf",
    "match": [
      {
        "match": "abdf",
        "group2": "abd",
        "group3": "f"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?=(ab(cd)))(ab)/",
    "haystack": "abcd",
    "match": [
      {
        "match": "ab",
        "group1": "abcd",
        "group2": "cd",
        "group3": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\da-f](\\.[\\da-f])*$/i",
    "haystack": "a.b.c.d",
    "match": [
      {
        "match": "a.b.c.d",
        "group1": ".d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\da-f](\\.[\\da-f])*$/i",
    "haystack": "A.B.C.D",
    "match": [
      {
        "match": "A.B.C.D",
        "group1": ".D"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\da-f](\\.[\\da-f])*$/i",
    "haystack": "a.b.c.1.2.3.C",
    "match": [
      {
        "match": "a.b.c.1.2.3.C",
        "group1": ".C"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\\".*\\\"\\s*(;.*)?$/",
    "haystack": "\\\"1234\\\"",
    "match": [
      {
        "match": "\"1234\""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\\".*\\\"\\s*(;.*)?$/",
    "haystack": "\\\"abcd\\\" ;",
    "match": [
      {
        "match": "\"abcd\" ;",
        "group1": ";"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\\".*\\\"\\s*(;.*)?$/",
    "haystack": "\\\"\\\" ; rhubarb",
    "match": [
      {
        "match": "\"\" ; rhubarb",
        "group1": "; rhubarb"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^\\\".*\\\"\\s*(;.*)?$/",
    "haystack": "\\\"1234\\\" : things",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^$/",
    "haystack": "\\",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^$/",
    "haystack": "A non-empty line",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)/x",
    "haystack": "ab c",
    "match": [
      {
        "match": "ab c"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)/x",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)/x",
    "haystack": "ab cde",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?x)   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)/",
    "haystack": "ab c",
    "match": [
      {
        "match": "ab c"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?x)   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?x)   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)/",
    "haystack": "ab cde",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^   a\\ b[c ]d       $/x",
    "haystack": "a bcd",
    "match": [
      {
        "match": "a bcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^   a\\ b[c ]d       $/x",
    "haystack": "a b d",
    "match": [
      {
        "match": "a b d"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^   a\\ b[c ]d       $/x",
    "haystack": "abcd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^   a\\ b[c ]d       $/x",
    "haystack": "ab d",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a(b(c)))(d(e(f)))(h(i(j)))(k(l(m)))$/",
    "haystack": "abcdefhijklm",
    "match": [
      {
        "match": "abcdefhijklm",
        "group1": "abc",
        "group2": "bc",
        "group3": "c",
        "group4": "def",
        "group5": "ef",
        "group6": "f",
        "group7": "hij",
        "group8": "ij",
        "group9": "j",
        "group10": "klm",
        "group11": "lm",
        "group12": "m"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a(b(c)))(?:d(e(f)))(?:h(i(j)))(?:k(l(m)))$/",
    "haystack": "abcdefhijklm",
    "match": [
      {
        "match": "abcdefhijklm",
        "group1": "bc",
        "group2": "c",
        "group3": "ef",
        "group4": "f",
        "group5": "ij",
        "group6": "j",
        "group7": "lm",
        "group8": "m"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\w][\\W][\\s][\\S][\\d][\\D][\\b][\\n][\\c]][\\022]/",
    "haystack": "a+ Z0+\\x08\\n\\x1d\\x12",
    "match": [
      {
        "match": "a+ Z0+\\x08\\x0a\\x1d\\x12"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[.^$|()*+?{,}]+/",
    "haystack": ".^\\$(*+)|{?,?}",
    "match": [
      {
        "match": ".^$(*+)|{?,?}"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*\\w/",
    "haystack": "z",
    "match": [
      {
        "match": "z"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*\\w/",
    "haystack": "az",
    "match": [
      {
        "match": "az"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*\\w/",
    "haystack": "aaaz",
    "match": [
      {
        "match": "aaaz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*\\w/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*\\w/",
    "haystack": "aa",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*\\w/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*\\w/",
    "haystack": "a+",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*\\w/",
    "haystack": "aa+",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*?\\w/",
    "haystack": "z",
    "match": [
      {
        "match": "z"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*?\\w/",
    "haystack": "az",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*?\\w/",
    "haystack": "aaaz",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*?\\w/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*?\\w/",
    "haystack": "aa",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*?\\w/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*?\\w/",
    "haystack": "a+",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*?\\w/",
    "haystack": "aa+",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a+\\w/",
    "haystack": "az",
    "match": [
      {
        "match": "az"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a+\\w/",
    "haystack": "aaaz",
    "match": [
      {
        "match": "aaaz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a+\\w/",
    "haystack": "aa",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a+\\w/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a+\\w/",
    "haystack": "aa+",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a+?\\w/",
    "haystack": "az",
    "match": [
      {
        "match": "az"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a+?\\w/",
    "haystack": "aaaz",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a+?\\w/",
    "haystack": "aa",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a+?\\w/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a+?\\w/",
    "haystack": "aa+",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\d{8}\\w{2,}/",
    "haystack": "1234567890",
    "match": [
      {
        "match": "1234567890"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\d{8}\\w{2,}/",
    "haystack": "12345678ab",
    "match": [
      {
        "match": "12345678ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\d{8}\\w{2,}/",
    "haystack": "12345678__",
    "match": [
      {
        "match": "12345678__"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^\\d{8}\\w{2,}/",
    "haystack": "1234567",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[aeiou\\d]{4,5}$/",
    "haystack": "uoie",
    "match": [
      {
        "match": "uoie"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[aeiou\\d]{4,5}$/",
    "haystack": "1234",
    "match": [
      {
        "match": "1234"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[aeiou\\d]{4,5}$/",
    "haystack": "12345",
    "match": [
      {
        "match": "12345"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[aeiou\\d]{4,5}$/",
    "haystack": "aaaaa",
    "match": [
      {
        "match": "aaaaa"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[aeiou\\d]{4,5}$/",
    "haystack": "123456",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[aeiou\\d]{4,5}?/",
    "haystack": "uoie",
    "match": [
      {
        "match": "uoie"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[aeiou\\d]{4,5}?/",
    "haystack": "1234",
    "match": [
      {
        "match": "1234"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[aeiou\\d]{4,5}?/",
    "haystack": "12345",
    "match": [
      {
        "match": "1234"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[aeiou\\d]{4,5}?/",
    "haystack": "aaaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[aeiou\\d]{4,5}?/",
    "haystack": "123456",
    "match": [
      {
        "match": "1234"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A(abc|def)=(\\1){2,3}\\Z/",
    "haystack": "abc=abcabc",
    "match": [
      {
        "match": "abc=abcabc",
        "group1": "abc",
        "group2": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A(abc|def)=(\\1){2,3}\\Z/",
    "haystack": "def=defdefdef",
    "match": [
      {
        "match": "def=defdefdef",
        "group1": "def",
        "group2": "def"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\A(abc|def)=(\\1){2,3}\\Z/",
    "haystack": "abc=defdef",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\11*(\\3\\4)\\1(?#)2$/",
    "haystack": "abcdefghijkcda2",
    "match": [
      {
        "match": "abcdefghijkcda2",
        "group1": "a",
        "group2": "b",
        "group3": "c",
        "group4": "d",
        "group5": "e",
        "group6": "f",
        "group7": "g",
        "group8": "h",
        "group9": "i",
        "group10": "j",
        "group11": "k",
        "group12": "cd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\11*(\\3\\4)\\1(?#)2$/",
    "haystack": "abcdefghijkkkkcda2",
    "match": [
      {
        "match": "abcdefghijkkkkcda2",
        "group1": "a",
        "group2": "b",
        "group3": "c",
        "group4": "d",
        "group5": "e",
        "group6": "f",
        "group7": "g",
        "group8": "h",
        "group9": "i",
        "group10": "j",
        "group11": "k",
        "group12": "cd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(cat(a(ract|tonic)|erpillar)) \\1()2(3)/",
    "haystack": "cataract cataract23",
    "match": [
      {
        "match": "cataract cataract23",
        "group1": "cataract",
        "group2": "aract",
        "group3": "ract",
        "group4": "",
        "group5": "3"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(cat(a(ract|tonic)|erpillar)) \\1()2(3)/",
    "haystack": "catatonic catatonic23",
    "match": [
      {
        "match": "catatonic catatonic23",
        "group1": "catatonic",
        "group2": "atonic",
        "group3": "tonic",
        "group4": "",
        "group5": "3"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(cat(a(ract|tonic)|erpillar)) \\1()2(3)/",
    "haystack": "caterpillar caterpillar23",
    "match": [
      {
        "match": "caterpillar caterpillar23",
        "group1": "caterpillar",
        "group2": "erpillar",
        "group4": "",
        "group5": "3"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^From +([^ ]+) +[a-zA-Z][a-zA-Z][a-zA-Z] +[a-zA-Z][a-zA-Z][a-zA-Z] +[0-9]?[0-9] +[0-9][0-9]:[0-9][0-9]/",
    "haystack": "From abcd  Mon Sep 01 12:33:02 1997",
    "match": [
      {
        "match": "From abcd  Mon Sep 01 12:33",
        "group1": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^From\\s+\\S+\\s+([a-zA-Z]{3}\\s+){2}\\d{1,2}\\s+\\d\\d:\\d\\d/",
    "haystack": "From abcd  Mon Sep 01 12:33:02 1997",
    "match": [
      {
        "match": "From abcd  Mon Sep 01 12:33",
        "group1": "Sep "
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^From\\s+\\S+\\s+([a-zA-Z]{3}\\s+){2}\\d{1,2}\\s+\\d\\d:\\d\\d/",
    "haystack": "From abcd  Mon Sep  1 12:33:02 1997",
    "match": [
      {
        "match": "From abcd  Mon Sep  1 12:33",
        "group1": "Sep  "
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^From\\s+\\S+\\s+([a-zA-Z]{3}\\s+){2}\\d{1,2}\\s+\\d\\d:\\d\\d/",
    "haystack": "From abcd  Sep 01 12:33:02 1997",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^12.34/s",
    "haystack": "12\\n34",
    "match": [
      {
        "match": "12\\x0a34"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^12.34/s",
    "haystack": "12\\r34",
    "match": [
      {
        "match": "12\\x0d34"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\w+(?=\\t)/",
    "haystack": "the quick brown\\t fox",
    "match": [
      {
        "match": "brown"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/foo(?!bar)(.*)/",
    "haystack": "foobar is foolish see?",
    "match": [
      {
        "match": "foolish see?",
        "group1": "lish see?"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?!foo)...|^.{0,2})bar(.*)/",
    "haystack": "foobar crowbar etc",
    "match": [
      {
        "match": "rowbar etc",
        "group1": " etc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?!foo)...|^.{0,2})bar(.*)/",
    "haystack": "barrel",
    "match": [
      {
        "match": "barrel",
        "group1": "rel"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?!foo)...|^.{0,2})bar(.*)/",
    "haystack": "2barrel",
    "match": [
      {
        "match": "2barrel",
        "group1": "rel"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?!foo)...|^.{0,2})bar(.*)/",
    "haystack": "A barrel",
    "match": [
      {
        "match": "A barrel",
        "group1": "rel"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\D*)(?=\\d)(?!123)/",
    "haystack": "abc456",
    "match": [
      {
        "match": "abc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(\\D*)(?=\\d)(?!123)/",
    "haystack": "abc123",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^1234(?# test newlines\n  inside)/",
    "haystack": "1234",
    "match": [
      {
        "match": "1234"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^1234 #comment in extended re\n  /x",
    "haystack": "1234",
    "match": [
      {
        "match": "1234"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/#rhubarb\n  abcd/x",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^abcd#rhubarb/x",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)\\1{2,3}(.)/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab",
        "group1": "a",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)\\1{2,3}(.)/",
    "haystack": "aaaab",
    "match": [
      {
        "match": "aaaab",
        "group1": "a",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)\\1{2,3}(.)/",
    "haystack": "aaaaab",
    "match": [
      {
        "match": "aaaaa",
        "group1": "a",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)\\1{2,3}(.)/",
    "haystack": "aaaaaab",
    "match": [
      {
        "match": "aaaaa",
        "group1": "a",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!^)abc/",
    "haystack": "the abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?!^)abc/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=^)abc/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=^)abc/",
    "haystack": "the abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab]{1,3}(ab*|b)/",
    "haystack": "aabbbbb",
    "match": [
      {
        "match": "aabb",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab]{1,3}?(ab*|b)/",
    "haystack": "aabbbbb",
    "match": [
      {
        "match": "aabbbbb",
        "group1": "abbbbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab]{1,3}?(ab*?|b)/",
    "haystack": "aabbbbb",
    "match": [
      {
        "match": "aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[ab]{1,3}(ab*?|b)/",
    "haystack": "aabbbbb",
    "match": [
      {
        "match": "aabb",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                          # optional leading comment\n(?:    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n# address\n|                     #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)             # one word, optionally followed by....\n(?:\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...\n\\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)       |  # comments, or...\n\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n# quoted strings\n)*\n<  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                     # leading <\n(?:  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  ,  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n)* # further okay, if led by comma\n:                                # closing colon\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  )? #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n#       address spec\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  > #                  trailing >\n# name and address\n)  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                       # optional trailing comment\n/x",
    "haystack": "Alan Other <user\\@dom.ain>",
    "match": [
      {
        "match": "Alan Other <user@dom.ain>"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                          # optional leading comment\n(?:    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n# address\n|                     #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)             # one word, optionally followed by....\n(?:\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...\n\\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)       |  # comments, or...\n\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n# quoted strings\n)*\n<  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                     # leading <\n(?:  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  ,  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n)* # further okay, if led by comma\n:                                # closing colon\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  )? #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n#       address spec\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  > #                  trailing >\n# name and address\n)  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                       # optional trailing comment\n/x",
    "haystack": "<user\\@dom.ain>",
    "match": [
      {
        "match": "user@dom.ain"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                          # optional leading comment\n(?:    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n# address\n|                     #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)             # one word, optionally followed by....\n(?:\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...\n\\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)       |  # comments, or...\n\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n# quoted strings\n)*\n<  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                     # leading <\n(?:  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  ,  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n)* # further okay, if led by comma\n:                                # closing colon\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  )? #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n#       address spec\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  > #                  trailing >\n# name and address\n)  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                       # optional trailing comment\n/x",
    "haystack": "user\\@dom.ain",
    "match": [
      {
        "match": "user@dom.ain"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                          # optional leading comment\n(?:    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n# address\n|                     #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)             # one word, optionally followed by....\n(?:\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...\n\\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)       |  # comments, or...\n\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n# quoted strings\n)*\n<  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                     # leading <\n(?:  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  ,  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n)* # further okay, if led by comma\n:                                # closing colon\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  )? #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n#       address spec\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  > #                  trailing >\n# name and address\n)  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                       # optional trailing comment\n/x",
    "haystack": "\\\"A. Other\\\" <user.1234\\@dom.ain> (a comment)",
    "match": [
      {
        "match": "\"A. Other\" <user.1234@dom.ain> (a comment)"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                          # optional leading comment\n(?:    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n# address\n|                     #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)             # one word, optionally followed by....\n(?:\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...\n\\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)       |  # comments, or...\n\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n# quoted strings\n)*\n<  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                     # leading <\n(?:  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  ,  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n)* # further okay, if led by comma\n:                                # closing colon\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  )? #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n#       address spec\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  > #                  trailing >\n# name and address\n)  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                       # optional trailing comment\n/x",
    "haystack": "A. Other <user.1234\\@dom.ain> (a comment)",
    "match": [
      {
        "match": " Other <user.1234@dom.ain> (a comment)"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                          # optional leading comment\n(?:    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n# address\n|                     #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)             # one word, optionally followed by....\n(?:\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...\n\\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)       |  # comments, or...\n\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n# quoted strings\n)*\n<  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                     # leading <\n(?:  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  ,  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n)* # further okay, if led by comma\n:                                # closing colon\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  )? #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n#       address spec\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  > #                  trailing >\n# name and address\n)  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                       # optional trailing comment\n/x",
    "haystack": "\\\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\\\"\\@x400-re.lay",
    "match": [
      {
        "match": "\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"@x400-re.lay"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                          # optional leading comment\n(?:    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n# address\n|                     #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)             # one word, optionally followed by....\n(?:\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...\n\\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)       |  # comments, or...\n\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n# quoted strings\n)*\n<  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                     # leading <\n(?:  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  ,  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n)* # further okay, if led by comma\n:                                # closing colon\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  )? #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n#       address spec\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  > #                  trailing >\n# name and address\n)  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                       # optional trailing comment\n/x",
    "haystack": "A missing angle <user\\@some.where",
    "match": [
      {
        "match": "user@some.where"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                          # optional leading comment\n(?:    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n# address\n|                     #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)             # one word, optionally followed by....\n(?:\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...\n\\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)       |  # comments, or...\n\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n# quoted strings\n)*\n<  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                     # leading <\n(?:  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  ,  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n)* # further okay, if led by comma\n:                                # closing colon\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  )? #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote\n|                     #    or\n\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  @  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*    (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                           # initial subdomain\n(?:                                  #\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*   (?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|   \\[                         # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff\n\\]                        #           ]\n)                     #   ...further okay\n)*\n#       address spec\n(?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*  > #                  trailing >\n# name and address\n)  (?: [\\040\\t] |  \\(\n(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*\n\\)  )*                       # optional trailing comment\n/x",
    "haystack": "The quick brown fox",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional leading comment\n(?:\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n# address\n|                             #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n# leading word\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces\n(?:\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n|\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n) # \"special\" comment or quoted string\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"\n)*\n<\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# <\n(?:\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n(?: ,\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n)*  # additional domains\n:\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)?     #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n#       address spec\n>                    #                 >\n# name and address\n)\n/x",
    "haystack": "Alan Other <user\\@dom.ain>",
    "match": [
      {
        "match": "Alan Other <user@dom.ain>"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional leading comment\n(?:\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n# address\n|                             #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n# leading word\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces\n(?:\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n|\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n) # \"special\" comment or quoted string\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"\n)*\n<\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# <\n(?:\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n(?: ,\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n)*  # additional domains\n:\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)?     #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n#       address spec\n>                    #                 >\n# name and address\n)\n/x",
    "haystack": "<user\\@dom.ain>",
    "match": [
      {
        "match": "user@dom.ain"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional leading comment\n(?:\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n# address\n|                             #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n# leading word\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces\n(?:\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n|\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n) # \"special\" comment or quoted string\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"\n)*\n<\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# <\n(?:\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n(?: ,\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n)*  # additional domains\n:\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)?     #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n#       address spec\n>                    #                 >\n# name and address\n)\n/x",
    "haystack": "user\\@dom.ain",
    "match": [
      {
        "match": "user@dom.ain"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional leading comment\n(?:\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n# address\n|                             #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n# leading word\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces\n(?:\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n|\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n) # \"special\" comment or quoted string\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"\n)*\n<\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# <\n(?:\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n(?: ,\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n)*  # additional domains\n:\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)?     #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n#       address spec\n>                    #                 >\n# name and address\n)\n/x",
    "haystack": "\\\"A. Other\\\" <user.1234\\@dom.ain> (a comment)",
    "match": [
      {
        "match": "\"A. Other\" <user.1234@dom.ain>"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional leading comment\n(?:\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n# address\n|                             #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n# leading word\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces\n(?:\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n|\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n) # \"special\" comment or quoted string\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"\n)*\n<\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# <\n(?:\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n(?: ,\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n)*  # additional domains\n:\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)?     #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n#       address spec\n>                    #                 >\n# name and address\n)\n/x",
    "haystack": "A. Other <user.1234\\@dom.ain> (a comment)",
    "match": [
      {
        "match": " Other <user.1234@dom.ain>"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional leading comment\n(?:\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n# address\n|                             #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n# leading word\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces\n(?:\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n|\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n) # \"special\" comment or quoted string\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"\n)*\n<\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# <\n(?:\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n(?: ,\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n)*  # additional domains\n:\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)?     #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n#       address spec\n>                    #                 >\n# name and address\n)\n/x",
    "haystack": "\\\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\\\"\\@x400-re.lay",
    "match": [
      {
        "match": "\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"@x400-re.lay"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional leading comment\n(?:\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n# address\n|                             #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n# leading word\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces\n(?:\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n|\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n) # \"special\" comment or quoted string\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"\n)*\n<\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# <\n(?:\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n(?: ,\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n)*  # additional domains\n:\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)?     #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n#       address spec\n>                    #                 >\n# name and address\n)\n/x",
    "haystack": "A missing angle <user\\@some.where",
    "match": [
      {
        "match": "user@some.where"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional leading comment\n(?:\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n# address\n|                             #  or\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n# leading word\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces\n(?:\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n|\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n) # \"special\" comment or quoted string\n[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"\n)*\n<\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# <\n(?:\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n(?: ,\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n)*  # additional domains\n:\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)?     #       optional route\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n# Atom\n|                       #  or\n\"                                     # \"\n[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal\n(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*\n\"                                     #        \"\n# Quoted string\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# additional words\n)*\n@\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n(?:\n\\.\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n(?:\n[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...\n(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom\n|\n\\[                            # [\n(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff\n\\]                           #           ]\n)\n[\\040\\t]*                    # Nab whitespace.\n(?:\n\\(                              #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*\n(?:                                 #       (\n(?:  \\\\ [^\\x80-\\xff]  |\n\\(                            #  (\n[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*\n(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*\n\\)                           #                       )\n)    #         special\n[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*\n)*                                  #            )*\n\\)                             #                )\n[\\040\\t]* )*    # If comment found, allow more spaces.\n# optional trailing comments\n)*\n#       address spec\n>                    #                 >\n# name and address\n)\n/x",
    "haystack": "The quick brown fox",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/abc\\0def\\00pqr\\000xyz\\0000AB/",
    "haystack": "abc\\0def\\00pqr\\000xyz\\0000AB",
    "match": [
      {
        "match": "abc\\x00def\\x00pqr\\x00xyz\\x000AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc\\0def\\00pqr\\000xyz\\0000AB/",
    "haystack": "abc456 abc\\0def\\00pqr\\000xyz\\0000ABCDE",
    "match": [
      {
        "match": "abc\\x00def\\x00pqr\\x00xyz\\x000AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc\\x0def\\x00pqr\\x000xyz\\x0000AB/",
    "haystack": "abc\\x0def\\x00pqr\\x000xyz\\x0000AB",
    "match": [
      {
        "match": "abc\\x0def\\x00pqr\\x000xyz\\x0000AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc\\x0def\\x00pqr\\x000xyz\\x0000AB/",
    "haystack": "abc456 abc\\x0def\\x00pqr\\x000xyz\\x0000ABCDE",
    "match": [
      {
        "match": "abc\\x0def\\x00pqr\\x000xyz\\x0000AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\000-\\037]/",
    "haystack": "\\0A",
    "match": [
      {
        "match": "\\x00"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\000-\\037]/",
    "haystack": "\\01B",
    "match": [
      {
        "match": "\\x01"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\000-\\037]/",
    "haystack": "\\037C",
    "match": [
      {
        "match": "\\x1f"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\0*/",
    "haystack": "\\0\\0\\0\\0",
    "match": [
      {
        "match": "\\x00\\x00\\x00\\x00"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A\\x0{2,3}Z/",
    "haystack": "The A\\x0\\x0Z",
    "match": [
      {
        "match": "A\\x00\\x00Z"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A\\x0{2,3}Z/",
    "haystack": "An A\\0\\x0\\0Z",
    "match": [
      {
        "match": "A\\x00\\x00\\x00Z"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/A\\x0{2,3}Z/",
    "haystack": "A\\0Z",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/A\\x0{2,3}Z/",
    "haystack": "A\\0\\x0\\0\\x0Z",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(cow|)\\1(bell)/",
    "haystack": "cowcowbell",
    "match": [
      {
        "match": "cowcowbell",
        "group1": "cow",
        "group2": "bell"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(cow|)\\1(bell)/",
    "haystack": "bell",
    "match": [
      {
        "match": "bell",
        "group1": "",
        "group2": "bell"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(cow|)\\1(bell)/",
    "haystack": "cowbell",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\s/",
    "haystack": "\\040abc",
    "match": [
      {
        "match": " "
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\s/",
    "haystack": "\\x0cabc",
    "match": [
      {
        "match": "\\x0c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\s/",
    "haystack": "\\nabc",
    "match": [
      {
        "match": "\\x0a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\s/",
    "haystack": "\\rabc",
    "match": [
      {
        "match": "\\x0d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\s/",
    "haystack": "\\tabc",
    "match": [
      {
        "match": "\\x09"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^\\s/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^a\tb\n    \f  c/x",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1*b/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1*b/",
    "haystack": "aaaab",
    "match": [
      {
        "match": "aaaab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1*b/",
    "haystack": "b",
    "match": [
      {
        "match": "b",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a|)\\1*b/",
    "haystack": "acb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1+b/",
    "haystack": "aab",
    "match": [
      {
        "match": "aab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1+b/",
    "haystack": "aaaab",
    "match": [
      {
        "match": "aaaab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1+b/",
    "haystack": "b",
    "match": [
      {
        "match": "b",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a|)\\1+b/",
    "haystack": "ab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1?b/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1?b/",
    "haystack": "aab",
    "match": [
      {
        "match": "aab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1?b/",
    "haystack": "b",
    "match": [
      {
        "match": "b",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a|)\\1?b/",
    "haystack": "acb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1{2}b/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1{2}b/",
    "haystack": "b",
    "match": [
      {
        "match": "b",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a|)\\1{2}b/",
    "haystack": "ab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1{2}b/",
    "haystack": "aab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1{2}b/",
    "haystack": "aaaab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1{2,3}b/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1{2,3}b/",
    "haystack": "aaaab",
    "match": [
      {
        "match": "aaaab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1{2,3}b/",
    "haystack": "b",
    "match": [
      {
        "match": "b",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a|)\\1{2,3}b/",
    "haystack": "ab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1{2,3}b/",
    "haystack": "aab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|)\\1{2,3}b/",
    "haystack": "aaaaab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{1,3}bc/",
    "haystack": "abbbbc",
    "match": [
      {
        "match": "abbbbc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{1,3}bc/",
    "haystack": "abbbc",
    "match": [
      {
        "match": "abbbc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{1,3}bc/",
    "haystack": "abbc",
    "match": [
      {
        "match": "abbc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/ab{1,3}bc/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{1,3}bc/",
    "haystack": "abbbbbc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/([^.]*)\\.([^:]*):[T ]+(.*)/",
    "haystack": "track1.title:TBlah blah blah",
    "match": [
      {
        "match": "track1.title:TBlah blah blah",
        "group1": "track1",
        "group2": "title",
        "group3": "Blah blah blah"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^.]*)\\.([^:]*):[T ]+(.*)/i",
    "haystack": "track1.title:TBlah blah blah",
    "match": [
      {
        "match": "track1.title:TBlah blah blah",
        "group1": "track1",
        "group2": "title",
        "group3": "Blah blah blah"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^.]*)\\.([^:]*):[t ]+(.*)/i",
    "haystack": "track1.title:TBlah blah blah",
    "match": [
      {
        "match": "track1.title:TBlah blah blah",
        "group1": "track1",
        "group2": "title",
        "group3": "Blah blah blah"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-c]+$/",
    "haystack": "WXY_^abc",
    "match": [
      {
        "match": "WXY_^abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[W-c]+$/",
    "haystack": "wxy",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-c]+$/i",
    "haystack": "WXY_^abc",
    "match": [
      {
        "match": "WXY_^abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-c]+$/i",
    "haystack": "wxy_^ABC",
    "match": [
      {
        "match": "wxy_^ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\x3f-\\x5F]+$/i",
    "haystack": "WXY_^abc",
    "match": [
      {
        "match": "WXY_^abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\x3f-\\x5F]+$/i",
    "haystack": "wxy_^ABC",
    "match": [
      {
        "match": "wxy_^ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc$/m",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc$/m",
    "haystack": "qqq\\nabc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc$/m",
    "haystack": "abc\\nzzz",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc$/m",
    "haystack": "qqq\\nabc\\nzzz",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc$/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^abc$/",
    "haystack": "qqq\\nabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc$/",
    "haystack": "abc\\nzzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc$/",
    "haystack": "qqq\\nabc\\nzzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Aabc\\Z/m",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Aabc\\Z/m",
    "haystack": "abc\\n",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\Aabc\\Z/m",
    "haystack": "qqq\\nabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Aabc\\Z/m",
    "haystack": "abc\\nzzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Aabc\\Z/m",
    "haystack": "qqq\\nabc\\nzzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A(.)*\\Z/s",
    "haystack": "abc\\ndef",
    "match": [
      {
        "match": "abc\\x0adef",
        "group1": "f"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\A(.)*\\Z/m",
    "haystack": "abc\\ndef",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:b)|(?::+)/",
    "haystack": "b::c",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:b)|(?::+)/",
    "haystack": "c::b",
    "match": [
      {
        "match": "::"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[-az]+/",
    "haystack": "az-",
    "match": [
      {
        "match": "az-"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/[-az]+/",
    "haystack": "b",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[az-]+/",
    "haystack": "za-",
    "match": [
      {
        "match": "za-"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/[az-]+/",
    "haystack": "b",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[a\\-z]+/",
    "haystack": "a-z",
    "match": [
      {
        "match": "a-z"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/[a\\-z]+/",
    "haystack": "b",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[a-z]+/",
    "haystack": "abcdxyz",
    "match": [
      {
        "match": "abcdxyz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\d-]+/",
    "haystack": "12-34",
    "match": [
      {
        "match": "12-34"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/[\\d-]+/",
    "haystack": "aaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\x5c/",
    "haystack": "\\\\",
    "match": [
      {
        "match": "\\"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\x20Z/",
    "haystack": "the Zoo",
    "match": [
      {
        "match": " Z"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\x20Z/",
    "haystack": "Zulu",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\1/i",
    "haystack": "abcabc",
    "match": [
      {
        "match": "abcabc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\1/i",
    "haystack": "ABCabc",
    "match": [
      {
        "match": "ABCabc",
        "group1": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\1/i",
    "haystack": "abcABC",
    "match": [
      {
        "match": "abcABC",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc$/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc$/",
    "haystack": "abc\\n",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/abc$/",
    "haystack": "abc\\ndef",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\123/",
    "haystack": "abc\\x53",
    "match": [
      {
        "match": "abcS",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\223/",
    "haystack": "abc\\x93",
    "match": [
      {
        "match": "abc\\x93",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\323/",
    "haystack": "abc\\xd3",
    "match": [
      {
        "match": "abc\\xd3",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\100/",
    "haystack": "abc\\x40",
    "match": [
      {
        "match": "abc@",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\100/",
    "haystack": "abc\\100",
    "match": [
      {
        "match": "abc@",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\1000/",
    "haystack": "abc\\x400",
    "match": [
      {
        "match": "abc@0",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\1000/",
    "haystack": "abc\\x40\\x30",
    "match": [
      {
        "match": "abc@0",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\1000/",
    "haystack": "abc\\1000",
    "match": [
      {
        "match": "abc@0",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\1000/",
    "haystack": "abc\\100\\x30",
    "match": [
      {
        "match": "abc@0",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\1000/",
    "haystack": "abc\\100\\060",
    "match": [
      {
        "match": "abc@0",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\1000/",
    "haystack": "abc\\100\\60",
    "match": [
      {
        "match": "abc@0",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(A)(B)(C)(D)(E)(F)(G)(H)(I)\\8\\9$/",
    "haystack": "ABCDEFGHIHI",
    "match": [
      {
        "match": "ABCDEFGHIHI",
        "group1": "A",
        "group2": "B",
        "group3": "C",
        "group4": "D",
        "group5": "E",
        "group6": "F",
        "group7": "G",
        "group8": "H",
        "group9": "I"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[A\\8B\\9C]+$/",
    "haystack": "A8B9C",
    "match": [
      {
        "match": "A8B9C"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[A\\8B\\9C]+$/",
    "haystack": "A8B9C\\x00",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)\\12\\123/",
    "haystack": "abcdefghijkllS",
    "match": [
      {
        "match": "abcdefghijkllS",
        "group1": "a",
        "group2": "b",
        "group3": "c",
        "group4": "d",
        "group5": "e",
        "group6": "f",
        "group7": "g",
        "group8": "h",
        "group9": "i",
        "group10": "j",
        "group11": "k",
        "group12": "l"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\12\\123/",
    "haystack": "abcdefghijk\\12S",
    "match": [
      {
        "match": "abcdefghijk\\x0aS",
        "group1": "a",
        "group2": "b",
        "group3": "c",
        "group4": "d",
        "group5": "e",
        "group6": "f",
        "group7": "g",
        "group8": "h",
        "group9": "i",
        "group10": "j",
        "group11": "k"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{0}bc/",
    "haystack": "bc",
    "match": [
      {
        "match": "bc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a|(bc)){0,0}?xyz/",
    "haystack": "xyz",
    "match": [
      {
        "match": "xyz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc[\\10]de/",
    "haystack": "abc\\010de",
    "match": [
      {
        "match": "abc\\x08de"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc[\\1]de/",
    "haystack": "abc\\1de",
    "match": [
      {
        "match": "abc\\x01de"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)[\\1]de/",
    "haystack": "abc\\1de",
    "match": [
      {
        "match": "abc\\x01de",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s)a.b/",
    "haystack": "a\\nb",
    "match": [
      {
        "match": "a\\x0ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^a])([^\\b])([^c]*)([^d]{3,4})/",
    "haystack": "baNOTccccd",
    "match": [
      {
        "match": "baNOTcccc",
        "group1": "b",
        "group2": "a",
        "group3": "NOT",
        "group4": "cccc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^a])([^\\b])([^c]*)([^d]{3,4})/",
    "haystack": "baNOTcccd",
    "match": [
      {
        "match": "baNOTccc",
        "group1": "b",
        "group2": "a",
        "group3": "NOT",
        "group4": "ccc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^a])([^\\b])([^c]*)([^d]{3,4})/",
    "haystack": "baNOTccd",
    "match": [
      {
        "match": "baNOTcc",
        "group1": "b",
        "group2": "a",
        "group3": "NO",
        "group4": "Tcc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^a])([^\\b])([^c]*)([^d]{3,4})/",
    "haystack": "bacccd",
    "match": [
      {
        "match": "baccc",
        "group1": "b",
        "group2": "a",
        "group3": "",
        "group4": "ccc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^([^a])([^\\b])([^c]*)([^d]{3,4})/",
    "haystack": "anything",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^a])([^\\b])([^c]*)([^d]{3,4})/",
    "haystack": "b\\bc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^a])([^\\b])([^c]*)([^d]{3,4})/",
    "haystack": "baccd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]/",
    "haystack": "Abc",
    "match": [
      {
        "match": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]/i",
    "haystack": "Abc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]+/",
    "haystack": "AAAaAbc",
    "match": [
      {
        "match": "AAA"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]+/i",
    "haystack": "AAAaAbc",
    "match": [
      {
        "match": "bc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]+/",
    "haystack": "bbb\\nccc",
    "match": [
      {
        "match": "bbb\\x0accc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^k]$/",
    "haystack": "abc",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/[^k]$/",
    "haystack": "abk",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[^k]{2,3}$/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^k]{2,3}$/",
    "haystack": "kbc",
    "match": [
      {
        "match": "bc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^k]{2,3}$/",
    "haystack": "kabc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/[^k]{2,3}$/",
    "haystack": "abk",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[^k]{2,3}$/",
    "haystack": "akb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[^k]{2,3}$/",
    "haystack": "akk",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\d{8,}\\@.+[^k]$/",
    "haystack": "12345678\\@a.b.c.d",
    "match": [
      {
        "match": "12345678@a.b.c.d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\d{8,}\\@.+[^k]$/",
    "haystack": "123456789\\@x.y.z",
    "match": [
      {
        "match": "123456789@x.y.z"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^\\d{8,}\\@.+[^k]$/",
    "haystack": "12345678\\@x.y.uk",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\d{8,}\\@.+[^k]$/",
    "haystack": "1234567\\@a.b.c.d",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)\\1{8,}/",
    "haystack": "aaaaaaaaa",
    "match": [
      {
        "match": "aaaaaaaaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)\\1{8,}/",
    "haystack": "aaaaaaaaaa",
    "match": [
      {
        "match": "aaaaaaaaaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(a)\\1{8,}/",
    "haystack": "aaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]/",
    "haystack": "aaaabcd",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]/",
    "haystack": "aaAabcd",
    "match": [
      {
        "match": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]/i",
    "haystack": "aaaabcd",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]/i",
    "haystack": "aaAabcd",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^az]/",
    "haystack": "aaaabcd",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^az]/",
    "haystack": "aaAabcd",
    "match": [
      {
        "match": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^az]/i",
    "haystack": "aaaabcd",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^az]/i",
    "haystack": "aaAabcd",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern
    "haystack
    "match": [
      {
        "match": "\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/P[^*]TAIRE[^*]{1,6}?LL/",
    "haystack": "xxxxxxxxxxxPSTAIREISLLxxxxxxxxx",
    "match": [
      {
        "match": "PSTAIREISLL"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/P[^*]TAIRE[^*]{1,}?LL/",
    "haystack": "xxxxxxxxxxxPSTAIREISLLxxxxxxxxx",
    "match": [
      {
        "match": "PSTAIREISLL"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(\\.\\d\\d[1-9]?)\\d+/",
    "haystack": "1.230003938",
    "match": [
      {
        "match": ".230003938",
        "group1": ".23"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(\\.\\d\\d[1-9]?)\\d+/",
    "haystack": "1.875000282",
    "match": [
      {
        "match": ".875000282",
        "group1": ".875"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(\\.\\d\\d[1-9]?)\\d+/",
    "haystack": "1.235",
    "match": [
      {
        "match": ".235",
        "group1": ".23"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(\\.\\d\\d((?=0)|\\d(?=\\d)))/",
    "haystack": "1.230003938",
    "match": [
      {
        "match": ".23",
        "group1": ".23",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(\\.\\d\\d((?=0)|\\d(?=\\d)))/",
    "haystack": "1.875000282",
    "match": [
      {
        "match": ".875",
        "group1": ".875",
        "group2": "5"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(\\.\\d\\d((?=0)|\\d(?=\\d)))/",
    "haystack": "1.235",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?)b/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\b(foo)\\s+(\\w+)/i",
    "haystack": "Food is on the foo table",
    "match": [
      {
        "match": "foo table",
        "group1": "foo",
        "group2": "table"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/foo(.*)bar/",
    "haystack": "The food is under the bar in the barn.",
    "match": [
      {
        "match": "food is under the bar in the bar",
        "group1": "d is under the bar in the "
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/foo(.*?)bar/",
    "haystack": "The food is under the bar in the barn.",
    "match": [
      {
        "match": "food is under the bar",
        "group1": "d is under the "
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*)(\\d*)/",
    "haystack": "I have 2 numbers: 53147",
    "match": [
      {
        "match": "I have 2 numbers: 53147",
        "group1": "I have 2 numbers: 53147",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*)(\\d+)/",
    "haystack": "I have 2 numbers: 53147",
    "match": [
      {
        "match": "I have 2 numbers: 53147",
        "group1": "I have 2 numbers: 5314",
        "group2": "7"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*?)(\\d*)/",
    "haystack": "I have 2 numbers: 53147",
    "match": [
      {
        "match": "",
        "group1": "",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*?)(\\d+)/",
    "haystack": "I have 2 numbers: 53147",
    "match": [
      {
        "match": "I have 2",
        "group1": "I have ",
        "group2": "2"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*)(\\d+)$/",
    "haystack": "I have 2 numbers: 53147",
    "match": [
      {
        "match": "I have 2 numbers: 53147",
        "group1": "I have 2 numbers: 5314",
        "group2": "7"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*?)(\\d+)$/",
    "haystack": "I have 2 numbers: 53147",
    "match": [
      {
        "match": "I have 2 numbers: 53147",
        "group1": "I have 2 numbers: ",
        "group2": "53147"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*)\\b(\\d+)$/",
    "haystack": "I have 2 numbers: 53147",
    "match": [
      {
        "match": "I have 2 numbers: 53147",
        "group1": "I have 2 numbers: ",
        "group2": "53147"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*\\D)(\\d+)$/",
    "haystack": "I have 2 numbers: 53147",
    "match": [
      {
        "match": "I have 2 numbers: 53147",
        "group1": "I have 2 numbers: ",
        "group2": "53147"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\D*(?!123)/",
    "haystack": "ABC123",
    "match": [
      {
        "match": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\D*)(?=\\d)(?!123)/",
    "haystack": "ABC445",
    "match": [
      {
        "match": "ABC",
        "group1": "ABC"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(\\D*)(?=\\d)(?!123)/",
    "haystack": "ABC123",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-]46]/",
    "haystack": "W46]789",
    "match": [
      {
        "match": "W46]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-]46]/",
    "haystack": "-46]789",
    "match": [
      {
        "match": "-46]"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[W-]46]/",
    "haystack": "Wall",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-]46]/",
    "haystack": "Zebra",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-]46]/",
    "haystack": "42",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-]46]/",
    "haystack": "[abcd]",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-]46]/",
    "haystack": "]abcd[",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-\\]46]/",
    "haystack": "W46]789",
    "match": [
      {
        "match": "W"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-\\]46]/",
    "haystack": "Wall",
    "match": [
      {
        "match": "W"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-\\]46]/",
    "haystack": "Zebra",
    "match": [
      {
        "match": "Z"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-\\]46]/",
    "haystack": "Xylophone",
    "match": [
      {
        "match": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-\\]46]/",
    "haystack": "42",
    "match": [
      {
        "match": "4"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-\\]46]/",
    "haystack": "[abcd]",
    "match": [
      {
        "match": "["
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-\\]46]/",
    "haystack": "]abcd[",
    "match": [
      {
        "match": "]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-\\]46]/",
    "haystack": "\\\\backslash",
    "match": [
      {
        "match": "\\"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[W-\\]46]/",
    "haystack": "-46]789",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[W-\\]46]/",
    "haystack": "well",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\d\\d\\/\\d\\d\\/\\d\\d\\d\\d/",
    "haystack": "01/01/2000",
    "match": [
      {
        "match": "01/01/2000"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/word (?:[a-zA-Z0-9]+ ){0,10}otherword/",
    "haystack": "word cat dog elephant mussel cow horse canary baboon snake shark otherword",
    "match": [
      {
        "match": "word cat dog elephant mussel cow horse canary baboon snake shark otherword"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/word (?:[a-zA-Z0-9]+ ){0,10}otherword/",
    "haystack": "word cat dog elephant mussel cow horse canary baboon snake shark",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/word (?:[a-zA-Z0-9]+ ){0,300}otherword/",
    "haystack": "word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,0}/",
    "haystack": "bcd",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,0}/",
    "haystack": "abc",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,0}/",
    "haystack": "aab",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,1}/",
    "haystack": "bcd",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,1}/",
    "haystack": "abc",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,1}/",
    "haystack": "aab",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,2}/",
    "haystack": "bcd",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,2}/",
    "haystack": "abc",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,2}/",
    "haystack": "aab",
    "match": [
      {
        "match": "aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,3}/",
    "haystack": "bcd",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,3}/",
    "haystack": "abc",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,3}/",
    "haystack": "aab",
    "match": [
      {
        "match": "aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,3}/",
    "haystack": "aaa",
    "match": [
      {
        "match": "aaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,}/",
    "haystack": "bcd",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,}/",
    "haystack": "abc",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,}/",
    "haystack": "aab",
    "match": [
      {
        "match": "aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,}/",
    "haystack": "aaa",
    "match": [
      {
        "match": "aaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){0,}/",
    "haystack": "aaaaaaaa",
    "match": [
      {
        "match": "aaaaaaaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){1,1}/",
    "haystack": "abc",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){1,1}/",
    "haystack": "aab",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a){1,1}/",
    "haystack": "bcd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){1,2}/",
    "haystack": "abc",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){1,2}/",
    "haystack": "aab",
    "match": [
      {
        "match": "aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a){1,2}/",
    "haystack": "bcd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){1,3}/",
    "haystack": "abc",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){1,3}/",
    "haystack": "aab",
    "match": [
      {
        "match": "aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){1,3}/",
    "haystack": "aaa",
    "match": [
      {
        "match": "aaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a){1,3}/",
    "haystack": "bcd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){1,}/",
    "haystack": "abc",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){1,}/",
    "haystack": "aab",
    "match": [
      {
        "match": "aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){1,}/",
    "haystack": "aaa",
    "match": [
      {
        "match": "aaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){1,}/",
    "haystack": "aaaaaaaa",
    "match": [
      {
        "match": "aaaaaaaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a){1,}/",
    "haystack": "bcd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/.*\\.gif/",
    "haystack": "borfle\\nbib.gif\\nno",
    "match": [
      {
        "match": "bib.gif"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.{0,}\\.gif/",
    "haystack": "borfle\\nbib.gif\\nno",
    "match": [
      {
        "match": "bib.gif"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*\\.gif/m",
    "haystack": "borfle\\nbib.gif\\nno",
    "match": [
      {
        "match": "bib.gif"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*\\.gif/s",
    "haystack": "borfle\\nbib.gif\\nno",
    "match": [
      {
        "match": "borfle\\x0abib.gif"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*\\.gif/ms",
    "haystack": "borfle\\nbib.gif\\nno",
    "match": [
      {
        "match": "borfle\\x0abib.gif"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*$/",
    "haystack": "borfle\\nbib.gif\\nno",
    "match": [
      {
        "match": "no"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*$/m",
    "haystack": "borfle\\nbib.gif\\nno",
    "match": [
      {
        "match": "borfle"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*$/s",
    "haystack": "borfle\\nbib.gif\\nno",
    "match": [
      {
        "match": "borfle\\x0abib.gif\\x0ano"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*$/ms",
    "haystack": "borfle\\nbib.gif\\nno",
    "match": [
      {
        "match": "borfle\\x0abib.gif\\x0ano"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*$/",
    "haystack": "borfle\\nbib.gif\\nno\\n",
    "match": [
      {
        "match": "no"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*$/m",
    "haystack": "borfle\\nbib.gif\\nno\\n",
    "match": [
      {
        "match": "borfle"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*$/s",
    "haystack": "borfle\\nbib.gif\\nno\\n",
    "match": [
      {
        "match": "borfle\\x0abib.gif\\x0ano\\x0a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*$/ms",
    "haystack": "borfle\\nbib.gif\\nno\\n",
    "match": [
      {
        "match": "borfle\\x0abib.gif\\x0ano\\x0a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*X|^B)/",
    "haystack": "abcde\\n1234Xyz",
    "match": [
      {
        "match": "1234X",
        "group1": "1234X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*X|^B)/",
    "haystack": "BarFoo",
    "match": [
      {
        "match": "B",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(.*X|^B)/",
    "haystack": "abcde\\nBar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*X|^B)/m",
    "haystack": "abcde\\n1234Xyz",
    "match": [
      {
        "match": "1234X",
        "group1": "1234X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*X|^B)/m",
    "haystack": "BarFoo",
    "match": [
      {
        "match": "B",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*X|^B)/m",
    "haystack": "abcde\\nBar",
    "match": [
      {
        "match": "B",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*X|^B)/s",
    "haystack": "abcde\\n1234Xyz",
    "match": [
      {
        "match": "abcde\\x0a1234X",
        "group1": "abcde\\x0a1234X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*X|^B)/s",
    "haystack": "BarFoo",
    "match": [
      {
        "match": "B",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(.*X|^B)/s",
    "haystack": "abcde\\nBar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*X|^B)/ms",
    "haystack": "abcde\\n1234Xyz",
    "match": [
      {
        "match": "abcde\\x0a1234X",
        "group1": "abcde\\x0a1234X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*X|^B)/ms",
    "haystack": "BarFoo",
    "match": [
      {
        "match": "B",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*X|^B)/ms",
    "haystack": "abcde\\nBar",
    "match": [
      {
        "match": "B",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s)(.*X|^B)/",
    "haystack": "abcde\\n1234Xyz",
    "match": [
      {
        "match": "abcde\\x0a1234X",
        "group1": "abcde\\x0a1234X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s)(.*X|^B)/",
    "haystack": "BarFoo",
    "match": [
      {
        "match": "B",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?s)(.*X|^B)/",
    "haystack": "abcde\\nBar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s:.*X|^B)/",
    "haystack": "abcde\\n1234Xyz",
    "match": [
      {
        "match": "abcde\\x0a1234X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s:.*X|^B)/",
    "haystack": "BarFoo",
    "match": [
      {
        "match": "B"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?s:.*X|^B)/",
    "haystack": "abcde\\nBar",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*B/",
    "haystack": "abc\\nB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s)^.*B/",
    "haystack": "abc\\nB",
    "match": [
      {
        "match": "abc\\x0aB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?m)^.*B/",
    "haystack": "abc\\nB",
    "match": [
      {
        "match": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?ms)^.*B/",
    "haystack": "abc\\nB",
    "match": [
      {
        "match": "abc\\x0aB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?ms)^B/",
    "haystack": "abc\\nB",
    "match": [
      {
        "match": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s)B$/",
    "haystack": "B\\n",
    "match": [
      {
        "match": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/",
    "haystack": "123456654321",
    "match": [
      {
        "match": "123456654321"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d/",
    "haystack": "123456654321",
    "match": [
      {
        "match": "123456654321"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d]/",
    "haystack": "123456654321",
    "match": [
      {
        "match": "123456654321"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[abc]{12}/",
    "haystack": "abcabcabcabc",
    "match": [
      {
        "match": "abcabcabcabc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a-c]{12}/",
    "haystack": "abcabcabcabc",
    "match": [
      {
        "match": "abcabcabcabc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a|b|c){12}/",
    "haystack": "abcabcabcabc",
    "match": [
      {
        "match": "abcabcabcabc",
        "group1": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[abcdefghijklmnopqrstuvwxy0123456789]/",
    "haystack": "n",
    "match": [
      {
        "match": "n"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[abcdefghijklmnopqrstuvwxy0123456789]/",
    "haystack": "z",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/abcde{0,0}/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/abcde{0,0}/",
    "haystack": "abce",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab[cd]{0,0}e/",
    "haystack": "abe",
    "match": [
      {
        "match": "abe"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/ab[cd]{0,0}e/",
    "haystack": "abcde",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab(c){0,0}d/",
    "haystack": "abd",
    "match": [
      {
        "match": "abd"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/ab(c){0,0}d/",
    "haystack": "abcd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(b*)/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(b*)/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(b*)/",
    "haystack": "abbbb",
    "match": [
      {
        "match": "abbbb",
        "group1": "bbbb"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a(b*)/",
    "haystack": "bbbbb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab\\d{0}e/",
    "haystack": "abe",
    "match": [
      {
        "match": "abe"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/ab\\d{0}e/",
    "haystack": "ab1e",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\"([^\\\\\"]+|\\\\.)*\"/",
    "haystack": "the \\\"quick\\\" brown fox",
    "match": [
      {
        "match": "\"quick\"",
        "group1": "quick"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\"([^\\\\\"]+|\\\\.)*\"/",
    "haystack": "\\\"the \\\\\\\"quick\\\\\\\" brown fox\\\"",
    "match": [
      {
        "match": "\"the \\\"quick\\\" brown fox\"",
        "group1": " brown fox"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.*?/g",
    "haystack": "abc",
    "match": [
      {
        "match": ""
      },
      {
        "match": "a"
      },
      {
        "match": ""
      },
      {
        "match": "b"
      },
      {
        "match": ""
      },
      {
        "match": "c"
      },
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\b/g",
    "haystack": "abc",
    "match": [
      {
        "match": ""
      },
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\b/g",
    "haystack": "abc",
    "match": [
      {
        "match": ""
      },
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?#)/g",
    "haystack": "abc",
    "match": [
      {
        "match": ""
      },
      {
        "match": ""
      },
      {
        "match": ""
      },
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/<tr([\\w\\W\\s\\d][^<>]{0,})><TD([\\w\\W\\s\\d][^<>]{0,})>([\\d]{0,}\\.)(.*)((<BR>([\\w\\W\\s\\d][^<>]{0,})|[\\s]{0,}))<\\/a><\\/TD><TD([\\w\\W\\s\\d][^<>]{0,})>([\\w\\W\\s\\d][^<>]{0,})<\\/TD><TD([\\w\\W\\s\\d][^<>]{0,})>([\\w\\W\\s\\d][^<>]{0,})<\\/TD><\\/TR>/is",
    "haystack": "<TR BGCOLOR='#DBE9E9'><TD align=left valign=top>43.<a href='joblist.cfm?JobID=94 6735&Keyword='>Word Processor<BR>(N-1286)</a></TD><TD align=left valign=top>Lega lstaff.com</TD><TD align=left valign=top>CA - Statewide</TD></TR>",
    "match": [
      {
        "match": "<TR BGCOLOR='#DBE9E9'><TD align=left valign=top>43.<a href='joblist.cfm?JobID=94 6735&Keyword='>Word Processor<BR>(N-1286)</a></TD><TD align=left valign=top>Lega lstaff.com</TD><TD align=left valign=top>CA - Statewide</TD></TR>",
        "group1": " BGCOLOR='#DBE9E9'",
        "group2": " align=left valign=top",
        "group3": "43.",
        "group4": "<a href='joblist.cfm?JobID=94 6735&Keyword='>Word Processor<BR>(N-1286)",
        "group5": "",
        "group6": "",
        "group8": " align=left valign=top",
        "group9": "Lega lstaff.com",
        "group10": " align=left valign=top",
        "group11": "CA - Statewide"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^a]b/",
    "haystack": "acb",
    "match": [
      {
        "match": "acb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^a]b/",
    "haystack": "a\\nb",
    "match": [
      {
        "match": "a\\x0ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.b/",
    "haystack": "acb",
    "match": [
      {
        "match": "acb"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a.b/",
    "haystack": "a\\nb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^a]b/s",
    "haystack": "acb",
    "match": [
      {
        "match": "acb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^a]b/s",
    "haystack": "a\\nb",
    "match": [
      {
        "match": "a\\x0ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.b/s",
    "haystack": "acb",
    "match": [
      {
        "match": "acb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.b/s",
    "haystack": "a\\nb",
    "match": [
      {
        "match": "a\\x0ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "bac",
    "match": [
      {
        "match": "bac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "bbac",
    "match": [
      {
        "match": "bbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "bbbac",
    "match": [
      {
        "match": "bbbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "bbbbac",
    "match": [
      {
        "match": "bbbbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+?|a){1,2}?c/",
    "haystack": "bbbbbac",
    "match": [
      {
        "match": "bbbbbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}?c/",
    "haystack": "bac",
    "match": [
      {
        "match": "bac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}?c/",
    "haystack": "bbac",
    "match": [
      {
        "match": "bbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}?c/",
    "haystack": "bbbac",
    "match": [
      {
        "match": "bbbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}?c/",
    "haystack": "bbbbac",
    "match": [
      {
        "match": "bbbbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(b+|a){1,2}?c/",
    "haystack": "bbbbbac",
    "match": [
      {
        "match": "bbbbbac",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!\\A)x/m",
    "haystack": "a\\bx\\n",
    "match": [
      {
        "match": "x"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!\\A)x/m",
    "haystack": "a\\nx\\n",
    "match": [
      {
        "match": "x"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?!\\A)x/m",
    "haystack": "x\\nb\\n",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(A|B)*?CD/",
    "haystack": "CD",
    "match": [
      {
        "match": "CD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(A|B)*CD/",
    "haystack": "CD",
    "match": [
      {
        "match": "CD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(AB)*?\\1/",
    "haystack": "ABABAB",
    "match": [
      {
        "match": "ABAB",
        "group1": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(AB)*\\1/",
    "haystack": "ABABAB",
    "match": [
      {
        "match": "ABABAB",
        "group1": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!bar)foo/",
    "haystack": "foo",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!bar)foo/",
    "haystack": "catfood",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!bar)foo/",
    "haystack": "arfootle",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!bar)foo/",
    "haystack": "rfoosh",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<!bar)foo/",
    "haystack": "barfoo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!bar)foo/",
    "haystack": "towbarfoo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\w{3}(?<!bar)foo/",
    "haystack": "catfood",
    "match": [
      {
        "match": "catfoo"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\w{3}(?<!bar)foo/",
    "haystack": "foo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\w{3}(?<!bar)foo/",
    "haystack": "barfoo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\w{3}(?<!bar)foo/",
    "haystack": "towbarfoo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(foo)a)bar/",
    "haystack": "fooabar",
    "match": [
      {
        "match": "bar",
        "group1": "foo"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=(foo)a)bar/",
    "haystack": "bar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(foo)a)bar/",
    "haystack": "foobbar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Aabc\\z/m",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\Aabc\\z/m",
    "haystack": "abc\\n",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Aabc\\z/m",
    "haystack": "qqq\\nabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Aabc\\z/m",
    "haystack": "abc\\nzzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Aabc\\z/m",
    "haystack": "qqq\\nabc\\nzzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>.*\\/)foo/",
    "haystack": "/this/is/a/very/long/line/in/deed/with/very/many/slashes/in/and/foo",
    "match": [
      {
        "match": "/this/is/a/very/long/line/in/deed/with/very/many/slashes/in/and/foo"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>.*\\/)foo/",
    "haystack": "/this/is/a/very/long/line/in/deed/with/very/many/slashes/in/it/you/see/",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>(\\.\\d\\d[1-9]?))\\d+/",
    "haystack": "1.230003938",
    "match": [
      {
        "match": ".230003938",
        "group1": ".23"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>(\\.\\d\\d[1-9]?))\\d+/",
    "haystack": "1.875000282",
    "match": [
      {
        "match": ".875000282",
        "group1": ".875"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>(\\.\\d\\d[1-9]?))\\d+/",
    "haystack": "1.235",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^((?>\\w+)|(?>\\s+))*$/",
    "haystack": "now is the time for all good men to come to the aid of the party",
    "match": [
      {
        "match": "now is the time for all good men to come to the aid of the party",
        "group1": "party"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^((?>\\w+)|(?>\\s+))*$/",
    "haystack": "this is not a line with only words and spaces!",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(\\d+)(\\w)/",
    "haystack": "12345a",
    "match": [
      {
        "match": "12345a",
        "group1": "12345",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(\\d+)(\\w)/",
    "haystack": "12345+",
    "match": [
      {
        "match": "12345",
        "group1": "1234",
        "group2": "5"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>\\d+))(\\w)/",
    "haystack": "12345a",
    "match": [
      {
        "match": "12345a",
        "group1": "12345",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/((?>\\d+))(\\w)/",
    "haystack": "12345+",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a+)b/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>a+)b)/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab",
        "group1": "aaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>(a+))b/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab",
        "group1": "aaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>b)+/",
    "haystack": "aaabbbccc",
    "match": [
      {
        "match": "bbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a+|b+|c+)*c/",
    "haystack": "aaabbbbccccd",
    "match": [
      {
        "match": "aaabbbbc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>[^()]+)|\\([^()]*\\))+/",
    "haystack": "((abc(ade)ufh()()x",
    "match": [
      {
        "match": "abc(ade)ufh()()x",
        "group1": "x"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\(((?>[^()]+)|\\([^()]+\\))+\\)/",
    "haystack": "(abc)",
    "match": [
      {
        "match": "(abc)",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\(((?>[^()]+)|\\([^()]+\\))+\\)/",
    "haystack": "(abc(def)xyz)",
    "match": [
      {
        "match": "(abc(def)xyz)",
        "group1": "xyz"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\(((?>[^()]+)|\\([^()]+\\))+\\)/",
    "haystack": "((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?-i)b/i",
    "haystack": "ab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?-i)b/i",
    "haystack": "Ab",
    "match": [
      {
        "match": "Ab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a(?-i)b/i",
    "haystack": "aB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?-i)b/i",
    "haystack": "AB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a (?x)b c)d e/",
    "haystack": "a bcd e",
    "match": [
      {
        "match": "a bcd e",
        "group1": "a bc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(a (?x)b c)d e/",
    "haystack": "a b cd e",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a (?x)b c)d e/",
    "haystack": "abcd e",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a (?x)b c)d e/",
    "haystack": "a bcde",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a b(?x)c d (?-x)e f)/",
    "haystack": "a bcde f",
    "match": [
      {
        "match": "a bcde f",
        "group1": "a bcde f"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(a b(?x)c d (?-x)e f)/",
    "haystack": "abcdef",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)b)c/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)b)c/",
    "haystack": "aBc",
    "match": [
      {
        "match": "aBc",
        "group1": "aB"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(a(?i)b)c/",
    "haystack": "abC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)b)c/",
    "haystack": "aBC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)b)c/",
    "haystack": "Abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)b)c/",
    "haystack": "ABc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)b)c/",
    "haystack": "ABC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)b)c/",
    "haystack": "AbC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?i:b)c/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?i:b)c/",
    "haystack": "aBc",
    "match": [
      {
        "match": "aBc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a(?i:b)c/",
    "haystack": "ABC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?i:b)c/",
    "haystack": "abC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?i:b)c/",
    "haystack": "aBC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?i:b)*c/",
    "haystack": "aBc",
    "match": [
      {
        "match": "aBc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?i:b)*c/",
    "haystack": "aBBc",
    "match": [
      {
        "match": "aBBc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a(?i:b)*c/",
    "haystack": "aBC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?i:b)*c/",
    "haystack": "aBBC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?=b(?i)c)\\w\\wd/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?=b(?i)c)\\w\\wd/",
    "haystack": "abCd",
    "match": [
      {
        "match": "abCd"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a(?=b(?i)c)\\w\\wd/",
    "haystack": "aBCd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?=b(?i)c)\\w\\wd/",
    "haystack": "abcD",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s-i:more.*than).*million/i",
    "haystack": "more than million",
    "match": [
      {
        "match": "more than million"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s-i:more.*than).*million/i",
    "haystack": "more than MILLION",
    "match": [
      {
        "match": "more than MILLION"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s-i:more.*than).*million/i",
    "haystack": "more \\n than Million",
    "match": [
      {
        "match": "more \\x0a than Million"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?s-i:more.*than).*million/i",
    "haystack": "MORE THAN MILLION",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s-i:more.*than).*million/i",
    "haystack": "more \\n than \\n million",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?s-i)more.*than).*million/i",
    "haystack": "more than million",
    "match": [
      {
        "match": "more than million"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?s-i)more.*than).*million/i",
    "haystack": "more than MILLION",
    "match": [
      {
        "match": "more than MILLION"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?s-i)more.*than).*million/i",
    "haystack": "more \\n than Million",
    "match": [
      {
        "match": "more \\x0a than Million"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?:(?s-i)more.*than).*million/i",
    "haystack": "MORE THAN MILLION",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?s-i)more.*than).*million/i",
    "haystack": "more \\n than \\n million",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a(?i)b+)+c/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a(?i)b+)+c/",
    "haystack": "aBbc",
    "match": [
      {
        "match": "aBbc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a(?i)b+)+c/",
    "haystack": "aBBc",
    "match": [
      {
        "match": "aBBc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>a(?i)b+)+c/",
    "haystack": "Abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a(?i)b+)+c/",
    "haystack": "abAb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a(?i)b+)+c/",
    "haystack": "abbC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(?i)b)\\w\\wc/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(?i)b)\\w\\wc/",
    "haystack": "aBc",
    "match": [
      {
        "match": "aBc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=a(?i)b)\\w\\wc/",
    "haystack": "Ab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(?i)b)\\w\\wc/",
    "haystack": "abC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(?i)b)\\w\\wc/",
    "haystack": "aBC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(?i)b)(\\w\\w)c/",
    "haystack": "abxxc",
    "match": [
      {
        "match": "xxc",
        "group1": "xx"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(?i)b)(\\w\\w)c/",
    "haystack": "aBxxc",
    "match": [
      {
        "match": "xxc",
        "group1": "xx"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=a(?i)b)(\\w\\w)c/",
    "haystack": "Abxxc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(?i)b)(\\w\\w)c/",
    "haystack": "ABxxc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(?i)b)(\\w\\w)c/",
    "haystack": "abxxC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(a)|b)(?(1)A|B)/",
    "haystack": "aA",
    "match": [
      {
        "match": "aA",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(a)|b)(?(1)A|B)/",
    "haystack": "bB",
    "match": [
      {
        "match": "bB"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?:(a)|b)(?(1)A|B)/",
    "haystack": "aB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(a)|b)(?(1)A|B)/",
    "haystack": "bA",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)?(?(1)a|b)+$/",
    "haystack": "aa",
    "match": [
      {
        "match": "aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)?(?(1)a|b)+$/",
    "haystack": "b",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)?(?(1)a|b)+$/",
    "haystack": "bb",
    "match": [
      {
        "match": "bb"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a)?(?(1)a|b)+$/",
    "haystack": "ab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?=abc)\\w{3}:|\\d\\d)/",
    "haystack": "abc:",
    "match": [
      {
        "match": "abc:"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?=abc)\\w{3}:|\\d\\d)/",
    "haystack": "12",
    "match": [
      {
        "match": "12"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?=abc)\\w{3}:|\\d\\d)/",
    "haystack": "123",
    "match": [
      {
        "match": "12"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?(?=abc)\\w{3}:|\\d\\d)/",
    "haystack": "xyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?!abc)\\d\\d|\\w{3}:)$/",
    "haystack": "abc:",
    "match": [
      {
        "match": "abc:"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?!abc)\\d\\d|\\w{3}:)$/",
    "haystack": "12",
    "match": [
      {
        "match": "12"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?(?!abc)\\d\\d|\\w{3}:)$/",
    "haystack": "123",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?!abc)\\d\\d|\\w{3}:)$/",
    "haystack": "xyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?<=foo)bar|cat)/",
    "haystack": "foobar",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?<=foo)bar|cat)/",
    "haystack": "cat",
    "match": [
      {
        "match": "cat"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?<=foo)bar|cat)/",
    "haystack": "fcat",
    "match": [
      {
        "match": "cat"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?<=foo)bar|cat)/",
    "haystack": "focat",
    "match": [
      {
        "match": "cat"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?(?<=foo)bar|cat)/",
    "haystack": "foocat",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?<!foo)cat|bar)/",
    "haystack": "foobar",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?<!foo)cat|bar)/",
    "haystack": "cat",
    "match": [
      {
        "match": "cat"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?<!foo)cat|bar)/",
    "haystack": "fcat",
    "match": [
      {
        "match": "cat"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?<!foo)cat|bar)/",
    "haystack": "focat",
    "match": [
      {
        "match": "cat"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?(?<!foo)cat|bar)/",
    "haystack": "foocat",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/( \\( )? [^()]+ (?(1) \\) |) /x",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/( \\( )? [^()]+ (?(1) \\) |) /x",
    "haystack": "(abcd)",
    "match": [
      {
        "match": "(abcd)",
        "group1": "("
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/( \\( )? [^()]+ (?(1) \\) |) /x",
    "haystack": "the quick (abcd) fox",
    "match": [
      {
        "match": "the quick "
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/( \\( )? [^()]+ (?(1) \\) |) /x",
    "haystack": "(abcd",
    "match": [
      {
        "match": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/( \\( )? [^()]+ (?(1) \\) ) /x",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/( \\( )? [^()]+ (?(1) \\) ) /x",
    "haystack": "(abcd)",
    "match": [
      {
        "match": "(abcd)",
        "group1": "("
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/( \\( )? [^()]+ (?(1) \\) ) /x",
    "haystack": "the quick (abcd) fox",
    "match": [
      {
        "match": "the quick "
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/( \\( )? [^()]+ (?(1) \\) ) /x",
    "haystack": "(abcd",
    "match": [
      {
        "match": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(2)a|(1)(2))+$/",
    "haystack": "12",
    "match": [
      {
        "match": "12",
        "group1": "1",
        "group2": "2"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(2)a|(1)(2))+$/",
    "haystack": "12a",
    "match": [
      {
        "match": "12a",
        "group1": "1",
        "group2": "2"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(2)a|(1)(2))+$/",
    "haystack": "12aa",
    "match": [
      {
        "match": "12aa",
        "group1": "1",
        "group2": "2"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?(2)a|(1)(2))+$/",
    "haystack": "1234",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+\\1/",
    "haystack": "blah blah",
    "match": [
      {
        "match": "blah blah",
        "group1": "blah"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+\\1/",
    "haystack": "BLAH BLAH",
    "match": [
      {
        "match": "BLAH BLAH",
        "group1": "BLAH"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+\\1/",
    "haystack": "Blah Blah",
    "match": [
      {
        "match": "Blah Blah",
        "group1": "Blah"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+\\1/",
    "haystack": "blaH blaH",
    "match": [
      {
        "match": "blaH blaH",
        "group1": "blaH"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/((?i)blah)\\s+\\1/",
    "haystack": "blah BLAH",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+\\1/",
    "haystack": "Blah blah",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+\\1/",
    "haystack": "blaH blah",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+(?i:\\1)/",
    "haystack": "blah blah",
    "match": [
      {
        "match": "blah blah",
        "group1": "blah"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+(?i:\\1)/",
    "haystack": "BLAH BLAH",
    "match": [
      {
        "match": "BLAH BLAH",
        "group1": "BLAH"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+(?i:\\1)/",
    "haystack": "Blah Blah",
    "match": [
      {
        "match": "Blah Blah",
        "group1": "Blah"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+(?i:\\1)/",
    "haystack": "blaH blaH",
    "match": [
      {
        "match": "blaH blaH",
        "group1": "blaH"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+(?i:\\1)/",
    "haystack": "blah BLAH",
    "match": [
      {
        "match": "blah BLAH",
        "group1": "blah"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+(?i:\\1)/",
    "haystack": "Blah blah",
    "match": [
      {
        "match": "Blah blah",
        "group1": "Blah"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+(?i:\\1)/",
    "haystack": "blaH blah",
    "match": [
      {
        "match": "blaH blah",
        "group1": "blaH"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)blah)\\s+(?m)A(?i:\\1)/",
    "haystack": "blah ABLAH",
    "match": [
      {
        "match": "blah ABLAH",
        "group1": "blah"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/((?i)blah)\\s+(?m)A(?i:\\1)/",
    "haystack": "blah aBLAH",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a*)*/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a*)*/",
    "haystack": "aa",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a*)*/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc|)+/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc|)+/",
    "haystack": "abcabc",
    "match": [
      {
        "match": "abcabc",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc|)+/",
    "haystack": "abcabcabc",
    "match": [
      {
        "match": "abcabcabc",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc|)+/",
    "haystack": "xyz",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([a]*)*/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([a]*)*/",
    "haystack": "aaaaa",
    "match": [
      {
        "match": "aaaaa",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([ab]*)*/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([ab]*)*/",
    "haystack": "b",
    "match": [
      {
        "match": "b",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([ab]*)*/",
    "haystack": "ababab",
    "match": [
      {
        "match": "ababab",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([ab]*)*/",
    "haystack": "aaaabcde",
    "match": [
      {
        "match": "aaaab",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([ab]*)*/",
    "haystack": "bbbb",
    "match": [
      {
        "match": "bbbb",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^a]*)*/",
    "haystack": "b",
    "match": [
      {
        "match": "b",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^a]*)*/",
    "haystack": "bbbb",
    "match": [
      {
        "match": "bbbb",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^a]*)*/",
    "haystack": "aaa",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^ab]*)*/",
    "haystack": "cccc",
    "match": [
      {
        "match": "cccc",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^ab]*)*/",
    "haystack": "abab",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([a]*?)*/",
    "haystack": "a",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([a]*?)*/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([ab]*?)*/",
    "haystack": "a",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([ab]*?)*/",
    "haystack": "b",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([ab]*?)*/",
    "haystack": "abab",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([ab]*?)*/",
    "haystack": "baba",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^a]*?)*/",
    "haystack": "b",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^a]*?)*/",
    "haystack": "bbbb",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^a]*?)*/",
    "haystack": "aaa",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^ab]*?)*/",
    "haystack": "c",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^ab]*?)*/",
    "haystack": "cccc",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^ab]*?)*/",
    "haystack": "baba",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a*)*/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a*)*/",
    "haystack": "aaabcde",
    "match": [
      {
        "match": "aaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>a*))*/",
    "haystack": "aaaaa",
    "match": [
      {
        "match": "aaaaa",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>a*))*/",
    "haystack": "aabbaa",
    "match": [
      {
        "match": "aa",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>a*?))*/",
    "haystack": "aaaaa",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>a*?))*/",
    "haystack": "aabbaa",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=[^a-z]+[a-z])  \\d{2}-[a-z]{3}-\\d{2}  |  \\d{2}-\\d{2}-\\d{2} ) /x",
    "haystack": "12-sep-98",
    "match": [
      {
        "match": "12-sep-98"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=[^a-z]+[a-z])  \\d{2}-[a-z]{3}-\\d{2}  |  \\d{2}-\\d{2}-\\d{2} ) /x",
    "haystack": "12-09-98",
    "match": [
      {
        "match": "12-09-98"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?(?=[^a-z]+[a-z])  \\d{2}-[a-z]{3}-\\d{2}  |  \\d{2}-\\d{2}-\\d{2} ) /x",
    "haystack": "sep-12-98",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(foo))bar\\1/",
    "haystack": "foobarfoo",
    "match": [
      {
        "match": "barfoo",
        "group1": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(foo))bar\\1/",
    "haystack": "foobarfootling",
    "match": [
      {
        "match": "barfoo",
        "group1": "foo"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=(foo))bar\\1/",
    "haystack": "foobar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(foo))bar\\1/",
    "haystack": "barfoo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:saturday|sunday)/",
    "haystack": "saturday",
    "match": [
      {
        "match": "saturday"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:saturday|sunday)/",
    "haystack": "sunday",
    "match": [
      {
        "match": "sunday"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:saturday|sunday)/",
    "haystack": "Saturday",
    "match": [
      {
        "match": "Saturday"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:saturday|sunday)/",
    "haystack": "Sunday",
    "match": [
      {
        "match": "Sunday"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:saturday|sunday)/",
    "haystack": "SATURDAY",
    "match": [
      {
        "match": "SATURDAY"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:saturday|sunday)/",
    "haystack": "SUNDAY",
    "match": [
      {
        "match": "SUNDAY"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:saturday|sunday)/",
    "haystack": "SunDay",
    "match": [
      {
        "match": "SunDay"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)bc|BB)x/",
    "haystack": "abcx",
    "match": [
      {
        "match": "abcx",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)bc|BB)x/",
    "haystack": "aBCx",
    "match": [
      {
        "match": "aBCx",
        "group1": "aBC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)bc|BB)x/",
    "haystack": "bbx",
    "match": [
      {
        "match": "bbx",
        "group1": "bb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)bc|BB)x/",
    "haystack": "BBx",
    "match": [
      {
        "match": "BBx",
        "group1": "BB"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(a(?i)bc|BB)x/",
    "haystack": "abcX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)bc|BB)x/",
    "haystack": "aBCX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)bc|BB)x/",
    "haystack": "bbX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(?i)bc|BB)x/",
    "haystack": "BBX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^([ab](?i)[cd]|[ef])/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac",
        "group1": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([ab](?i)[cd]|[ef])/",
    "haystack": "aC",
    "match": [
      {
        "match": "aC",
        "group1": "aC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([ab](?i)[cd]|[ef])/",
    "haystack": "bD",
    "match": [
      {
        "match": "bD",
        "group1": "bD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([ab](?i)[cd]|[ef])/",
    "haystack": "elephant",
    "match": [
      {
        "match": "e",
        "group1": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([ab](?i)[cd]|[ef])/",
    "haystack": "Europe",
    "match": [
      {
        "match": "E",
        "group1": "E"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([ab](?i)[cd]|[ef])/",
    "haystack": "frog",
    "match": [
      {
        "match": "f",
        "group1": "f"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([ab](?i)[cd]|[ef])/",
    "haystack": "France",
    "match": [
      {
        "match": "F",
        "group1": "F"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^([ab](?i)[cd]|[ef])/",
    "haystack": "Africa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)/",
    "haystack": "aBd",
    "match": [
      {
        "match": "aBd",
        "group1": "aBd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)/",
    "haystack": "xy",
    "match": [
      {
        "match": "xy",
        "group1": "xy"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)/",
    "haystack": "xY",
    "match": [
      {
        "match": "xY",
        "group1": "xY"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)/",
    "haystack": "zebra",
    "match": [
      {
        "match": "z",
        "group1": "z"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)/",
    "haystack": "Zambesi",
    "match": [
      {
        "match": "Z",
        "group1": "Z"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)/",
    "haystack": "aCD",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)/",
    "haystack": "XY",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=foo\\n)^bar/m",
    "haystack": "foo\\nbar",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=foo\\n)^bar/m",
    "haystack": "bar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=foo\\n)^bar/m",
    "haystack": "baz\\nbar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(?<!foo)bar)baz/",
    "haystack": "barbaz",
    "match": [
      {
        "match": "baz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(?<!foo)bar)baz/",
    "haystack": "barbarbaz",
    "match": [
      {
        "match": "baz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(?<!foo)bar)baz/",
    "haystack": "koobarbaz",
    "match": [
      {
        "match": "baz"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=(?<!foo)bar)baz/",
    "haystack": "baz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(?<!foo)bar)baz/",
    "haystack": "foobarbaz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaa",
    "match": [
      {
        "match": "aaaaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaa",
    "match": [
      {
        "match": "aaaaaaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaaaa",
    "match": [
      {
        "match": "aaaaaaaaaa",
        "group1": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa",
        "group1": "a",
        "group2": "a",
        "group3": "a",
        "group4": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaa",
    "match": [
      {
        "match": "aaaaa",
        "group1": "a",
        "group2": "aa",
        "group3": "a",
        "group4": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaaa",
    "match": [
      {
        "match": "aaaaaa",
        "group1": "a",
        "group2": "aa",
        "group3": "a",
        "group4": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaaaa",
    "match": [
      {
        "match": "aaaaaaa",
        "group1": "a",
        "group2": "aa",
        "group3": "aaa",
        "group4": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaaaaaaa",
    "match": [
      {
        "match": "aaaaaaaaaa",
        "group1": "a",
        "group2": "aa",
        "group3": "aaa",
        "group4": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$/",
    "haystack": "aaaaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/abc/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc/",
    "haystack": "xabcy",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc/",
    "haystack": "ababc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/abc/",
    "haystack": "xbc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/abc/",
    "haystack": "axc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/abc/",
    "haystack": "abx",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*c/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*bc/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*bc/",
    "haystack": "abbc",
    "match": [
      {
        "match": "abbc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*bc/",
    "haystack": "abbbbc",
    "match": [
      {
        "match": "abbbbc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.{1}/",
    "haystack": "abbbbc",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.{3,4}/",
    "haystack": "abbbbc",
    "match": [
      {
        "match": "abbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{0,}bc/",
    "haystack": "abbbbc",
    "match": [
      {
        "match": "abbbbc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab+bc/",
    "haystack": "abbc",
    "match": [
      {
        "match": "abbc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/ab+bc/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab+bc/",
    "haystack": "abq",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab+bc/",
    "haystack": "abbbbc",
    "match": [
      {
        "match": "abbbbc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{1,}bc/",
    "haystack": "abbbbc",
    "match": [
      {
        "match": "abbbbc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{1,3}bc/",
    "haystack": "abbbbc",
    "match": [
      {
        "match": "abbbbc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{3,4}bc/",
    "haystack": "abbbbc",
    "match": [
      {
        "match": "abbbbc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/ab{4,5}bc/",
    "haystack": "abq",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{4,5}bc/",
    "haystack": "abbbbc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab?bc/",
    "haystack": "abbc",
    "match": [
      {
        "match": "abbc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab?bc/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{0,1}bc/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab?c/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{0,1}c/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc$/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^abc$/",
    "haystack": "abbbbc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc$/",
    "haystack": "abcc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc/",
    "haystack": "abcc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc$/",
    "haystack": "aabc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/abc$/",
    "haystack": "aabcd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^/",
    "haystack": "abc",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/$/",
    "haystack": "abc",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.c/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.c/",
    "haystack": "axc",
    "match": [
      {
        "match": "axc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.*c/",
    "haystack": "axyzc",
    "match": [
      {
        "match": "axyzc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[bc]d/",
    "haystack": "abd",
    "match": [
      {
        "match": "abd"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a[bc]d/",
    "haystack": "axyzd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[bc]d/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[b-d]e/",
    "haystack": "ace",
    "match": [
      {
        "match": "ace"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[b-d]/",
    "haystack": "aac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[-b]/",
    "haystack": "a-",
    "match": [
      {
        "match": "a-"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[b-]/",
    "haystack": "a-",
    "match": [
      {
        "match": "a-"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a]/",
    "haystack": "a]",
    "match": [
      {
        "match": "a]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[]]b/",
    "haystack": "a]b",
    "match": [
      {
        "match": "a]b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^bc]d/",
    "haystack": "aed",
    "match": [
      {
        "match": "aed"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a[^bc]d/",
    "haystack": "abd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^bc]d/",
    "haystack": "abd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^-b]c/",
    "haystack": "adc",
    "match": [
      {
        "match": "adc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^]b]c/",
    "haystack": "adc",
    "match": [
      {
        "match": "adc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^]b]c/",
    "haystack": "a-c",
    "match": [
      {
        "match": "a-c"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a[^]b]c/",
    "haystack": "a]c",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\ba\\b/",
    "haystack": "a-",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\ba\\b/",
    "haystack": "-a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\ba\\b/",
    "haystack": "-a-",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\by\\b/",
    "haystack": "xy",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\by\\b/",
    "haystack": "yz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\by\\b/",
    "haystack": "xyz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/\\Ba\\B/",
    "haystack": "a-",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Ba\\B/",
    "haystack": "-a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Ba\\B/",
    "haystack": "-a-",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\By\\b/",
    "haystack": "xy",
    "match": [
      {
        "match": "y"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\by\\B/",
    "haystack": "yz",
    "match": [
      {
        "match": "y"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\By\\B/",
    "haystack": "xyz",
    "match": [
      {
        "match": "y"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\w/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\W/",
    "haystack": "-",
    "match": [
      {
        "match": "-"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\W/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\sb/",
    "haystack": "a b",
    "match": [
      {
        "match": "a b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\Sb/",
    "haystack": "a-b",
    "match": [
      {
        "match": "a-b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a\\Sb/",
    "haystack": "a b",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\d/",
    "haystack": "1",
    "match": [
      {
        "match": "1"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\D/",
    "haystack": "-",
    "match": [
      {
        "match": "-"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\D/",
    "haystack": "1",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\w]/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\W]/",
    "haystack": "-",
    "match": [
      {
        "match": "-"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/[\\W]/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[\\s]b/",
    "haystack": "a b",
    "match": [
      {
        "match": "a b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[\\S]b/",
    "haystack": "a-b",
    "match": [
      {
        "match": "a-b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a[\\S]b/",
    "haystack": "a b",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\d]/",
    "haystack": "1",
    "match": [
      {
        "match": "1"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\D]/",
    "haystack": "-",
    "match": [
      {
        "match": "-"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/[\\D]/",
    "haystack": "1",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab|cd/",
    "haystack": "abc",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab|cd/",
    "haystack": "abcd",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/()ef/",
    "haystack": "def",
    "match": [
      {
        "match": "ef",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\(b/",
    "haystack": "a(b",
    "match": [
      {
        "match": "a(b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\(*b/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\(*b/",
    "haystack": "a((b",
    "match": [
      {
        "match": "a((b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\\\b/",
    "haystack": "a\\\\b",
    "match": [
      {
        "match": "a\\b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((a))/",
    "haystack": "abc",
    "match": [
      {
        "match": "a",
        "group1": "a",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)b(c)/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "a",
        "group2": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a+b+c/",
    "haystack": "aabbabc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{1,}b{1,}c/",
    "haystack": "aabbabc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.+?c/",
    "haystack": "abcabc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b)*/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b){0,}/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b)+/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b){1,}/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b)?/",
    "haystack": "ab",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b){0,1}/",
    "haystack": "ab",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^ab]*/",
    "haystack": "cde",
    "match": [
      {
        "match": "cde"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/abc/",
    "haystack": "b",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a*/",
    "haystack": "\\",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([abc])*d/",
    "haystack": "abbbcd",
    "match": [
      {
        "match": "abbbcd",
        "group1": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([abc])*bcd/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a|b|c|d|e/",
    "haystack": "e",
    "match": [
      {
        "match": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a|b|c|d|e)f/",
    "haystack": "ef",
    "match": [
      {
        "match": "ef",
        "group1": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abcd*efg/",
    "haystack": "abcdefg",
    "match": [
      {
        "match": "abcdefg"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*/",
    "haystack": "xabyabbbz",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*/",
    "haystack": "xayabbbz",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(ab|cd)e/",
    "haystack": "abcde",
    "match": [
      {
        "match": "cde",
        "group1": "cd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[abhgefdc]ij/",
    "haystack": "hij",
    "match": [
      {
        "match": "hij"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc|)ef/",
    "haystack": "abcdef",
    "match": [
      {
        "match": "ef",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a|b)c*d/",
    "haystack": "abcd",
    "match": [
      {
        "match": "bcd",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(ab|ab*)bc/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a([bc]*)c*/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "bc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a([bc]*)(c*d)/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd",
        "group1": "bc",
        "group2": "d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a([bc]+)(c*d)/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd",
        "group1": "bc",
        "group2": "d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a([bc]*)(c+d)/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd",
        "group1": "b",
        "group2": "cd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[bcd]*dcdcde/",
    "haystack": "adcdcde",
    "match": [
      {
        "match": "adcdcde"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a[bcd]+dcdcde/",
    "haystack": "abcde",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[bcd]+dcdcde/",
    "haystack": "adcdcde",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(ab|a)b*c/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((a)(b)c)(d)/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd",
        "group1": "abc",
        "group2": "a",
        "group3": "b",
        "group4": "d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[a-zA-Z_][a-zA-Z0-9_]*/",
    "haystack": "alpha",
    "match": [
      {
        "match": "alpha"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a(bc+|b[eh])g|.h$/",
    "haystack": "abh",
    "match": [
      {
        "match": "bh"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(bc+d$|ef*g.|h?i(j|k))/",
    "haystack": "effgz",
    "match": [
      {
        "match": "effgz",
        "group1": "effgz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(bc+d$|ef*g.|h?i(j|k))/",
    "haystack": "ij",
    "match": [
      {
        "match": "ij",
        "group1": "ij",
        "group2": "j"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(bc+d$|ef*g.|h?i(j|k))/",
    "haystack": "reffgz",
    "match": [
      {
        "match": "effgz",
        "group1": "effgz"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(bc+d$|ef*g.|h?i(j|k))/",
    "haystack": "effg",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(bc+d$|ef*g.|h?i(j|k))/",
    "haystack": "bcdd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((((((((((a))))))))))/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": "a",
        "group2": "a",
        "group3": "a",
        "group4": "a",
        "group5": "a",
        "group6": "a",
        "group7": "a",
        "group8": "a",
        "group9": "a",
        "group10": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((((((((((a))))))))))\\10/",
    "haystack": "aa",
    "match": [
      {
        "match": "aa",
        "group1": "a",
        "group2": "a",
        "group3": "a",
        "group4": "a",
        "group5": "a",
        "group6": "a",
        "group7": "a",
        "group8": "a",
        "group9": "a",
        "group10": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(((((((((a)))))))))/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": "a",
        "group2": "a",
        "group3": "a",
        "group4": "a",
        "group5": "a",
        "group6": "a",
        "group7": "a",
        "group8": "a",
        "group9": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/multiple words of text/",
    "haystack": "aa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/multiple words of text/",
    "haystack": "uh-uh",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/multiple words/",
    "haystack": "multiple words, yeah",
    "match": [
      {
        "match": "multiple words"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*)c(.*)/",
    "haystack": "abcde",
    "match": [
      {
        "match": "abcde",
        "group1": "ab",
        "group2": "de"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\((.*), (.*)\\)/",
    "haystack": "(a, b)",
    "match": [
      {
        "match": "(a, b)",
        "group1": "a",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abcd/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(bc)d/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd",
        "group1": "bc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[-]?c/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\1/",
    "haystack": "abcabc",
    "match": [
      {
        "match": "abcabc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([a-c]*)\\1/",
    "haystack": "abcabc",
    "match": [
      {
        "match": "abcabc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)|\\1/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)|\\1/",
    "haystack": "ab",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(a)|\\1/",
    "haystack": "x",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(([a-c])b*?\\2)*/",
    "haystack": "ababbbcbc",
    "match": [
      {
        "match": "ababb",
        "group1": "bb",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(([a-c])b*?\\2){3}/",
    "haystack": "ababbbcbc",
    "match": [
      {
        "match": "ababbbcbc",
        "group1": "cbc",
        "group2": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((\\3|b)\\2(a)x)+/",
    "haystack": "aaaxabaxbaaxbbax",
    "match": [
      {
        "match": "bbax",
        "group1": "bbax",
        "group2": "b",
        "group3": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((\\3|b)\\2(a)){2,}/",
    "haystack": "bbaababbabaaaaabbaaaabba",
    "match": [
      {
        "match": "bbaaaabba",
        "group1": "bba",
        "group2": "b",
        "group3": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc/i",
    "haystack": "XABCY",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc/i",
    "haystack": "ABABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/abc/i",
    "haystack": "aaxabxbaxbbx",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/abc/i",
    "haystack": "XBC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/abc/i",
    "haystack": "AXC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/abc/i",
    "haystack": "ABX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*c/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*bc/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*bc/i",
    "haystack": "ABBC",
    "match": [
      {
        "match": "ABBC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*?bc/i",
    "haystack": "ABBBBC",
    "match": [
      {
        "match": "ABBBBC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{0,}?bc/i",
    "haystack": "ABBBBC",
    "match": [
      {
        "match": "ABBBBC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab+?bc/i",
    "haystack": "ABBC",
    "match": [
      {
        "match": "ABBC"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/ab+bc/i",
    "haystack": "ABC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab+bc/i",
    "haystack": "ABQ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab+bc/i",
    "haystack": "ABBBBC",
    "match": [
      {
        "match": "ABBBBC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{1,}?bc/i",
    "haystack": "ABBBBC",
    "match": [
      {
        "match": "ABBBBC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{1,3}?bc/i",
    "haystack": "ABBBBC",
    "match": [
      {
        "match": "ABBBBC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{3,4}?bc/i",
    "haystack": "ABBBBC",
    "match": [
      {
        "match": "ABBBBC"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/ab{4,5}?bc/i",
    "haystack": "ABQ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{4,5}?bc/i",
    "haystack": "ABBBBC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/ab??bc/i",
    "haystack": "ABBC",
    "match": [
      {
        "match": "ABBC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab??bc/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{0,1}?bc/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab??c/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab{0,1}?c/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc$/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^abc$/i",
    "haystack": "ABBBBC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc$/i",
    "haystack": "ABCC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc/i",
    "haystack": "ABCC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc$/i",
    "haystack": "AABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^/i",
    "haystack": "ABC",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/$/i",
    "haystack": "ABC",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.c/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.c/i",
    "haystack": "AXC",
    "match": [
      {
        "match": "AXC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.*?c/i",
    "haystack": "AXYZC",
    "match": [
      {
        "match": "AXYZC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.*c/i",
    "haystack": "AABC",
    "match": [
      {
        "match": "AABC"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a.*c/i",
    "haystack": "AXYZD",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[bc]d/i",
    "haystack": "ABD",
    "match": [
      {
        "match": "ABD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[b-d]e/i",
    "haystack": "ACE",
    "match": [
      {
        "match": "ACE"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a[b-d]e/i",
    "haystack": "ABC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[b-d]e/i",
    "haystack": "ABD",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[b-d]/i",
    "haystack": "AAC",
    "match": [
      {
        "match": "AC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[-b]/i",
    "haystack": "A-",
    "match": [
      {
        "match": "A-"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[b-]/i",
    "haystack": "A-",
    "match": [
      {
        "match": "A-"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a]/i",
    "haystack": "A]",
    "match": [
      {
        "match": "A]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[]]b/i",
    "haystack": "A]B",
    "match": [
      {
        "match": "A]B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^bc]d/i",
    "haystack": "AED",
    "match": [
      {
        "match": "AED"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^-b]c/i",
    "haystack": "ADC",
    "match": [
      {
        "match": "ADC"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a[^-b]c/i",
    "haystack": "ABD",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^-b]c/i",
    "haystack": "A-C",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a[^]b]c/i",
    "haystack": "ADC",
    "match": [
      {
        "match": "ADC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab|cd/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab|cd/i",
    "haystack": "ABCD",
    "match": [
      {
        "match": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/()ef/i",
    "haystack": "DEF",
    "match": [
      {
        "match": "EF",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/$b/i",
    "haystack": "A]C",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/$b/i",
    "haystack": "B",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\(b/i",
    "haystack": "A(B",
    "match": [
      {
        "match": "A(B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\(*b/i",
    "haystack": "AB",
    "match": [
      {
        "match": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\(*b/i",
    "haystack": "A((B",
    "match": [
      {
        "match": "A((B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\\\b/i",
    "haystack": "A\\\\b",
    "match": [
      {
        "match": "A\\b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\\\b/i",
    "haystack": "a\\\\B",
    "match": [
      {
        "match": "a\\B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((a))/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "A",
        "group1": "A",
        "group2": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)b(c)/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC",
        "group1": "A",
        "group2": "C"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a+b+c/i",
    "haystack": "AABBABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{1,}b{1,}c/i",
    "haystack": "AABBABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.+?c/i",
    "haystack": "ABCABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.*?c/i",
    "haystack": "ABCABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a.{0,5}?c/i",
    "haystack": "ABCABC",
    "match": [
      {
        "match": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b)*/i",
    "haystack": "AB",
    "match": [
      {
        "match": "AB",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b){0,}/i",
    "haystack": "AB",
    "match": [
      {
        "match": "AB",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b)+/i",
    "haystack": "AB",
    "match": [
      {
        "match": "AB",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b){1,}/i",
    "haystack": "AB",
    "match": [
      {
        "match": "AB",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b)?/i",
    "haystack": "AB",
    "match": [
      {
        "match": "A",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b){0,1}/i",
    "haystack": "AB",
    "match": [
      {
        "match": "A",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a+|b){0,1}?/i",
    "haystack": "AB",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^ab]*/i",
    "haystack": "CDE",
    "match": [
      {
        "match": "CDE"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([abc])*d/i",
    "haystack": "ABBBCD",
    "match": [
      {
        "match": "ABBBCD",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([abc])*bcd/i",
    "haystack": "ABCD",
    "match": [
      {
        "match": "ABCD",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a|b|c|d|e/i",
    "haystack": "E",
    "match": [
      {
        "match": "E"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a|b|c|d|e)f/i",
    "haystack": "EF",
    "match": [
      {
        "match": "EF",
        "group1": "E"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abcd*efg/i",
    "haystack": "ABCDEFG",
    "match": [
      {
        "match": "ABCDEFG"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*/i",
    "haystack": "XABYABBBZ",
    "match": [
      {
        "match": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab*/i",
    "haystack": "XAYABBBZ",
    "match": [
      {
        "match": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(ab|cd)e/i",
    "haystack": "ABCDE",
    "match": [
      {
        "match": "CDE",
        "group1": "CD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[abhgefdc]ij/i",
    "haystack": "HIJ",
    "match": [
      {
        "match": "HIJ"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(ab|cd)e/i",
    "haystack": "ABCDE",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc|)ef/i",
    "haystack": "ABCDEF",
    "match": [
      {
        "match": "EF",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a|b)c*d/i",
    "haystack": "ABCD",
    "match": [
      {
        "match": "BCD",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(ab|ab*)bc/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a([bc]*)c*/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC",
        "group1": "BC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a([bc]*)(c*d)/i",
    "haystack": "ABCD",
    "match": [
      {
        "match": "ABCD",
        "group1": "BC",
        "group2": "D"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a([bc]+)(c*d)/i",
    "haystack": "ABCD",
    "match": [
      {
        "match": "ABCD",
        "group1": "BC",
        "group2": "D"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a([bc]*)(c+d)/i",
    "haystack": "ABCD",
    "match": [
      {
        "match": "ABCD",
        "group1": "B",
        "group2": "CD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[bcd]*dcdcde/i",
    "haystack": "ADCDCDE",
    "match": [
      {
        "match": "ADCDCDE"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(ab|a)b*c/i",
    "haystack": "ABC",
    "match": [
      {
        "match": "ABC",
        "group1": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((a)(b)c)(d)/i",
    "haystack": "ABCD",
    "match": [
      {
        "match": "ABCD",
        "group1": "ABC",
        "group2": "A",
        "group3": "B",
        "group4": "D"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[a-zA-Z_][a-zA-Z0-9_]*/i",
    "haystack": "ALPHA",
    "match": [
      {
        "match": "ALPHA"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a(bc+|b[eh])g|.h$/i",
    "haystack": "ABH",
    "match": [
      {
        "match": "BH"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(bc+d$|ef*g.|h?i(j|k))/i",
    "haystack": "EFFGZ",
    "match": [
      {
        "match": "EFFGZ",
        "group1": "EFFGZ"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(bc+d$|ef*g.|h?i(j|k))/i",
    "haystack": "IJ",
    "match": [
      {
        "match": "IJ",
        "group1": "IJ",
        "group2": "J"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(bc+d$|ef*g.|h?i(j|k))/i",
    "haystack": "REFFGZ",
    "match": [
      {
        "match": "EFFGZ",
        "group1": "EFFGZ"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(bc+d$|ef*g.|h?i(j|k))/i",
    "haystack": "ADCDCDE",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(bc+d$|ef*g.|h?i(j|k))/i",
    "haystack": "EFFG",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(bc+d$|ef*g.|h?i(j|k))/i",
    "haystack": "BCDD",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((((((((((a))))))))))/i",
    "haystack": "A",
    "match": [
      {
        "match": "A",
        "group1": "A",
        "group2": "A",
        "group3": "A",
        "group4": "A",
        "group5": "A",
        "group6": "A",
        "group7": "A",
        "group8": "A",
        "group9": "A",
        "group10": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((((((((((a))))))))))\\10/i",
    "haystack": "AA",
    "match": [
      {
        "match": "AA",
        "group1": "A",
        "group2": "A",
        "group3": "A",
        "group4": "A",
        "group5": "A",
        "group6": "A",
        "group7": "A",
        "group8": "A",
        "group9": "A",
        "group10": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(((((((((a)))))))))/i",
    "haystack": "A",
    "match": [
      {
        "match": "A",
        "group1": "A",
        "group2": "A",
        "group3": "A",
        "group4": "A",
        "group5": "A",
        "group6": "A",
        "group7": "A",
        "group8": "A",
        "group9": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?:(?:(?:(?:(?:(?:(?:(?:(a))))))))))/i",
    "haystack": "A",
    "match": [
      {
        "match": "A",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?:(?:(?:(?:(?:(?:(?:(?:(a|b|c))))))))))/i",
    "haystack": "C",
    "match": [
      {
        "match": "C",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/multiple words of text/i",
    "haystack": "AA",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/multiple words of text/i",
    "haystack": "UH-UH",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/multiple words/i",
    "haystack": "MULTIPLE WORDS, YEAH",
    "match": [
      {
        "match": "MULTIPLE WORDS"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*)c(.*)/i",
    "haystack": "ABCDE",
    "match": [
      {
        "match": "ABCDE",
        "group1": "AB",
        "group2": "DE"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\((.*), (.*)\\)/i",
    "haystack": "(A, B)",
    "match": [
      {
        "match": "(A, B)",
        "group1": "A",
        "group2": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abcd/i",
    "haystack": "ABCD",
    "match": [
      {
        "match": "ABCD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(bc)d/i",
    "haystack": "ABCD",
    "match": [
      {
        "match": "ABCD",
        "group1": "BC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a[-]?c/i",
    "haystack": "AC",
    "match": [
      {
        "match": "AC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(abc)\\1/i",
    "haystack": "ABCABC",
    "match": [
      {
        "match": "ABCABC",
        "group1": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([a-c]*)\\1/i",
    "haystack": "ABCABC",
    "match": [
      {
        "match": "ABCABC",
        "group1": "ABC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?!b)./",
    "haystack": "abad",
    "match": [
      {
        "match": "ad"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?=d)./",
    "haystack": "abad",
    "match": [
      {
        "match": "ad"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?=c|d)./",
    "haystack": "abad",
    "match": [
      {
        "match": "ad"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d)(.)/",
    "haystack": "ace",
    "match": [
      {
        "match": "ace",
        "group1": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d)*(.)/",
    "haystack": "ace",
    "match": [
      {
        "match": "ace",
        "group1": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d)+?(.)/",
    "haystack": "ace",
    "match": [
      {
        "match": "ace",
        "group1": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d)+?(.)/",
    "haystack": "acdbcdbe",
    "match": [
      {
        "match": "acd",
        "group1": "d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d)+(.)/",
    "haystack": "acdbcdbe",
    "match": [
      {
        "match": "acdbcdbe",
        "group1": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d){2}(.)/",
    "haystack": "acdbcdbe",
    "match": [
      {
        "match": "acdb",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d){4,5}(.)/",
    "haystack": "acdbcdbe",
    "match": [
      {
        "match": "acdbcdb",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d){4,5}?(.)/",
    "haystack": "acdbcdbe",
    "match": [
      {
        "match": "acdbcd",
        "group1": "d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d){6,7}(.)/",
    "haystack": "acdbcdbe",
    "match": [
      {
        "match": "acdbcdbe",
        "group1": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d){6,7}?(.)/",
    "haystack": "acdbcdbe",
    "match": [
      {
        "match": "acdbcdbe",
        "group1": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d){5,6}(.)/",
    "haystack": "acdbcdbe",
    "match": [
      {
        "match": "acdbcdbe",
        "group1": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d){5,6}?(.)/",
    "haystack": "acdbcdbe",
    "match": [
      {
        "match": "acdbcdb",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d){5,7}(.)/",
    "haystack": "acdbcdbe",
    "match": [
      {
        "match": "acdbcdbe",
        "group1": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|c|d){5,7}?(.)/",
    "haystack": "acdbcdbe",
    "match": [
      {
        "match": "acdbcdb",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:b|(c|e){1,2}?|d)+?(.)/",
    "haystack": "ace",
    "match": [
      {
        "match": "ace",
        "group1": "c",
        "group2": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(.+)?B/",
    "haystack": "AB",
    "match": [
      {
        "match": "AB",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^a-z])|(\\^)$/",
    "haystack": ".",
    "match": [
      {
        "match": ".",
        "group1": "."
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[<>]&/",
    "haystack": "<&OUT",
    "match": [
      {
        "match": "<&"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaaaa",
    "match": [
      {
        "match": "aaaaaaaaaa",
        "group1": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "AB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a(?(1)\\1)){4}$/",
    "haystack": "aaaaaaaaaa",
    "match": [
      {
        "match": "aaaaaaaaaa",
        "group1": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a(?(1)\\1)){4}$/",
    "haystack": "aaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a(?(1)\\1)){4}$/",
    "haystack": "aaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a)b/",
    "haystack": "ab",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=a)b/",
    "haystack": "cb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a)b/",
    "haystack": "b",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!c)b/",
    "haystack": "ab",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!c)b/",
    "haystack": "b",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!c)b/",
    "haystack": "b",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:..)*a/",
    "haystack": "aba",
    "match": [
      {
        "match": "aba"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:..)*?a/",
    "haystack": "aba",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:b|a(?=(.)))*\\1/",
    "haystack": "abc",
    "match": [
      {
        "match": "ab",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(){3,5}/",
    "haystack": "abc",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a+)*ax/",
    "haystack": "aax",
    "match": [
      {
        "match": "aax",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((a|b)+)*ax/",
    "haystack": "aax",
    "match": [
      {
        "match": "aax",
        "group1": "a",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((a|bc)+)*ax/",
    "haystack": "aax",
    "match": [
      {
        "match": "aax",
        "group1": "a",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a|x)*ab/",
    "haystack": "cab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)*ab/",
    "haystack": "cab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?i)a)b/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)a)b/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?i)a)b/",
    "haystack": "Ab",
    "match": [
      {
        "match": "Ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)a)b/",
    "haystack": "Ab",
    "match": [
      {
        "match": "Ab",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?:(?i)a)b/",
    "haystack": "cb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?i)a)b/",
    "haystack": "aB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:a)b/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i:a))b/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:a)b/",
    "haystack": "Ab",
    "match": [
      {
        "match": "Ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i:a))b/",
    "haystack": "Ab",
    "match": [
      {
        "match": "Ab",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?i:a)b/",
    "haystack": "aB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:a)b/",
    "haystack": "aB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?-i)a)b/i",
    "haystack": "ab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?-i)a)b/i",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?-i)a)b/i",
    "haystack": "aB",
    "match": [
      {
        "match": "aB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?-i)a)b/i",
    "haystack": "aB",
    "match": [
      {
        "match": "aB",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?-i)a)b/i",
    "haystack": "aB",
    "match": [
      {
        "match": "aB"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?:(?-i)a)b/i",
    "haystack": "Ab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?-i)a)b/i",
    "haystack": "AB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?-i:a)b/i",
    "haystack": "ab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?-i:a))b/i",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?-i:a)b/i",
    "haystack": "aB",
    "match": [
      {
        "match": "aB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?-i:a))b/i",
    "haystack": "aB",
    "match": [
      {
        "match": "aB",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?-i:a)b/i",
    "haystack": "AB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?-i:a)b/i",
    "haystack": "Ab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?-i:a)b/i",
    "haystack": "aB",
    "match": [
      {
        "match": "aB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?-i:a))b/i",
    "haystack": "aB",
    "match": [
      {
        "match": "aB",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?-i:a)b/i",
    "haystack": "Ab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?-i:a)b/i",
    "haystack": "AB",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/((?-i:a.))b/i",
    "haystack": "AB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?-i:a.))b/i",
    "haystack": "a\\nB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?s-i:a.))b/i",
    "haystack": "a\\nB",
    "match": [
      {
        "match": "a\\x0aB",
        "group1": "a\\x0a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:c|d)(?:)(?:a(?:)(?:b)(?:b(?:))(?:b(?:)(?:b)))/",
    "haystack": "cabbbb",
    "match": [
      {
        "match": "cabbbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:c|d)(?:)(?:aaaaaaaa(?:)(?:bbbbbbbb)(?:bbbbbbbb(?:))(?:bbbbbbbb(?:)(?:bbbbbbbb)))/",
    "haystack": "caaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
    "match": [
      {
        "match": "caaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(ab)\\d\\1/i",
    "haystack": "Ab4ab",
    "match": [
      {
        "match": "Ab4ab",
        "group1": "Ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(ab)\\d\\1/i",
    "haystack": "ab4Ab",
    "match": [
      {
        "match": "ab4Ab",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/foo\\w*\\d{4}baz/",
    "haystack": "foobar1234baz",
    "match": [
      {
        "match": "foobar1234baz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/x(~~)*(?:(?:F)?)?/",
    "haystack": "x~~",
    "match": [
      {
        "match": "x~~",
        "group1": "~~"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a(?#xxx){3}c/",
    "haystack": "aaac",
    "match": [
      {
        "match": "aaac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a (?#xxx) (?#yyy) {3}c/x",
    "haystack": "aaac",
    "match": [
      {
        "match": "aaac"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<![cd])b/",
    "haystack": "B\\nB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<![cd])b/",
    "haystack": "dbcb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<![cd])[ab]/",
    "haystack": "dbaacb",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!(c|d))[ab]/",
    "haystack": "dbaacb",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!cd)[ab]/",
    "haystack": "cdaccb",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a?b?)*$/",
    "haystack": "\\",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a?b?)*$/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a?b?)*$/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a?b?)*$/",
    "haystack": "aaa",
    "match": [
      {
        "match": "aaa"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?:a?b?)*$/",
    "haystack": "dbcb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a?b?)*$/",
    "haystack": "a--",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a?b?)*$/",
    "haystack": "aa--",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?s)^a(.))((?m)^b$)/",
    "haystack": "a\\nb\\nc\\n",
    "match": [
      {
        "match": "a\\x0ab",
        "group1": "a\\x0a",
        "group2": "\\x0a",
        "group3": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?m)^b$)/",
    "haystack": "a\\nb\\nc\\n",
    "match": [
      {
        "match": "b",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?m)^b/",
    "haystack": "a\\nb\\n",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?m)^(b)/",
    "haystack": "a\\nb\\n",
    "match": [
      {
        "match": "b",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?m)^b)/",
    "haystack": "a\\nb\\n",
    "match": [
      {
        "match": "b",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\n((?m)^b)/",
    "haystack": "a\\nb\\n",
    "match": [
      {
        "match": "\\x0ab",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?s).)c(?!.)/",
    "haystack": "a\\nb\\nc\\n",
    "match": [
      {
        "match": "\\x0ac",
        "group1": "\\x0a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?s).)c(?!.)/",
    "haystack": "a\\nb\\nc\\n",
    "match": [
      {
        "match": "\\x0ac",
        "group1": "\\x0a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?s)b.)c(?!.)/",
    "haystack": "a\\nb\\nc\\n",
    "match": [
      {
        "match": "b\\x0ac",
        "group1": "b\\x0a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?s)b.)c(?!.)/",
    "haystack": "a\\nb\\nc\\n",
    "match": [
      {
        "match": "b\\x0ac",
        "group1": "b\\x0a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/()^b/",
    "haystack": "a\\nb\\nc\\n",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/()^b/",
    "haystack": "a\\nb\\nc\\n",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?m)^b)/",
    "haystack": "a\\nb\\nc\\n",
    "match": [
      {
        "match": "b",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(x)?(?(1)a|b)/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(x)?(?(1)a|b)/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(x)?(?(1)b|a)/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/()?(?(1)b|a)/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/()?(?(1)a|b)/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\()?blah(?(1)(\\)))$/",
    "haystack": "(blah)",
    "match": [
      {
        "match": "(blah)",
        "group1": "(",
        "group2": ")"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\()?blah(?(1)(\\)))$/",
    "haystack": "blah",
    "match": [
      {
        "match": "blah"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(\\()?blah(?(1)(\\)))$/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\()?blah(?(1)(\\)))$/",
    "haystack": "blah)",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\()?blah(?(1)(\\)))$/",
    "haystack": "(blah",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\(+)?blah(?(1)(\\)))$/",
    "haystack": "(blah)",
    "match": [
      {
        "match": "(blah)",
        "group1": "(",
        "group2": ")"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\(+)?blah(?(1)(\\)))$/",
    "haystack": "blah",
    "match": [
      {
        "match": "blah"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(\\(+)?blah(?(1)(\\)))$/",
    "haystack": "blah)",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\(+)?blah(?(1)(\\)))$/",
    "haystack": "(blah",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?!a)b|a)/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?(?=a)b|a)/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=a)b|a)/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=a)a|b)/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=(a+?))(\\1ab)/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aab",
        "group1": "a",
        "group2": "aab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(\\w+:)+/",
    "haystack": "one:",
    "match": [
      {
        "match": "one:",
        "group1": "one:"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/$(?<=^(a))/",
    "haystack": "a",
    "match": [
      {
        "match": "",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=(a+?))(\\1ab)/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aab",
        "group1": "a",
        "group2": "aab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?=(a+?))\\1ab/",
    "haystack": "aaab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?=(a+?))\\1ab/",
    "haystack": "aaab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\w:]+::)?(\\w+)$/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd",
        "group2": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\w:]+::)?(\\w+)$/",
    "haystack": "xy:z:::abcd",
    "match": [
      {
        "match": "xy:z:::abcd",
        "group1": "xy:z:::",
        "group2": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^bcd]*(c+)/",
    "haystack": "aexycd",
    "match": [
      {
        "match": "aexyc",
        "group1": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a*)b+/",
    "haystack": "caab",
    "match": [
      {
        "match": "aab",
        "group1": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\w:]+::)?(\\w+)$/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd",
        "group2": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\w:]+::)?(\\w+)$/",
    "haystack": "xy:z:::abcd",
    "match": [
      {
        "match": "xy:z:::abcd",
        "group1": "xy:z:::",
        "group2": "abcd"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/([\\w:]+::)?(\\w+)$/",
    "haystack": "abcd:",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/([\\w:]+::)?(\\w+)$/",
    "haystack": "abcd:",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^bcd]*(c+)/",
    "haystack": "aexycd",
    "match": [
      {
        "match": "aexyc",
        "group1": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a+)b/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([[:]+)/",
    "haystack": "a:[b]:",
    "match": [
      {
        "match": ":[",
        "group1": ":["
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([[=]+)/",
    "haystack": "a=[b]=",
    "match": [
      {
        "match": "=[",
        "group1": "=["
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([[.]+)/",
    "haystack": "a.[b].",
    "match": [
      {
        "match": ".[",
        "group1": ".["
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>a+)b)/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab",
        "group1": "aaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>(a+))b/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab",
        "group1": "aaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>[^()]+)|\\([^()]*\\))+/",
    "haystack": "((abc(ade)ufh()()x",
    "match": [
      {
        "match": "abc(ade)ufh()()x",
        "group1": "x"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a\\Z/",
    "haystack": "aaab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\Z/",
    "haystack": "a\\nb\\n",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/b\\Z/",
    "haystack": "a\\nb\\n",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/b\\Z/",
    "haystack": "a\\nb",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/b\\z/",
    "haystack": "a\\nb",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "a-b",
    "match": [
      {
        "match": "a-b",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "0-9",
    "match": [
      {
        "match": "0-9",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "a.b",
    "match": [
      {
        "match": "a.b",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "5.6.7",
    "match": [
      {
        "match": "5.6.7",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "the.quick.brown.fox",
    "match": [
      {
        "match": "the.quick.brown.fox",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "a100.b200.300c",
    "match": [
      {
        "match": "a100.b200.300c",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "12-ab.1245",
    "match": [
      {
        "match": "12-ab.1245",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "\\",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": ".a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "-a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "a-",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "a.",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "a_b",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "a.-",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "a..",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "ab..bc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "the.quick.brown.fox-",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "the.quick.brown.fox.",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "the.quick.brown.fox_",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$/",
    "haystack": "the.quick.brown.fox+",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>.*)(?<=(abcd|wxyz))/",
    "haystack": "alphabetabcd",
    "match": [
      {
        "match": "alphabetabcd",
        "group1": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>.*)(?<=(abcd|wxyz))/",
    "haystack": "endingwxyz",
    "match": [
      {
        "match": "endingwxyz",
        "group1": "wxyz"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>.*)(?<=(abcd|wxyz))/",
    "haystack": "a rather long string that doesn't end with one of them",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/word (?>(?:(?!otherword)[a-zA-Z0-9]+ ){0,30})otherword/",
    "haystack": "word cat dog elephant mussel cow horse canary baboon snake shark otherword",
    "match": [
      {
        "match": "word cat dog elephant mussel cow horse canary baboon snake shark otherword"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/word (?>(?:(?!otherword)[a-zA-Z0-9]+ ){0,30})otherword/",
    "haystack": "word cat dog elephant mussel cow horse canary baboon snake shark",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/word (?>[a-zA-Z0-9]+ ){0,30}otherword/",
    "haystack": "word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=\\d{3}(?!999))foo/",
    "haystack": "999foo",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=\\d{3}(?!999))foo/",
    "haystack": "123999foo",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=\\d{3}(?!999))foo/",
    "haystack": "123abcfoo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(?!...999)\\d{3})foo/",
    "haystack": "999foo",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(?!...999)\\d{3})foo/",
    "haystack": "123999foo",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=(?!...999)\\d{3})foo/",
    "haystack": "123abcfoo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=\\d{3}(?!999)...)foo/",
    "haystack": "123abcfoo",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=\\d{3}(?!999)...)foo/",
    "haystack": "123456foo",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=\\d{3}(?!999)...)foo/",
    "haystack": "123999foo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=\\d{3}...)(?<!999)foo/",
    "haystack": "123abcfoo",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=\\d{3}...)(?<!999)foo/",
    "haystack": "123456foo",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=\\d{3}...)(?<!999)foo/",
    "haystack": "123999foo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/<a[\\s]+href[\\s]*=[\\s]*          # find <a href=\n ([\\\"\\'])?                       # find single or double quote\n (?(1) (.*?)\\1 | ([^\\s]+))       # if quote found, match up to next matching\n                                 # quote, otherwise match up to next space\n/isx",
    "haystack": "<a href=abcd xyz",
    "match": [
      {
        "match": "<a href=abcd",
        "group3": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/<a[\\s]+href[\\s]*=[\\s]*          # find <a href=\n ([\\\"\\'])?                       # find single or double quote\n (?(1) (.*?)\\1 | ([^\\s]+))       # if quote found, match up to next matching\n                                 # quote, otherwise match up to next space\n/isx",
    "haystack": "<a href=\\\"abcd xyz pqr\\\" cats",
    "match": [
      {
        "match": "<a href=\"abcd xyz pqr\"",
        "group1": "\"",
        "group2": "abcd xyz pqr"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/<a[\\s]+href[\\s]*=[\\s]*          # find <a href=\n ([\\\"\\'])?                       # find single or double quote\n (?(1) (.*?)\\1 | ([^\\s]+))       # if quote found, match up to next matching\n                                 # quote, otherwise match up to next space\n/isx",
    "haystack": "<a href=\\'abcd xyz pqr\\' cats",
    "match": [
      {
        "match": "<a href='abcd xyz pqr'",
        "group1": "'",
        "group2": "abcd xyz pqr"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/<a\\s+href\\s*=\\s*                # find <a href=\n ([\"'])?                         # find single or double quote\n (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching\n                                 # quote, otherwise match up to next space\n/isx",
    "haystack": "<a href=abcd xyz",
    "match": [
      {
        "match": "<a href=abcd",
        "group3": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/<a\\s+href\\s*=\\s*                # find <a href=\n ([\"'])?                         # find single or double quote\n (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching\n                                 # quote, otherwise match up to next space\n/isx",
    "haystack": "<a href=\\\"abcd xyz pqr\\\" cats",
    "match": [
      {
        "match": "<a href=\"abcd xyz pqr\"",
        "group1": "\"",
        "group2": "abcd xyz pqr"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/<a\\s+href\\s*=\\s*                # find <a href=\n ([\"'])?                         # find single or double quote\n (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching\n                                 # quote, otherwise match up to next space\n/isx",
    "haystack": "<a href       =       \\'abcd xyz pqr\\' cats",
    "match": [
      {
        "match": "<a href       =       'abcd xyz pqr'",
        "group1": "'",
        "group2": "abcd xyz pqr"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/<a\\s+href(?>\\s*)=(?>\\s*)        # find <a href=\n ([\"'])?                         # find single or double quote\n (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching\n                                 # quote, otherwise match up to next space\n/isx",
    "haystack": "<a href=abcd xyz",
    "match": [
      {
        "match": "<a href=abcd",
        "group3": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/<a\\s+href(?>\\s*)=(?>\\s*)        # find <a href=\n ([\"'])?                         # find single or double quote\n (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching\n                                 # quote, otherwise match up to next space\n/isx",
    "haystack": "<a href=\\\"abcd xyz pqr\\\" cats",
    "match": [
      {
        "match": "<a href=\"abcd xyz pqr\"",
        "group1": "\"",
        "group2": "abcd xyz pqr"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/<a\\s+href(?>\\s*)=(?>\\s*)        # find <a href=\n ([\"'])?                         # find single or double quote\n (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching\n                                 # quote, otherwise match up to next space\n/isx",
    "haystack": "<a href       =       \\'abcd xyz pqr\\' cats",
    "match": [
      {
        "match": "<a href       =       'abcd xyz pqr'",
        "group1": "'",
        "group2": "abcd xyz pqr"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(Z()|A)*/",
    "haystack": "ZABCDEFG",
    "match": [
      {
        "match": "ZA",
        "group1": "A",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(Z(())|A)*/",
    "haystack": "ZABCDEFG",
    "match": [
      {
        "match": "ZA",
        "group1": "A",
        "group2": "",
        "group3": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>Z)+|A)*/",
    "haystack": "ZABCDEFG",
    "match": [
      {
        "match": "ZA",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>)+|A)*/",
    "haystack": "ZABCDEFG",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*/g",
    "haystack": "abbab",
    "match": [
      {
        "match": "a"
      },
      {
        "match": ""
      },
      {
        "match": ""
      },
      {
        "match": "a"
      },
      {
        "match": ""
      },
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[[:space:]]+/",
    "haystack": "> \\x09\\x0a\\x0c\\x0d\\x0b<",
    "match": [
      {
        "match": " \\x09\\x0a\\x0c\\x0d\\x0b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[[:blank:]]+/",
    "haystack": "> \\x09\\x0a\\x0c\\x0d\\x0b<",
    "match": [
      {
        "match": " \\x09"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\s]+/",
    "haystack": "> \\x09\\x0a\\x0c\\x0d\\x0b<",
    "match": [
      {
        "match": " \\x09\\x0a\\x0c\\x0d\\x0b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\s+/",
    "haystack": "> \\x09\\x0a\\x0c\\x0d\\x0b<",
    "match": [
      {
        "match": " \\x09\\x0a\\x0c\\x0d\\x0b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\u000bb/x",
    "haystack": "ab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!\\A)x/m",
    "haystack": "a\\nxb\\n",
    "match": [
      {
        "match": "x"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?!^)x/m",
    "haystack": "a\\nxb\\n",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/abc\\Qabc\\Eabc/",
    "haystack": "abcabcabc",
    "match": [
      {
        "match": "abcabcabc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc\\Q(*+|\\Eabc/",
    "haystack": "abc(*+|abc",
    "match": [
      {
        "match": "abc(*+|abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/   abc\\Q abc\\Eabc/x",
    "haystack": "abc abcabc",
    "match": [
      {
        "match": "abc abcabc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/   abc\\Q abc\\Eabc/x",
    "haystack": "abcabcabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/abc#comment\n    \\Q#not comment\n    literal\\E/x",
    "haystack": "abc#not comment\\n    literal",
    "match": [
      {
        "match": "abc#not comment\\x0a    literal"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc#comment\n    \\Q#not comment\n    literal/x",
    "haystack": "abc#not comment\\n    literal",
    "match": [
      {
        "match": "abc#not comment\\x0a    literal"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc#comment\n    \\Q#not comment\n    literal\\E #more comment\n    /x",
    "haystack": "abc#not comment\\n    literal",
    "match": [
      {
        "match": "abc#not comment\\x0a    literal"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc#comment\n    \\Q#not comment\n    literal\\E #more comment/x",
    "haystack": "abc#not comment\\n    literal",
    "match": [
      {
        "match": "abc#not comment\\x0a    literal"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Qabc\\$xyz\\E/",
    "haystack": "abc\\\\\\$xyz",
    "match": [
      {
        "match": "abc\\$xyz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Qabc\\E\\$\\Qxyz\\E/",
    "haystack": "abc\\$xyz",
    "match": [
      {
        "match": "abc$xyz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Gabc/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\Gabc/",
    "haystack": "xyzabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Gabc./g",
    "haystack": "abc1abc2xyzabc3",
    "match": [
      {
        "match": "abc1"
      },
      {
        "match": "abc2"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc./g",
    "haystack": "abc1abc2xyzabc3",
    "match": [
      {
        "match": "abc1"
      },
      {
        "match": "abc2"
      },
      {
        "match": "abc3"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?x: b c )d/",
    "haystack": "XabcdY",
    "match": [
      {
        "match": "abcd"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a(?x: b c )d/",
    "haystack": "Xa b c d Y",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?x)x y z | a b c)/",
    "haystack": "XabcY",
    "match": [
      {
        "match": "abc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?x)x y z | a b c)/",
    "haystack": "AxyzB",
    "match": [
      {
        "match": "xyz",
        "group1": "xyz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i)AB(?-i)C/",
    "haystack": "XabCY",
    "match": [
      {
        "match": "abC"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?i)AB(?-i)C/",
    "haystack": "XabcY",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)AB(?-i)C|D)E/",
    "haystack": "abCE",
    "match": [
      {
        "match": "abCE",
        "group1": "abC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)AB(?-i)C|D)E/",
    "haystack": "DE",
    "match": [
      {
        "match": "DE",
        "group1": "D"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/((?i)AB(?-i)C|D)E/",
    "haystack": "abcE",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)AB(?-i)C|D)E/",
    "haystack": "abCe",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)AB(?-i)C|D)E/",
    "haystack": "dE",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?i)AB(?-i)C|D)E/",
    "haystack": "De",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*)\\d+\\1/",
    "haystack": "abc123abc",
    "match": [
      {
        "match": "abc123abc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*)\\d+\\1/",
    "haystack": "abc123bc",
    "match": [
      {
        "match": "bc123bc",
        "group1": "bc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*)\\d+\\1/s",
    "haystack": "abc123abc",
    "match": [
      {
        "match": "abc123abc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*)\\d+\\1/s",
    "haystack": "abc123bc",
    "match": [
      {
        "match": "bc123bc",
        "group1": "bc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((.*))\\d+\\1/",
    "haystack": "abc123abc",
    "match": [
      {
        "match": "abc123abc",
        "group1": "abc",
        "group2": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((.*))\\d+\\1/",
    "haystack": "abc123bc",
    "match": [
      {
        "match": "bc123bc",
        "group1": "bc",
        "group2": "bc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "a123::a123",
    "match": [
      {
        "match": "a123::a123",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "a123:b342::abcd",
    "match": [
      {
        "match": "a123:b342::abcd",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "a123:b342::324e:abcd",
    "match": [
      {
        "match": "a123:b342::324e:abcd",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "a123:ddde:b342::324e:abcd",
    "match": [
      {
        "match": "a123:ddde:b342::324e:abcd",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "a123:ddde:b342::324e:dcba:abcd",
    "match": [
      {
        "match": "a123:ddde:b342::324e:dcba:abcd",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "a123:ddde:9999:b342::324e:dcba:abcd",
    "match": [
      {
        "match": "a123:ddde:9999:b342::324e:dcba:abcd",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "1:2:3:4:5:6:7:8",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "a123:bce:ddde:9999:b342::324e:dcba:abcd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "a123::9999:b342::324e:dcba:abcd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "abcde:2:3:4:5:6:7:8",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "::1",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "abcd:fee0:123::",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": ":1",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!:)                       # colon disallowed at start\n  (?:                         # start of item\n    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or\n    (?(1)0 | () ) )           # if null previously matched, fail; else null\n    :                         # followed by colon\n  ){1,7}                      # end item; 1-7 of them required\n  [0-9a-f]{1,4} $             # final hex number at end of string\n  (?(1)|.)                    # check that there was an empty component\n  /ix",
    "haystack": "1:",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[z\\Qa-d]\\E]/",
    "haystack": "z",
    "match": [
      {
        "match": "z"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[z\\Qa-d]\\E]/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[z\\Qa-d]\\E]/",
    "haystack": "-",
    "match": [
      {
        "match": "-"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[z\\Qa-d]\\E]/",
    "haystack": "d",
    "match": [
      {
        "match": "d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[z\\Qa-d]\\E]/",
    "haystack": "]",
    "match": [
      {
        "match": "]"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/[z\\Qa-d]\\E]/",
    "haystack": "b",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(a+)*b/",
    "haystack": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i)reg(?:ul(?:[aä]|ae)r|ex)/",
    "haystack": "REGular",
    "match": [
      {
        "match": "REGular"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i)reg(?:ul(?:[aä]|ae)r|ex)/",
    "haystack": "regulaer",
    "match": [
      {
        "match": "regulaer"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i)reg(?:ul(?:[aä]|ae)r|ex)/",
    "haystack": "Regex",
    "match": [
      {
        "match": "Regex"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i)reg(?:ul(?:[aä]|ae)r|ex)/",
    "haystack": "regulär",
    "match": [
      {
        "match": "regul\\xe4r"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/Åæåä[à-ÿÀ-ß]+/",
    "haystack": "Åæåäà",
    "match": [
      {
        "match": "\\xc5\\xe6\\xe5\\xe4\\xe0"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/Åæåä[à-ÿÀ-ß]+/",
    "haystack": "Åæåäÿ",
    "match": [
      {
        "match": "\\xc5\\xe6\\xe5\\xe4\\xff"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/Åæåä[à-ÿÀ-ß]+/",
    "haystack": "ÅæåäÀ",
    "match": [
      {
        "match": "\\xc5\\xe6\\xe5\\xe4\\xc0"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/Åæåä[à-ÿÀ-ß]+/",
    "haystack": "Åæåäß",
    "match": [
      {
        "match": "\\xc5\\xe6\\xe5\\xe4\\xdf"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=Z)X./",
    "haystack": "\\x84XAZXB",
    "match": [
      {
        "match": "XB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab cd (?x) de fg/",
    "haystack": "ab cd defg",
    "match": [
      {
        "match": "ab cd defg"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab cd(?x) de fg/",
    "haystack": "ab cddefg",
    "match": [
      {
        "match": "ab cddefg"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/ab cd(?x) de fg/",
    "haystack": "abcddefg",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<![^f]oo)(bar)/",
    "haystack": "foobarX",
    "match": [
      {
        "match": "bar",
        "group1": "bar"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<![^f]oo)(bar)/",
    "haystack": "boobarX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<![^f])X/",
    "haystack": "offX",
    "match": [
      {
        "match": "X"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<![^f])X/",
    "haystack": "onyX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=[^f])X/",
    "haystack": "onyX",
    "match": [
      {
        "match": "X"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=[^f])X/",
    "haystack": "offX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^/gm",
    "haystack": "a\\nb\\nc\\n",
    "match": [
      {
        "match": ""
      },
      {
        "match": ""
      },
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^/gm",
    "haystack": "\\",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=C\\n)^/gm",
    "haystack": "A\\nC\\nC\\n",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?(1)a|b)(X))+/",
    "haystack": "bXaX",
    "match": [
      {
        "match": "bXaX",
        "group1": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?(1)\\1a|b)(X|Y))+/",
    "haystack": "bXXaYYaY",
    "match": [
      {
        "match": "bXXaYYaY",
        "group1": "Y"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?(1)\\1a|b)(X|Y))+/",
    "haystack": "bXYaXXaX",
    "match": [
      {
        "match": "bX",
        "group1": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/()()()()()()()()()(?:(?(10)\\10a|b)(X|Y))+/",
    "haystack": "bXXaYYaY",
    "match": [
      {
        "match": "bX",
        "group1": "",
        "group2": "",
        "group3": "",
        "group4": "",
        "group5": "",
        "group6": "",
        "group7": "",
        "group8": "",
        "group9": "",
        "group10": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[[,abc,]+]/",
    "haystack": "abc]",
    "match": [
      {
        "match": "abc]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[[,abc,]+]/",
    "haystack": "a,b]",
    "match": [
      {
        "match": "a,b]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[[,abc,]+]/",
    "haystack": "[a,b,c]",
    "match": [
      {
        "match": "[a,b,c]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?-x: )/x",
    "haystack": "A\\x20B",
    "match": [
      {
        "match": " "
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?x)(?-x: \\s*#\\s*)/",
    "haystack": "A # B",
    "match": [
      {
        "match": " # "
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?x)(?-x: \\s*#\\s*)/",
    "haystack": "#",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?x)(?-x: \\s*#\\s*)/",
    "haystack": "A s#s B",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?x-is)(?:(?-ixs) \\s*#\\s*) include/",
    "haystack": "A #include",
    "match": [
      {
        "match": " #include"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?x-is)(?:(?-ixs) \\s*#\\s*) include/",
    "haystack": "A#include",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?x-is)(?:(?-ixs) \\s*#\\s*) include/",
    "haystack": "A #Include",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b*\\w/",
    "haystack": "aaabbbb",
    "match": [
      {
        "match": "aaabbbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b*\\w/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b*\\w/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b?\\w/",
    "haystack": "aaabbbb",
    "match": [
      {
        "match": "aaabb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b?\\w/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b?\\w/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b{0,4}\\w/",
    "haystack": "aaabbbb",
    "match": [
      {
        "match": "aaabbbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b{0,4}\\w/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b{0,4}\\w/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b{0,}\\w/",
    "haystack": "aaabbbb",
    "match": [
      {
        "match": "aaabbbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b{0,}\\w/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b{0,}\\w/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*\\d*\\w/",
    "haystack": "0a",
    "match": [
      {
        "match": "0a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*\\d*\\w/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b *\\w/x",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a*b#comment\n  *\\w/x",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a* b *\\w/x",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\w+=.*(\\\\\\n.*)*/",
    "haystack": "abc=xyz\\\\\\npqr",
    "match": [
      {
        "match": "abc=xyz\\"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=(\\w+))\\1:/",
    "haystack": "abcd:",
    "match": [
      {
        "match": "abcd:",
        "group1": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?=(\\w+))\\1:/",
    "haystack": "abcd:",
    "match": [
      {
        "match": "abcd:",
        "group1": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\Eabc/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\Eabc]/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[\\Eabc]/",
    "haystack": "E",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a-\\Ec]/",
    "haystack": "b",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[a-\\Ec]/",
    "haystack": "-",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a-\\Ec]/",
    "haystack": "E",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a\\E\\E-\\Ec]/",
    "haystack": "b",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[a\\E\\E-\\Ec]/",
    "haystack": "-",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a\\E\\E-\\Ec]/",
    "haystack": "E",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\E\\Qa\\E-\\Qz\\E]+/",
    "haystack": "b",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[\\E\\Qa\\E-\\Qz\\E]+/",
    "haystack": "-",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a\\Q]bc\\E]/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a\\Q]bc\\E]/",
    "haystack": "]",
    "match": [
      {
        "match": "]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a\\Q]bc\\E]/",
    "haystack": "c",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a-\\Q\\E]/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[a-\\Q\\E]/",
    "haystack": "-",
    "match": [
      {
        "match": "-"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a()*)*/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa",
        "group1": "a",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a(?:(?:))*)*/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a()+)+/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa",
        "group1": "a",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a(?:(?:))+)+/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a){0,3}(?(1)b|(c|))*D/",
    "haystack": "abbD",
    "match": [
      {
        "match": "abbD",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a){0,3}(?(1)b|(c|))*D/",
    "haystack": "ccccD",
    "match": [
      {
        "match": "ccccD",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a){0,3}(?(1)b|(c|))*D/",
    "haystack": "D",
    "match": [
      {
        "match": "D",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a|)*\\d/",
    "haystack": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4",
    "match": [
      {
        "match": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(a|)*\\d/",
    "haystack": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a|)*\\d/",
    "haystack": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4",
    "match": [
      {
        "match": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>a|)*\\d/",
    "haystack": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:a|)*\\d/",
    "haystack": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4",
    "match": [
      {
        "match": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?:a|)*\\d/",
    "haystack": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\Z/g",
    "haystack": "abc\\n",
    "match": [
      {
        "match": ""
      },
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?s)(?>.*)(?<!\\n)/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?s)(?>.*)(?<!\\n)/",
    "haystack": "abc\\n",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?![^\\n]*\\n\\z)/",
    "haystack": "abc",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?![^\\n]*\\n\\z)/",
    "haystack": "abc\\n",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\z(?<!\\n)/",
    "haystack": "abc",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\z(?<!\\n)/",
    "haystack": "abc\\n",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(.*(.)?)*/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/( (A | (?(1)0|) )*   )/x",
    "haystack": "abcd",
    "match": [
      {
        "match": "",
        "group1": "",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/( ( (?(1)0|) )*   )/x",
    "haystack": "abcd",
    "match": [
      {
        "match": "",
        "group1": "",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(  (?(1)0|)*   )/x",
    "haystack": "abcd",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[[:abcd:xyz]]/",
    "haystack": "a]",
    "match": [
      {
        "match": "a]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[[:abcd:xyz]]/",
    "haystack": ":]",
    "match": [
      {
        "match": ":]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[abc[:x\\]pqr]/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[abc[:x\\]pqr]/",
    "haystack": "[",
    "match": [
      {
        "match": "["
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[abc[:x\\]pqr]/",
    "haystack": ":",
    "match": [
      {
        "match": ":"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[abc[:x\\]pqr]/",
    "haystack": "]",
    "match": [
      {
        "match": "]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[abc[:x\\]pqr]/",
    "haystack": "p",
    "match": [
      {
        "match": "p"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/.*[op][xyz]/",
    "haystack": "fooabcfoo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=.*b)b|^)/",
    "haystack": "adc",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=.*b)b|^)/",
    "haystack": "abc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=^.*b)b|^)/",
    "haystack": "adc",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?(?=^.*b)b|^)/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=.*b)b|^)*/",
    "haystack": "adc",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=.*b)b|^)*/",
    "haystack": "abc",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=.*b)b|^)+/",
    "haystack": "adc",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=.*b)b|^)+/",
    "haystack": "abc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=b).*b|^d)/",
    "haystack": "abc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=.*b).*b|^d)/",
    "haystack": "abc",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^%((?(?=[a])[^%])|b)*%$/",
    "haystack": "%ab%",
    "match": [
      {
        "match": "0x0p+0b%",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i)a(?-i)b|c/",
    "haystack": "XabX",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i)a(?-i)b|c/",
    "haystack": "XAbX",
    "match": [
      {
        "match": "Ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i)a(?-i)b|c/",
    "haystack": "CcC",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?i)a(?-i)b|c/",
    "haystack": "XABX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\x00-\\xff\\s]+/",
    "haystack": "\\x0a\\x0b\\x0c\\x0d",
    "match": [
      {
        "match": "\\x0a\\x0b\\x0c\\x0d"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(abc)\\1/i",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(abc)\\1/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]*/i",
    "haystack": "12abc",
    "match": [
      {
        "match": "12"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]*/i",
    "haystack": "12ABC",
    "match": [
      {
        "match": "12"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]*+/i",
    "haystack": "12abc",
    "match": [
      {
        "match": "12"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]*+/i",
    "haystack": "12ABC",
    "match": [
      {
        "match": "12"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/[^a]*?X/i",
    "haystack": "12abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]*?X/i",
    "haystack": "12ABC",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/[^a]+?X/i",
    "haystack": "12abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]+?X/i",
    "haystack": "12ABC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]?X/i",
    "haystack": "12aXbcX",
    "match": [
      {
        "match": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]?X/i",
    "haystack": "12AXBCX",
    "match": [
      {
        "match": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]?X/i",
    "haystack": "BCX",
    "match": [
      {
        "match": "CX"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]??X/i",
    "haystack": "12aXbcX",
    "match": [
      {
        "match": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]??X/i",
    "haystack": "12AXBCX",
    "match": [
      {
        "match": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]??X/i",
    "haystack": "BCX",
    "match": [
      {
        "match": "CX"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]?+X/i",
    "haystack": "12aXbcX",
    "match": [
      {
        "match": "cX"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]?+X/i",
    "haystack": "12AXBCX",
    "match": [
      {
        "match": "CX"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]?+X/i",
    "haystack": "BCX",
    "match": [
      {
        "match": "CX"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]{2,3}/i",
    "haystack": "abcdef",
    "match": [
      {
        "match": "bcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]{2,3}/i",
    "haystack": "ABCDEF",
    "match": [
      {
        "match": "BCD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]{2,3}?/i",
    "haystack": "abcdef",
    "match": [
      {
        "match": "bc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]{2,3}?/i",
    "haystack": "ABCDEF",
    "match": [
      {
        "match": "BC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]{2,3}+/i",
    "haystack": "abcdef",
    "match": [
      {
        "match": "bcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[^a]{2,3}+/i",
    "haystack": "ABCDEF",
    "match": [
      {
        "match": "BCD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((a|)+)+Z/",
    "haystack": "Z",
    "match": [
      {
        "match": "Z",
        "group1": "",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)b|(a)c/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>(a))b|(a)c/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=(a))ab|(a)c/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>(a))b|(a)c)/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac",
        "group1": "ac",
        "group3": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>(a))b|(a)c)++/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac",
        "group1": "ac",
        "group3": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?>(a))b|(a)c)++/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=(?>(a))b|(a)c)(..)/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac",
        "group2": "a",
        "group3": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>(?>(a))b|(a)c)/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?>([ab])))+a=/",
    "haystack": "=ba=",
    "match": [
      {
        "match": "ba=",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>([ab]))+a=/",
    "haystack": "=ba=",
    "match": [
      {
        "match": "ba=",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>(a+)b)+(aabab))/",
    "haystack": "aaaabaaabaabab",
    "match": [
      {
        "match": "aaaabaaabaabab",
        "group1": "aaaabaaabaabab",
        "group2": "aaa",
        "group3": "aabab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>a+|ab)+?c/",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>a+|ab)+c/",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:a+|ab)+c/",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=(a))a)/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=(a))a)(b)/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": "a",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?:a|ab)++c/",
    "haystack": "aaaabc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?>a|ab)++c/",
    "haystack": "aaaabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a|ab)+c/",
    "haystack": "aaaabc",
    "match": [
      {
        "match": "aaaabc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=abc){3}abc/",
    "haystack": "abcabcabc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=abc){3}abc/",
    "haystack": "xyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=abc)+abc/",
    "haystack": "abcabcabc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=abc)+abc/",
    "haystack": "xyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=abc)++abc/",
    "haystack": "abcabcabc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=abc)++abc/",
    "haystack": "xyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=abc){0}xyz/",
    "haystack": "xyz",
    "match": [
      {
        "match": "xyz"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=abc){1}xyz/",
    "haystack": "xyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=(a))?./",
    "haystack": "ab",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=(a))?./",
    "haystack": "bc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=(a))??./",
    "haystack": "ab",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=(a))??./",
    "haystack": "bc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?=(?1))?[az]([abc])d/",
    "haystack": "abd",
    "match": [
      {
        "match": "abd",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?=(?1))?[az]([abc])d/",
    "haystack": "zcdxx",
    "match": [
      {
        "match": "zcd",
        "group1": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!a){0}\\w+/",
    "haystack": "aaaaa",
    "match": [
      {
        "match": "aaaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(abc))?xyz/",
    "haystack": "abcxyz",
    "match": [
      {
        "match": "xyz",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(abc))?xyz/",
    "haystack": "pqrxyz",
    "match": [
      {
        "match": "xyz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\g<a>]+/",
    "haystack": "ggg<<<aaa>>>",
    "match": [
      {
        "match": "ggg<<<aaa>>>"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[\\g<a>]+/",
    "haystack": "\\\\ga",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[\\ga]+/",
    "haystack": "gggagagaxyz",
    "match": [
      {
        "match": "gggagaga"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[:a[:digit:]]+/",
    "haystack": "aaaa444:::Z",
    "match": [
      {
        "match": "aaaa444:::"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^[:a[:digit:]:b]+/",
    "haystack": "aaaa444:::bbbZ",
    "match": [
      {
        "match": "aaaa444:::bbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[:a]xxx[b:]/",
    "haystack": ":xxx:",
    "match": [
      {
        "match": ":xxx:"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a{2})b/i",
    "haystack": "xaabc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=a{2})b/i",
    "haystack": "xabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!a{2})b/i",
    "haystack": "xabc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<!a{2})b/i",
    "haystack": "xaabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a\\h)c/",
    "haystack": "xa c",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=[^a]{2})b/",
    "haystack": "axxbc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=[^a]{2})b/",
    "haystack": "aAAbc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=[^a]{2})b/",
    "haystack": "xaabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=[^a]{2})b/i",
    "haystack": "axxbc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=[^a]{2})b/i",
    "haystack": "aAAbc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=[^a]{2})b/i",
    "haystack": "xaabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a\\H)c/",
    "haystack": "abc",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a\\V)c/",
    "haystack": "abc",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a\\v)c/",
    "haystack": "a\\nc",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=c)c|d)++Y/",
    "haystack": "XcccddYX",
    "match": [
      {
        "match": "cccddY"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=c)c|d)*+Y/",
    "haystack": "XcccddYX",
    "match": [
      {
        "match": "cccddY"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a{2,3}){2,}+a/",
    "haystack": "aaaaaaa",
    "match": [
      {
        "match": "aaaaaaa",
        "group1": "aaa"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a{2,3}){2,}+a/",
    "haystack": "aaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a{2,3}){2,}+a/",
    "haystack": "aaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a{2,3})++a/",
    "haystack": "aaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a{2,3})*+a/",
    "haystack": "aaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\H\\h\\V\\v/",
    "haystack": "X X\\x0a",
    "match": [
      {
        "match": "X X\\x0a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\H\\h\\V\\v/",
    "haystack": "X\\x09X\\x0b",
    "match": [
      {
        "match": "X\\x09X\\x0b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\H\\h\\V\\v/",
    "haystack": "\\xa0 X\\x0a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\H*\\h+\\V?\\v{3,4}/",
    "haystack": "\\x09\\x20\\xa0X\\x0a\\x0b\\x0c\\x0d\\x0a",
    "match": [
      {
        "match": "\\x09 \\xa0X\\x0a\\x0b\\x0c\\x0d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\H*\\h+\\V?\\v{3,4}/",
    "haystack": "\\x09\\x20\\xa0\\x0a\\x0b\\x0c\\x0d\\x0a",
    "match": [
      {
        "match": "\\x09 \\xa0\\x0a\\x0b\\x0c\\x0d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\H*\\h+\\V?\\v{3,4}/",
    "haystack": "\\x09\\x20\\xa0\\x0a\\x0b\\x0c",
    "match": [
      {
        "match": "\\x09 \\xa0\\x0a\\x0b\\x0c"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\H*\\h+\\V?\\v{3,4}/",
    "haystack": "\\x09\\x20\\xa0\\x0a\\x0b",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\H{3,4}/",
    "haystack": "XY  ABCDE",
    "match": [
      {
        "match": "ABCD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\H{3,4}/",
    "haystack": "XY  PQR ST",
    "match": [
      {
        "match": "PQR"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.\\h{3,4}./",
    "haystack": "XY  AB    PQRS",
    "match": [
      {
        "match": "B    P"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\h*X\\h?\\H+Y\\H?Z/",
    "haystack": ">XNNNYZ",
    "match": [
      {
        "match": "XNNNYZ"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\h*X\\h?\\H+Y\\H?Z/",
    "haystack": ">  X NYQZ",
    "match": [
      {
        "match": "  X NYQZ"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\h*X\\h?\\H+Y\\H?Z/",
    "haystack": ">XYZ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\h*X\\h?\\H+Y\\H?Z/",
    "haystack": ">  X NY Z",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\v*X\\v?Y\\v+Z\\V*\\x0a\\V+\\x0b\\V{2,3}\\x0c/",
    "haystack": ">XY\\x0aZ\\x0aA\\x0bNN\\x0c",
    "match": [
      {
        "match": "XY\\x0aZ\\x0aA\\x0bNN\\x0c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\v*X\\v?Y\\v+Z\\V*\\x0a\\V+\\x0b\\V{2,3}\\x0c/",
    "haystack": ">\\x0a\\x0dX\\x0aY\\x0a\\x0bZZZ\\x0aAAA\\x0bNNN\\x0c",
    "match": [
      {
        "match": "\\x0a\\x0dX\\x0aY\\x0a\\x0bZZZ\\x0aAAA\\x0bNNN\\x0c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(foo)\\Kbar/",
    "haystack": "foobar",
    "match": [
      {
        "match": "bar",
        "group1": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(foo)(\\Kbar|baz)/",
    "haystack": "foobar",
    "match": [
      {
        "match": "bar",
        "group1": "foo",
        "group2": "bar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(foo)(\\Kbar|baz)/",
    "haystack": "foobaz",
    "match": [
      {
        "match": "foobaz",
        "group1": "foo",
        "group2": "baz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(foo\\Kbar)baz/",
    "haystack": "foobarbaz",
    "match": [
      {
        "match": "barbaz",
        "group1": "foobar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/abc\\K|def\\K/g",
    "haystack": "Xabcdefghi",
    "match": [
      {
        "match": ""
      },
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ab\\Kc|de\\Kf/g",
    "haystack": "Xabcdefghi",
    "match": [
      {
        "match": "c"
      },
      {
        "match": "f"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=C)/g",
    "haystack": "ABCDECBA",
    "match": [
      {
        "match": ""
      },
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^abc\\K/",
    "haystack": "abcdef",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^abc\\K/",
    "haystack": "defabcxyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a(b))\\1\\g1\\g{1}\\g-1\\g{-1}\\g{-2}Z/",
    "haystack": "ababababbbabZXXXX",
    "match": [
      {
        "match": "ababababbbabZ",
        "group1": "ab",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<A>tom|bon)-\\g{A}/",
    "haystack": "tom-tom",
    "match": [
      {
        "match": "tom-tom",
        "group1": "tom"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<A>tom|bon)-\\g{A}/",
    "haystack": "bon-bon",
    "match": [
      {
        "match": "bon-bon",
        "group1": "bon"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(^(a|b\\g{-1}))/",
    "haystack": "bacxxx",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(abc)|(xyz))\\1/",
    "haystack": "abcabc",
    "match": [
      {
        "match": "abcabc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(abc)|(xyz))\\1/",
    "haystack": "xyzxyz",
    "match": [
      {
        "match": "xyzxyz",
        "group1": "xyz"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?|(abc)|(xyz))\\1/",
    "haystack": "abcxyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(abc)|(xyz))\\1/",
    "haystack": "xyzabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(abc)|(xyz))(?1)/",
    "haystack": "abcabc",
    "match": [
      {
        "match": "abcabc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(abc)|(xyz))(?1)/",
    "haystack": "xyzabc",
    "match": [
      {
        "match": "xyzabc",
        "group1": "xyz"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?|(abc)|(xyz))(?1)/",
    "haystack": "xyzxyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^X(?5)(a)(?|(b)|(q))(c)(d)(Y)/",
    "haystack": "XYabcdY",
    "match": [
      {
        "match": "XYabcdY",
        "group1": "a",
        "group2": "b",
        "group3": "c",
        "group4": "d",
        "group5": "Y"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^X(?7)(a)(?|(b|(r)(s))|(q))(c)(d)(Y)/",
    "haystack": "XYabcdY",
    "match": [
      {
        "match": "XYabcdY",
        "group1": "a",
        "group2": "b",
        "group5": "c",
        "group6": "d",
        "group7": "Y"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^X(?7)(a)(?|(b|(?|(r)|(t))(s))|(q))(c)(d)(Y)/",
    "haystack": "XYabcdY",
    "match": [
      {
        "match": "XYabcdY",
        "group1": "a",
        "group2": "b",
        "group5": "c",
        "group6": "d",
        "group7": "Y"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?'abc'\\w+):\\k<abc>{2}/",
    "haystack": "a:aaxyz",
    "match": [
      {
        "match": "a:aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?'abc'\\w+):\\k<abc>{2}/",
    "haystack": "ab:ababxyz",
    "match": [
      {
        "match": "ab:abab",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?'abc'\\w+):\\k<abc>{2}/",
    "haystack": "a:axyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?'abc'\\w+):\\k<abc>{2}/",
    "haystack": "ab:abxyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?'abc'\\w+):\\g{abc}{2}/",
    "haystack": "a:aaxyz",
    "match": [
      {
        "match": "a:aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?'abc'\\w+):\\g{abc}{2}/",
    "haystack": "ab:ababxyz",
    "match": [
      {
        "match": "ab:abab",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?'abc'\\w+):\\g{abc}{2}/",
    "haystack": "a:axyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?'abc'\\w+):\\g{abc}{2}/",
    "haystack": "ab:abxyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?<ab>a)? (?(<ab>)b|c) (?('ab')d|e)/x",
    "haystack": "abd",
    "match": [
      {
        "match": "abd",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?<ab>a)? (?(<ab>)b|c) (?('ab')d|e)/x",
    "haystack": "ce",
    "match": [
      {
        "match": "ce"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a.)\\g-1Z/",
    "haystack": "aXaXZ",
    "match": [
      {
        "match": "aXaXZ",
        "group1": "aX"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a.)\\g{-1}Z/",
    "haystack": "aXaXZ",
    "match": [
      {
        "match": "aXaXZ",
        "group1": "aX"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(DEFINE) (?<A> a) (?<B> b) )  (?&A) (?&B) /x",
    "haystack": "abcd",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<all>(?:(?:a(?&all))|(b))(c?))/",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc",
        "group1": "aabc",
        "group3": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(b)|(c))(?1)/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "ab",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(b)|(c))(?1)/",
    "haystack": "cab",
    "match": [
      {
        "match": "cab",
        "group1": "c",
        "group3": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?1)(a(b)|(c))/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "c",
        "group3": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?1)(a(b)|(c))/",
    "haystack": "cab",
    "match": [
      {
        "match": "cab",
        "group1": "ab",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<NAME>(?&NAME_PAT))\\s+(?<ADDR>(?&ADDRESS_PAT))\n  (?(DEFINE)\n  (?<NAME_PAT>[a-z]+)\n  (?<ADDRESS_PAT>\\d+)\n  )/x",
    "haystack": "metcalfe 33",
    "match": [
      {
        "match": "metcalfe 33",
        "group1": "metcalfe",
        "group2": "33"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}/",
    "haystack": "1.2.3.4",
    "match": [
      {
        "match": "1.2.3.4",
        "group2": ".4"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}/",
    "haystack": "131.111.10.206",
    "match": [
      {
        "match": "131.111.10.206",
        "group2": ".206"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}/",
    "haystack": "10.0.0.0",
    "match": [
      {
        "match": "10.0.0.0",
        "group2": ".0"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}/",
    "haystack": "10.6",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}/",
    "haystack": "455.3.4.5",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))/",
    "haystack": "1.2.3.4",
    "match": [
      {
        "match": "1.2.3.4",
        "group1": ".4"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))/",
    "haystack": "131.111.10.206",
    "match": [
      {
        "match": "131.111.10.206",
        "group1": ".206"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))/",
    "haystack": "10.0.0.0",
    "match": [
      {
        "match": "10.0.0.0",
        "group1": ".0"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))/",
    "haystack": "10.6",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))/",
    "haystack": "455.3.4.5",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\w++|\\s++)*$/",
    "haystack": "now is the time for all good men to come to the aid of the party",
    "match": [
      {
        "match": "now is the time for all good men to come to the aid of the party",
        "group1": "party"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(\\w++|\\s++)*$/",
    "haystack": "this is not a line with only words and spaces!",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(\\d++)(\\w)/",
    "haystack": "12345a",
    "match": [
      {
        "match": "12345a",
        "group1": "12345",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(\\d++)(\\w)/",
    "haystack": "12345+",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a++b/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a++b)/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab",
        "group1": "aaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a++)b/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab",
        "group1": "aaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/([^()]++|\\([^()]*\\))+/",
    "haystack": "((abc(ade)ufh()()x",
    "match": [
      {
        "match": "abc(ade)ufh()()x",
        "group1": "x"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\(([^()]++|\\([^()]+\\))+\\)/",
    "haystack": "(abc)",
    "match": [
      {
        "match": "(abc)",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\(([^()]++|\\([^()]+\\))+\\)/",
    "haystack": "(abc(def)xyz)",
    "match": [
      {
        "match": "(abc(def)xyz)",
        "group1": "xyz"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/\\(([^()]++|\\([^()]+\\))+\\)/",
    "haystack": "((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^()]|\\((?1)*\\))*$/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^()]|\\((?1)*\\))*$/",
    "haystack": "a(b)c",
    "match": [
      {
        "match": "a(b)c",
        "group1": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^()]|\\((?1)*\\))*$/",
    "haystack": "a(b(c))d",
    "match": [
      {
        "match": "a(b(c))d",
        "group1": "d"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^([^()]|\\((?1)*\\))*$/",
    "haystack": "a(b(c)d",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^>abc>([^()]|\\((?1)*\\))*<xyz<$/",
    "haystack": ">abc>123<xyz<",
    "match": [
      {
        "match": ">abc>123<xyz<",
        "group1": "3"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^>abc>([^()]|\\((?1)*\\))*<xyz<$/",
    "haystack": ">abc>1(2)3<xyz<",
    "match": [
      {
        "match": ">abc>1(2)3<xyz<",
        "group1": "3"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^>abc>([^()]|\\((?1)*\\))*<xyz<$/",
    "haystack": ">abc>(1(2)3)<xyz<",
    "match": [
      {
        "match": ">abc>(1(2)3)<xyz<",
        "group1": "(1(2)3)"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$/i",
    "haystack": "1221",
    "match": [
      {
        "match": "1221",
        "group1": "1221",
        "group2": "1"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$/i",
    "haystack": "Satanoscillatemymetallicsonatas",
    "match": [
      {
        "match": "Satanoscillatemymetallicsonatas",
        "group3": "Satanoscillatemymetallicsonatas",
        "group4": "S"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$/i",
    "haystack": "AmanaplanacanalPanama",
    "match": [
      {
        "match": "AmanaplanacanalPanama",
        "group3": "AmanaplanacanalPanama",
        "group4": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$/i",
    "haystack": "AblewasIereIsawElba",
    "match": [
      {
        "match": "AblewasIereIsawElba",
        "group3": "AblewasIereIsawElba",
        "group4": "A"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$/i",
    "haystack": "Thequickbrownfox",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$/",
    "haystack": "12",
    "match": [
      {
        "match": "12",
        "group1": "12"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$/",
    "haystack": "(((2+2)*-3)-7)",
    "match": [
      {
        "match": "(((2+2)*-3)-7)",
        "group1": "(((2+2)*-3)-7)",
        "group2": "-"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$/",
    "haystack": "-12",
    "match": [
      {
        "match": "-12",
        "group1": "-12"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$/",
    "haystack": "((2+2)*-3)-7)",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(x(y|(?1){2})z)/",
    "haystack": "xyz",
    "match": [
      {
        "match": "xyz",
        "group1": "xyz",
        "group2": "y"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(x(y|(?1){2})z)/",
    "haystack": "xxyzxyzz",
    "match": [
      {
        "match": "xxyzxyzz",
        "group1": "xxyzxyzz",
        "group2": "xyzxyz"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(x(y|(?1){2})z)/",
    "haystack": "xxyzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(x(y|(?1){2})z)/",
    "haystack": "xxyzxyzxyzz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))/x",
    "haystack": "<>",
    "match": [
      {
        "match": "<>",
        "group1": "<>",
        "group2": "<>"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))/x",
    "haystack": "<abcd>",
    "match": [
      {
        "match": "<abcd>",
        "group1": "<abcd>",
        "group2": "<abcd>"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))/x",
    "haystack": "<abc <123> hij>",
    "match": [
      {
        "match": "<abc <123> hij>",
        "group1": "<abc <123> hij>",
        "group2": "<abc <123> hij>"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))/x",
    "haystack": "<abc <def> hij>",
    "match": [
      {
        "match": "<def>",
        "group1": "<def>",
        "group2": "<def>"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))/x",
    "haystack": "<abc<>def>",
    "match": [
      {
        "match": "<abc<>def>",
        "group1": "<abc<>def>",
        "group2": "<abc<>def>"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))/x",
    "haystack": "<abc<>",
    "match": [
      {
        "match": "<>",
        "group1": "<>",
        "group2": "<>"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))/x",
    "haystack": "<abc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^a+(*FAIL)/",
    "haystack": "aaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/a+b?c+(*FAIL)/",
    "haystack": "aaabccc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/a+b?(*PRUNE)c+(*FAIL)/",
    "haystack": "aaabccc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/a+b?(*COMMIT)c+(*FAIL)/",
    "haystack": "aaabccc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/a+b?(*SKIP)c+(*FAIL)/",
    "haystack": "aaabcccaaabccc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "aaaxxxxxx",
    "match": [
      {
        "match": "aaaxxxxxx"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "aaa++++++",
    "match": [
      {
        "match": "aaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "bbbxxxxx",
    "match": [
      {
        "match": "bbbxxxxx"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "bbb+++++",
    "match": [
      {
        "match": "bbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "cccxxxx",
    "match": [
      {
        "match": "cccxxxx"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "ccc++++",
    "match": [
      {
        "match": "ccc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "dddddddd",
    "match": [
      {
        "match": "ddd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "aaaxxxxxx",
    "match": [
      {
        "match": "aaaxxxxxx",
        "group1": "aaaxxxxxx"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "aaa++++++",
    "match": [
      {
        "match": "aaa",
        "group1": "aaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "bbbxxxxx",
    "match": [
      {
        "match": "bbbxxxxx",
        "group1": "bbbxxxxx"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "bbb+++++",
    "match": [
      {
        "match": "bbb",
        "group1": "bbb"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "cccxxxx",
    "match": [
      {
        "match": "cccxxxx",
        "group1": "cccxxxx"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "ccc++++",
    "match": [
      {
        "match": "ccc",
        "group1": "ccc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})/",
    "haystack": "dddddddd",
    "match": [
      {
        "match": "ddd",
        "group1": "ddd"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a+b?(*THEN)c+(*FAIL)/",
    "haystack": "aaabccc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(A (A|B(*ACCEPT)|C) D)(E)/x",
    "haystack": "AB",
    "match": [
      {
        "match": "AB",
        "group1": "AB",
        "group2": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(A (A|B(*ACCEPT)|C) D)(E)/x",
    "haystack": "ABX",
    "match": [
      {
        "match": "AB",
        "group1": "AB",
        "group2": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(A (A|B(*ACCEPT)|C) D)(E)/x",
    "haystack": "AADE",
    "match": [
      {
        "match": "AADE",
        "group1": "AAD",
        "group2": "A",
        "group3": "E"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(A (A|B(*ACCEPT)|C) D)(E)/x",
    "haystack": "ACDE",
    "match": [
      {
        "match": "ACDE",
        "group1": "ACD",
        "group2": "C",
        "group3": "E"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (A|B(*ACCEPT)|C) D)(E)/x",
    "haystack": "AD",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$/i",
    "haystack": "1221",
    "match": [
      {
        "match": "1221",
        "group1": "1221",
        "group2": "1"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$/i",
    "haystack": "Satan, oscillate my metallic sonatas!",
    "match": [
      {
        "match": "Satan, oscillate my metallic sonatas!",
        "group3": "Satan, oscillate my metallic sonatas",
        "group4": "S"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$/i",
    "haystack": "A man, a plan, a canal: Panama!",
    "match": [
      {
        "match": "A man, a plan, a canal: Panama!",
        "group3": "A man, a plan, a canal: Panama",
        "group4": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$/i",
    "haystack": "Able was I ere I saw Elba.",
    "match": [
      {
        "match": "Able was I ere I saw Elba.",
        "group3": "Able was I ere I saw Elba",
        "group4": "A"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$/i",
    "haystack": "The quick brown fox",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.)$/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.)$/",
    "haystack": "aba",
    "match": [
      {
        "match": "aba",
        "group1": "aba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.)$/",
    "haystack": "aabaa",
    "match": [
      {
        "match": "aabaa",
        "group1": "aabaa",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.)$/",
    "haystack": "abcdcba",
    "match": [
      {
        "match": "abcdcba",
        "group1": "abcdcba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.)$/",
    "haystack": "pqaabaaqp",
    "match": [
      {
        "match": "pqaabaaqp",
        "group1": "pqaabaaqp",
        "group2": "p"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.)$/",
    "haystack": "ablewasiereisawelba",
    "match": [
      {
        "match": "ablewasiereisawelba",
        "group1": "ablewasiereisawelba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^((.)(?1)\\2|.)$/",
    "haystack": "rhubarb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.)$/",
    "haystack": "the quick brown fox",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)(?<=b(?1))/",
    "haystack": "baz",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(a)(?<=b(?1))/",
    "haystack": "caz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=b(?1))(a)/",
    "haystack": "zbaaz",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=b(?1))(a)/",
    "haystack": "aaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<X>a)(?<=b(?&X))/",
    "haystack": "baz",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?|(abc)|(def))\\1/",
    "haystack": "abcabc",
    "match": [
      {
        "match": "abcabc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?|(abc)|(def))\\1/",
    "haystack": "defdef",
    "match": [
      {
        "match": "defdef",
        "group1": "def"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?|(abc)|(def))\\1/",
    "haystack": "abcdef",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?|(abc)|(def))\\1/",
    "haystack": "defabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?|(abc)|(def))(?1)/",
    "haystack": "abcabc",
    "match": [
      {
        "match": "abcabc",
        "group1": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?|(abc)|(def))(?1)/",
    "haystack": "defabc",
    "match": [
      {
        "match": "defabc",
        "group1": "def"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?|(abc)|(def))(?1)/",
    "haystack": "defdef",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?|(abc)|(def))(?1)/",
    "haystack": "abcdef",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:a(?<quote> (?<apostrophe>')|(?<realquote>\")) |b(?<quote> (?<apostrophe>')|(?<realquote>\")) ) (?('quote')[a-z]+|[0-9]+)/x",
    "haystack": "a\\\"aaaaa",
    "match": [
      {
        "match": "a\"aaaaa",
        "group1": "\"",
        "group3": "\""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:a(?<quote> (?<apostrophe>')|(?<realquote>\")) |b(?<quote> (?<apostrophe>')|(?<realquote>\")) ) (?('quote')[a-z]+|[0-9]+)/x",
    "haystack": "b\\\"aaaaa",
    "match": [
      {
        "match": "b\"aaaaa",
        "group4": "\"",
        "group6": "\""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?:a(?<quote> (?<apostrophe>')|(?<realquote>\")) |b(?<quote> (?<apostrophe>')|(?<realquote>\")) ) (?('quote')[a-z]+|[0-9]+)/x",
    "haystack": "b\\\"11111",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?1)|B)(A(*F)|C)/",
    "haystack": "ABCD",
    "match": [
      {
        "match": "BC",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?1)|B)(A(*F)|C)/",
    "haystack": "CCD",
    "match": [
      {
        "match": "CC",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?:(?1)|B)(A(*F)|C)/",
    "haystack": "CAD",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:(?1)|B)(A(*F)|C)/",
    "haystack": "CCD",
    "match": [
      {
        "match": "CC",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:(?1)|B)(A(*F)|C)/",
    "haystack": "BCD",
    "match": [
      {
        "match": "BC",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?:(?1)|B)(A(*F)|C)/",
    "haystack": "ABCD",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:(?1)|B)(A(*F)|C)/",
    "haystack": "CAD",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:(?1)|B)(A(*F)|C)/",
    "haystack": "BAD",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?1)|B)(A(*ACCEPT)XX|C)D/",
    "haystack": "AAD",
    "match": [
      {
        "match": "AA",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?1)|B)(A(*ACCEPT)XX|C)D/",
    "haystack": "ACD",
    "match": [
      {
        "match": "ACD",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?1)|B)(A(*ACCEPT)XX|C)D/",
    "haystack": "BAD",
    "match": [
      {
        "match": "BA",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?1)|B)(A(*ACCEPT)XX|C)D/",
    "haystack": "BCD",
    "match": [
      {
        "match": "BCD",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?1)|B)(A(*ACCEPT)XX|C)D/",
    "haystack": "BAX",
    "match": [
      {
        "match": "BA",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?:(?1)|B)(A(*ACCEPT)XX|C)D/",
    "haystack": "ACX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?1)|B)(A(*ACCEPT)XX|C)D/",
    "haystack": "ABC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)(A))B(?1)C/",
    "haystack": "BAC",
    "match": [
      {
        "match": "BAC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)((A)\\2))B(?1)C/",
    "haystack": "BAAC",
    "match": [
      {
        "match": "BAAC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<pn> \\( ( [^()]++ | (?&pn) )* \\) )/x",
    "haystack": "(ab(cd)ef)",
    "match": [
      {
        "match": "(ab(cd)ef)",
        "group1": "(ab(cd)ef)",
        "group2": "ef"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?=a(*SKIP)b|ac)/",
    "haystack": "ac",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?=a(*PRUNE)b)/",
    "haystack": "ab",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?=a(*PRUNE)b)/",
    "haystack": "ac",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?=a(*ACCEPT)b)/",
    "haystack": "ac",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a\\Kb)/",
    "haystack": "ab",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>a\\Kb))/",
    "haystack": "ab",
    "match": [
      {
        "match": "b",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a\\Kb)/",
    "haystack": "ab",
    "match": [
      {
        "match": "b",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^a\\Kcz|ac/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a\\Kbz|ab)/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?&t)(?(DEFINE)(?<t>a\\Kb))$/",
    "haystack": "ab",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^()]|\\((?1)*\\))*$/",
    "haystack": "a(b)c",
    "match": [
      {
        "match": "a(b)c",
        "group1": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^([^()]|\\((?1)*\\))*$/",
    "haystack": "a(b(c)d)e",
    "match": [
      {
        "match": "a(b(c)d)e",
        "group1": "e"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<L1>(?P<L2>0)(?P>L1)|(?P>L2))/",
    "haystack": "0",
    "match": [
      {
        "match": "0",
        "group1": "0"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<L1>(?P<L2>0)(?P>L1)|(?P>L2))/",
    "haystack": "00",
    "match": [
      {
        "match": "00",
        "group1": "00",
        "group2": "0"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<L1>(?P<L2>0)(?P>L1)|(?P>L2))/",
    "haystack": "0000",
    "match": [
      {
        "match": "0000",
        "group1": "0000",
        "group2": "0"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<L1>(?P<L2>0)|(?P>L2)(?P>L1))/",
    "haystack": "0",
    "match": [
      {
        "match": "0",
        "group1": "0",
        "group2": "0"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<L1>(?P<L2>0)|(?P>L2)(?P>L1))/",
    "haystack": "00",
    "match": [
      {
        "match": "0",
        "group1": "0",
        "group2": "0"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<L1>(?P<L2>0)|(?P>L2)(?P>L1))/",
    "haystack": "0000",
    "match": [
      {
        "match": "0",
        "group1": "0",
        "group2": "0"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/A(*COMMIT)(B|D)/",
    "haystack": "ACABX",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^(A(*PRUNE:A)B|C(*PRUNE:B)D)/",
    "haystack": "AC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(A(*PRUNE:A)B|C(*PRUNE:B)D)/",
    "haystack": "CB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(*MARK:A)(*SKIP:B)(C|X)/",
    "haystack": "C",
    "match": [
      {
        "match": "C",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*MARK:A)(*SKIP:B)(C|X)/",
    "haystack": "D",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^(A(*THEN:A)B|C(*THEN:B)D)/",
    "haystack": "CB",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?:A(*THEN:A)B|C(*THEN:B)D)/",
    "haystack": "CB",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?>A(*THEN:A)B|C(*THEN:B)D)/",
    "haystack": "CB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*MARK:A)A+(*SKIP:A)(B|Z) | AC/x",
    "haystack": "AAAC",
    "match": [
      {
        "match": "AC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*MARK:A)A+(*MARK:B)(*SKIP:A)(B|Z) | AC/x",
    "haystack": "AAAC",
    "match": [
      {
        "match": "AC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*:A)A+(*SKIP:A)(B|Z) | AC/x",
    "haystack": "AAAC",
    "match": [
      {
        "match": "AC"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*:A)A+(*SKIP:A)(B|Z)/",
    "haystack": "AAAC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*MARK:A)A+(*SKIP:B)(B|Z) | AC/x",
    "haystack": "AAAC",
    "match": [
      {
        "match": "AC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*MARK:A)A+(*SKIP:B)(B|Z) | AC(*:B)/x",
    "haystack": "AAAC",
    "match": [
      {
        "match": "AC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(*COMMIT)(A|P)(B|P)(C|P)/",
    "haystack": "ABCDEFG",
    "match": [
      {
        "match": "ABC",
        "group1": "A",
        "group2": "B",
        "group3": "C"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*COMMIT)(A|P)(B|P)(C|P)/",
    "haystack": "DEFGABC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(\\w+)(?>b(*COMMIT))\\w{2}/",
    "haystack": "abbb",
    "match": [
      {
        "match": "abbb",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(\\w+)b(*COMMIT)\\w{2}/",
    "haystack": "abbb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?&t)(?#()(?(DEFINE)(?<t>a))/",
    "haystack": "bac",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>(*COMMIT)(?>yes|no)(*THEN)(*F))?/",
    "haystack": "yes",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>(*COMMIT)(yes|no)(*THEN)(*F))?/",
    "haystack": "yes",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/b?(*SKIP)c/",
    "haystack": "bc",
    "match": [
      {
        "match": "bc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/b?(*SKIP)c/",
    "haystack": "abc",
    "match": [
      {
        "match": "bc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*SKIP)bc/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(*SKIP)b/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<abn>(?P=abn)xxx|)+/",
    "haystack": "xxx",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:([^b]))(?1)/",
    "haystack": "aa",
    "match": [
      {
        "match": "aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:([^b]))(?1)/",
    "haystack": "aA",
    "match": [
      {
        "match": "aA",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?i:([^b]))(?1)/",
    "haystack": "ab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:([^b]))(?1)/",
    "haystack": "aB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:([^b]))(?1)/",
    "haystack": "Ba",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i:([^b]))(?1)/",
    "haystack": "ba",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?&t)*+(?(DEFINE)(?<t>a))\\w$/",
    "haystack": "aaaaaaX",
    "match": [
      {
        "match": "aaaaaaX"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?&t)*+(?(DEFINE)(?<t>a))\\w$/",
    "haystack": "aaaaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?&t)*(?(DEFINE)(?<t>a))\\w$/",
    "haystack": "aaaaaaX",
    "match": [
      {
        "match": "aaaaaaX"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?&t)*(?(DEFINE)(?<t>a))\\w$/",
    "haystack": "aaaaaa",
    "match": [
      {
        "match": "aaaaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)*+(\\w)/",
    "haystack": "aaaaX",
    "match": [
      {
        "match": "aaaaX",
        "group1": "a",
        "group2": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)*+(\\w)/",
    "haystack": "YZ",
    "match": [
      {
        "match": "Y",
        "group2": "Y"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a)*+(\\w)/",
    "haystack": "aaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a)*+(\\w)/",
    "haystack": "aaaaX",
    "match": [
      {
        "match": "aaaaX",
        "group1": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a)*+(\\w)/",
    "haystack": "YZ",
    "match": [
      {
        "match": "Y",
        "group1": "Y"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?:a)*+(\\w)/",
    "haystack": "aaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)++(\\w)/",
    "haystack": "aaaaX",
    "match": [
      {
        "match": "aaaaX",
        "group1": "a",
        "group2": "X"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a)++(\\w)/",
    "haystack": "aaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)++(\\w)/",
    "haystack": "YZ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a)++(\\w)/",
    "haystack": "aaaaX",
    "match": [
      {
        "match": "aaaaX",
        "group1": "X"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?:a)++(\\w)/",
    "haystack": "aaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a)++(\\w)/",
    "haystack": "YZ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)?+(\\w)/",
    "haystack": "aaaaX",
    "match": [
      {
        "match": "aa",
        "group1": "a",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)?+(\\w)/",
    "haystack": "YZ",
    "match": [
      {
        "match": "Y",
        "group2": "Y"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a)?+(\\w)/",
    "haystack": "aaaaX",
    "match": [
      {
        "match": "aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a)?+(\\w)/",
    "haystack": "YZ",
    "match": [
      {
        "match": "Y",
        "group1": "Y"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){2,}+(\\w)/",
    "haystack": "aaaaX",
    "match": [
      {
        "match": "aaaaX",
        "group1": "a",
        "group2": "X"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a){2,}+(\\w)/",
    "haystack": "aaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a){2,}+(\\w)/",
    "haystack": "YZ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a){2,}+(\\w)/",
    "haystack": "aaaaX",
    "match": [
      {
        "match": "aaaaX",
        "group1": "X"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?:a){2,}+(\\w)/",
    "haystack": "aaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:a){2,}+(\\w)/",
    "haystack": "YZ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a|)*(?1)b/",
    "haystack": "b",
    "match": [
      {
        "match": "b",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a|)*(?1)b/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a|)*(?1)b/",
    "haystack": "aab",
    "match": [
      {
        "match": "aab",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(a)++(?1)b/",
    "haystack": "ab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)++(?1)b/",
    "haystack": "aab",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(a)*+(?1)b/",
    "haystack": "ab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)*+(?1)b/",
    "haystack": "aab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?1)(?:(b)){0}/",
    "haystack": "b",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(foo ( \\( ((?:(?> [^()]+ )|(?2))*) \\) ) )/x",
    "haystack": "foo(bar(baz)+baz(bop))",
    "match": [
      {
        "match": "foo(bar(baz)+baz(bop))",
        "group1": "foo(bar(baz)+baz(bop))",
        "group2": "(bar(baz)+baz(bop))",
        "group3": "bar(baz)+baz(bop)"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(A (A|B(*ACCEPT)|C) D)(E)/x",
    "haystack": "AB",
    "match": [
      {
        "match": "AB",
        "group1": "AB",
        "group2": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A.*?(a|bc)/",
    "haystack": "ba",
    "match": [
      {
        "match": "ba",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A.*?(?:a|bc)++/",
    "haystack": "ba",
    "match": [
      {
        "match": "ba"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A.*?(a|bc)++/",
    "haystack": "ba",
    "match": [
      {
        "match": "ba",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A.*?(?:a|bc|d)/",
    "haystack": "ba",
    "match": [
      {
        "match": "ba"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(b))++/",
    "haystack": "beetle",
    "match": [
      {
        "match": "b",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?=(a(*ACCEPT)z))a)/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a)(?1)+ab/",
    "haystack": "aaaab",
    "match": [
      {
        "match": "aaaab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a)(?1)++ab/",
    "haystack": "aaaab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?=a(*:M))aZ/",
    "haystack": "aZbc",
    "match": [
      {
        "match": "aZ"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!(*:M)b)aZ/",
    "haystack": "aZbc",
    "match": [
      {
        "match": "aZ"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)(a))?b(?1)/",
    "haystack": "backgammon",
    "match": [
      {
        "match": "ba"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\N+/",
    "haystack": "abc\\ndef",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\N{1,}/",
    "haystack": "abc\\ndef",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(R)a+|(?R)b)/",
    "haystack": "aaaabcde",
    "match": [
      {
        "match": "aaaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(R)a+|((?R))b)/",
    "haystack": "aaaabcde",
    "match": [
      {
        "match": "aaaab",
        "group1": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?(R)a+|(?1)b))/",
    "haystack": "aaaabcde",
    "match": [
      {
        "match": "aaaab",
        "group1": "aaaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?(R1)a+|(?1)b))/",
    "haystack": "aaaabcde",
    "match": [
      {
        "match": "aaaab",
        "group1": "aaaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?(R)a|(?1)))*/",
    "haystack": "aaa",
    "match": [
      {
        "match": "aaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?(R)a|(?1)))+/",
    "haystack": "aaa",
    "match": [
      {
        "match": "aaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(*:any\nname)/",
    "haystack": "abc",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>(?&t)c|(?&t))(?(DEFINE)(?<t>a|b(*PRUNE)c))/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>(?&t)c|(?&t))(?(DEFINE)(?<t>a|b(*PRUNE)c))/",
    "haystack": "ba",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>(?&t)c|(?&t))(?(DEFINE)(?<t>a|b(*PRUNE)c))/",
    "haystack": "bba",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*? (a(*THEN)b) c/x",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*? (a(*THEN)b|(*F)) c/x",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*? ( (a(*THEN)b) | (*F) ) c/x",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc",
        "group1": "ab",
        "group2": "ab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*? ( (a(*THEN)b) ) c/x",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*? (?:a(*THEN)b) c/x",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*? (?:a(*THEN)b|(*F)) c/x",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*? (?: (?:a(*THEN)b) | (*F) ) c/x",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*? (?: (?:a(*THEN)b) ) c/x",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*? (?>a(*THEN)b) c/x",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*? (?>a(*THEN)b|(*F)) c/x",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*? (?> (?>a(*THEN)b) | (*F) ) c/x",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*? (?> (?>a(*THEN)b) ) c/x",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*? (a(*THEN)b)++ c/x",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*? (a(*THEN)b|(*F))++ c/x",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*? ( (a(*THEN)b)++ | (*F) )++ c/x",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc",
        "group1": "ab",
        "group2": "ab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*? ( (a(*THEN)b)++ )++ c/x",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*? (?:a(*THEN)b)++ c/x",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*? (?:a(*THEN)b|(*F))++ c/x",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*? (?: (?:a(*THEN)b)++ | (*F) )++ c/x",
    "haystack": "aabc",
    "match": [
      {
        "match": "aabc"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*? (?: (?:a(*THEN)b)++ )++ c/x",
    "haystack": "aabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?=a(*THEN)b)ab|ac)/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*?(?(?=a)a|b(*THEN)c)/",
    "haystack": "ba",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*?(?:(?(?=a)a|b(*THEN)c)|d)/",
    "haystack": "ba",
    "match": [
      {
        "match": "ba"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^.*?(?(?=a)a(*THEN)b|c)/",
    "haystack": "ac",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^.*(?=a(*THEN)b)/",
    "haystack": "aabc",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a(*:m))/imsx",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>(a)(*:m))/imsx",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(*ACCEPT)b)c/",
    "haystack": "xacd",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(a(*COMMIT)b))c/",
    "haystack": "xabcd",
    "match": [
      {
        "match": "c",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=(a(*COMMIT)b))c/",
    "haystack": "xacd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!a(*FAIL)b)c/",
    "haystack": "xcd",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<!a(*FAIL)b)c/",
    "haystack": "acd",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(*:N)b)c/",
    "haystack": "xabcd",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(*PRUNE)b)c/",
    "haystack": "xabcd",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(*SKIP)b)c/",
    "haystack": "xabcd",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(*THEN)b)c/",
    "haystack": "xabcd",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)(?2){2}(.)/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd",
        "group1": "a",
        "group2": "d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(*MARK:A)(*PRUNE:B)(C|X)/",
    "haystack": "C",
    "match": [
      {
        "match": "C",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*MARK:A)(*PRUNE:B)(C|X)/",
    "haystack": "D",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(*MARK:A)(*PRUNE:B)(C|X)/",
    "haystack": "C",
    "match": [
      {
        "match": "C",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*MARK:A)(*PRUNE:B)(C|X)/",
    "haystack": "D",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(*MARK:A)(*THEN:B)(C|X)/",
    "haystack": "C",
    "match": [
      {
        "match": "C",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*MARK:A)(*THEN:B)(C|X)/",
    "haystack": "D",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})(*MARK:A)(*THEN:B)(C|X)/",
    "haystack": "C",
    "match": [
      {
        "match": "C",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(??{\"\"})(*MARK:A)(*THEN:B)(C|X)/",
    "haystack": "D",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(*MARK:A)(*THEN:B)(C|X)/",
    "haystack": "C",
    "match": [
      {
        "match": "C",
        "group1": "C"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*MARK:A)(*THEN:B)(C|X)/",
    "haystack": "D",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/A(*MARK:A)A+(*SKIP)(B|Z) | AC/x",
    "haystack": "AAAC",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/A(*MARK:A)A+(*MARK:B)(*SKIP:B)(B|Z) | AC/x",
    "haystack": "AAAC",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/A(*:A)A+(*SKIP)(B|Z) | AC/x",
    "haystack": "AAAC",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/A(*MARK:A)A+(*SKIP:)(B|Z) | AC/x",
    "haystack": "AAAC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*:A)B|XX(*:B)Y/",
    "haystack": "AABC",
    "match": [
      {
        "match": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*:A)B|XX(*:B)Y/",
    "haystack": "XXYZ",
    "match": [
      {
        "match": "XXY"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/A(*:A)B|XX(*:B)Y/",
    "haystack": "XAQQ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*:A)B|XX(*:B)Y/",
    "haystack": "XAQQXZZ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*:A)B|XX(*:B)Y/",
    "haystack": "AXQQQ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*:A)B|XX(*:B)Y/",
    "haystack": "AXXQQQ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(A(*THEN:A)B|C(*THEN:B)D)/",
    "haystack": "AB",
    "match": [
      {
        "match": "AB",
        "group1": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(A(*THEN:A)B|C(*THEN:B)D)/",
    "haystack": "CD",
    "match": [
      {
        "match": "CD",
        "group1": "CD"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(A(*THEN:A)B|C(*THEN:B)D)/",
    "haystack": "AC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(A(*THEN:A)B|C(*THEN:B)D)/",
    "haystack": "CB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(A(*PRUNE:A)B|C(*PRUNE:B)D)/",
    "haystack": "AB",
    "match": [
      {
        "match": "AB",
        "group1": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(A(*PRUNE:A)B|C(*PRUNE:B)D)/",
    "haystack": "CD",
    "match": [
      {
        "match": "CD",
        "group1": "CD"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(A(*PRUNE:A)B|C(*PRUNE:B)D)/",
    "haystack": "AC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(A(*PRUNE:A)B|C(*PRUNE:B)D)/",
    "haystack": "CB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(A(*PRUNE:)B|C(*PRUNE:B)D)/",
    "haystack": "AB",
    "match": [
      {
        "match": "AB",
        "group1": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(A(*PRUNE:)B|C(*PRUNE:B)D)/",
    "haystack": "CD",
    "match": [
      {
        "match": "CD",
        "group1": "CD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*PRUNE:A)B/",
    "haystack": "ACAB",
    "match": [
      {
        "match": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*:A)B|X(*:A)Y/",
    "haystack": "AABC",
    "match": [
      {
        "match": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*:A)B|X(*:A)Y/",
    "haystack": "XXYZ",
    "match": [
      {
        "match": "XY"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/b(*:m)f|a(*:n)w/",
    "haystack": "aw",
    "match": [
      {
        "match": "aw"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/b(*:m)f|a(*:n)w/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/b(*:m)f|aw/",
    "haystack": "abaw",
    "match": [
      {
        "match": "aw"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/b(*:m)f|aw/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/b(*:m)f|aw/",
    "haystack": "abax",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*MARK:A)A+(*SKIP:B)(B|Z) | AAC/x",
    "haystack": "AAAC",
    "match": [
      {
        "match": "AAC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(*MARK:A)b)..x/",
    "haystack": "abxy",
    "match": [
      {
        "match": "abx"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=a(*MARK:A)b)..x/",
    "haystack": "abpq",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(*MARK:A)b)..(*:Y)x/",
    "haystack": "abxy",
    "match": [
      {
        "match": "abx"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=a(*MARK:A)b)..(*:Y)x/",
    "haystack": "abpq",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(*PRUNE:A)b)..x/",
    "haystack": "abxy",
    "match": [
      {
        "match": "abx"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=a(*PRUNE:A)b)..x/",
    "haystack": "abpq",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(*PRUNE:A)b)..(*:Y)x/",
    "haystack": "abxy",
    "match": [
      {
        "match": "abx"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=a(*PRUNE:A)b)..(*:Y)x/",
    "haystack": "abpq",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(*THEN:A)b)..x/",
    "haystack": "abxy",
    "match": [
      {
        "match": "abx"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=a(*THEN:A)b)..x/",
    "haystack": "abpq",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(*THEN:A)b)..(*:Y)x/",
    "haystack": "abxy",
    "match": [
      {
        "match": "abx"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=a(*THEN:A)b)..(*:Y)x/",
    "haystack": "abpq",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(another)?(\\1?)test/",
    "haystack": "hello world test",
    "match": [
      {
        "match": "test",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(another)?(\\1+)test/",
    "haystack": "hello world test",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(*COMMIT)b){0}a(?1)|aac/",
    "haystack": "aac",
    "match": [
      {
        "match": "aac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?:a?)*)*c/",
    "haystack": "aac",
    "match": [
      {
        "match": "aac",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?>a?)*)*c/",
    "haystack": "aac",
    "match": [
      {
        "match": "aac",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>.*?a)(?<=ba)/",
    "haystack": "aba",
    "match": [
      {
        "match": "ba"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:.*?a)(?<=ba)/",
    "haystack": "aba",
    "match": [
      {
        "match": "aba"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>.*?a)b/s",
    "haystack": "aab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>.*?a)b/",
    "haystack": "aab",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>^a)b/s",
    "haystack": "aab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>.*?)(?<=(abcd)|(wxyz))/",
    "haystack": "alphabetabcd",
    "match": [
      {
        "match": "",
        "group1": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>.*?)(?<=(abcd)|(wxyz))/",
    "haystack": "endingwxyz",
    "match": [
      {
        "match": "",
        "group2": "wxyz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>.*)(?<=(abcd)|(wxyz))/",
    "haystack": "alphabetabcd",
    "match": [
      {
        "match": "alphabetabcd",
        "group1": "abcd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>.*)(?<=(abcd)|(wxyz))/",
    "haystack": "endingwxyz",
    "match": [
      {
        "match": "endingwxyz",
        "group2": "wxyz"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>.*)foo/",
    "haystack": "abcdfooxyz",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>.*?)foo/",
    "haystack": "abcdfooxyz",
    "match": [
      {
        "match": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(a(*PRUNE)b)){0}(?:(?1)|ac)/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(a(*SKIP)b)){0}(?:(?1)|ac)/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=(*SKIP)ac)a/",
    "haystack": "aa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*MARK:A)A+(*SKIP:B)(B|Z) | AC/x",
    "haystack": "AAAC",
    "match": [
      {
        "match": "AC"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(*SKIP:m)x|ac(*:n)(*SKIP:n)d|ac/",
    "haystack": "acacd",
    "match": [
      {
        "match": "acd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A(*SKIP:m)x|A(*SKIP:n)x|AB/",
    "haystack": "AB",
    "match": [
      {
        "match": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((*SKIP:r)d){0}a(*SKIP:m)x|ac(*:n)|ac/",
    "haystack": "acacd",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*PRUNE)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "aaaac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*SKIP)(*PRUNE)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "aaaac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*SKIP:N)(*PRUNE)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "aaaac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaa(*:N)a(*SKIP:N)(*PRUNE)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "aaaac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*THEN)(*PRUNE)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "aaaac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*SKIP)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*PRUNE)(*SKIP)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*THEN)(*SKIP)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*COMMIT)(*SKIP)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/aaaaa(*COMMIT)b|a+c/",
    "haystack": "aaaaaac",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*THEN)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "aaaaaac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*SKIP)(*THEN)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "aaaaaac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*PRUNE)(*THEN)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "aaaaaac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*COMMIT)(*THEN)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "aaaaaac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*:m)(*PRUNE:m)(*SKIP:m)m|a+/",
    "haystack": "aaaaaa",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*:m)(*MARK:m)(*PRUNE)(*SKIP:m)m|a+/",
    "haystack": "aaaaaa",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*:n)(*PRUNE:m)(*SKIP:m)m|a+/",
    "haystack": "aaaaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaaaa(*:n)(*MARK:m)(*PRUNE)(*SKIP:m)m|a+/",
    "haystack": "aaaaaa",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(*MARK:A)aa(*PRUNE:A)a(*SKIP:A)b|a+c/",
    "haystack": "aaaac",
    "match": [
      {
        "match": "aac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(*MARK:A)aa(*MARK:A)a(*SKIP:A)b|a+c/",
    "haystack": "aaaac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaa(*PRUNE:A)a(*SKIP:A)b|a+c/",
    "haystack": "aaaac",
    "match": [
      {
        "match": "aac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/aaa(*MARK:A)a(*SKIP:A)b|a+c/",
    "haystack": "aaaac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(*:m)a(*COMMIT)(*SKIP:m)b|a+c/",
    "haystack": "aaaaaac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/.?(a|b(*THEN)c)/",
    "haystack": "ba",
    "match": [
      {
        "match": "ba",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a(*COMMIT)b)c|abd/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(a(*COMMIT)b)c|abd/",
    "haystack": "abd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(*COMMIT)b)abc|abd/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a(*COMMIT)b)abc|abd/",
    "haystack": "abd",
    "match": [
      {
        "match": "abd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a(*COMMIT)b)c|abd/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a(*COMMIT)b)c|abd/",
    "haystack": "abd",
    "match": [
      {
        "match": "abd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?=b(*COMMIT)c)[^d]|abd/",
    "haystack": "abc",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a(?=b(*COMMIT)c)[^d]|abd/",
    "haystack": "abd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?=bc).|abd/",
    "haystack": "abd",
    "match": [
      {
        "match": "abd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?=bc).|abd/",
    "haystack": "abc",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a(?>b(*COMMIT)c)d|abd/",
    "haystack": "abceabd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?>bc)d|abd/",
    "haystack": "abceabd",
    "match": [
      {
        "match": "abd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a(*COMMIT)b)c|abd/",
    "haystack": "abd",
    "match": [
      {
        "match": "abd"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?>a(*COMMIT)c)d|abd/",
    "haystack": "abd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/((?=a(*COMMIT)b)ab|ac){0}(?:(?1)|a(c))/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac",
        "group2": "c"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(a)?(?(1)a|b)+$/",
    "haystack": "a",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/A(*PRUNE:A)A+(*SKIP:A)(B|Z) | AC/x",
    "haystack": "AAAC",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^((abc|abcx)(*THEN)y|abcd)/",
    "haystack": "abcd",
    "match": [
      {
        "match": "abcd",
        "group1": "abcd"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^((abc|abcx)(*THEN)y|abcd)/",
    "haystack": "abcxy",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/^((yes|no)(*THEN)(*F))?/",
    "haystack": "yes",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   C? (*THEN)  | A D) (*FAIL)/x",
    "haystack": "AbcdCBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   C? (*THEN)  | A D) z/x",
    "haystack": "AbcdCBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   C? (*THEN)  | A D) \\s* (*FAIL)/x",
    "haystack": "AbcdCBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   C? (*THEN)  | A D) \\s* z/x",
    "haystack": "AbcdCBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   (?:C|) (*THEN)  | A D) (*FAIL)/x",
    "haystack": "AbcdCBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   (?:C|) (*THEN)  | A D) z/x",
    "haystack": "AbcdCBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   C{0,6} (*THEN)  | A D) (*FAIL)/x",
    "haystack": "AbcdCBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   C{0,6} (*THEN)  | A D) z/x",
    "haystack": "AbcdCBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   (CE){0,6} (*THEN)  | A D) (*FAIL)/x",
    "haystack": "AbcdCEBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   (CE){0,6} (*THEN)  | A D) z/x",
    "haystack": "AbcdCEBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   (CE*){0,6} (*THEN)  | A D) (*FAIL)/x",
    "haystack": "AbcdCBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(A (.*)   (CE*){0,6} (*THEN)  | A D) z/x",
    "haystack": "AbcdCBefgBhiBqz",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=a(*COMMIT)b|ac)ac|ac/",
    "haystack": "ac",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=a(*COMMIT)b|(ac)) ac | (a)c/x",
    "haystack": "ac",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?!b(*THEN)a)bn|bnn)/",
    "haystack": "bnn",
    "match": [
      {
        "match": "bn"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!b(*SKIP)a)bn|bnn/",
    "haystack": "bnn",
    "match": [
      {
        "match": "bn"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?!b(*SKIP)a)bn|bnn)/",
    "haystack": "bnn",
    "match": [
      {
        "match": "bn"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!b(*PRUNE)a)bn|bnn/",
    "haystack": "bnn",
    "match": [
      {
        "match": "bn"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?!b(*PRUNE)a)bn|bnn)/",
    "haystack": "bnn",
    "match": [
      {
        "match": "bn"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!b(*COMMIT)a)bn|bnn/",
    "haystack": "bnn",
    "match": [
      {
        "match": "bn"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?!b(*COMMIT)a)bn|bnn)/",
    "haystack": "bnn",
    "match": [
      {
        "match": "bn"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?=b(*SKIP)a)bn|bnn/",
    "haystack": "bnn",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=b(*THEN)a)bn|bnn/",
    "haystack": "bnn",
    "match": [
      {
        "match": "bnn"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!a(*SKIP)b)/",
    "haystack": "ac",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!a(*SKIP)b)../",
    "haystack": "acd",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!a(*SKIP)b)../",
    "haystack": "acd",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?!a(*SKIP)b))/",
    "haystack": "ac",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?!a(*PRUNE)b)../",
    "haystack": "acd",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!a(*PRUNE)b)../",
    "haystack": "acd",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!a(*COMMIT)b)ac|cd/",
    "haystack": "ac",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A.*?(?:a|bc)/",
    "haystack": "ba",
    "match": [
      {
        "match": "ba"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(A(*THEN)B|C(*THEN)D)/",
    "haystack": "CD",
    "match": [
      {
        "match": "CD",
        "group1": "CD"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(*:m(m)(?&y)(?(DEFINE)(?<y>b))/",
    "haystack": "abc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(*PRUNE:m(m)(?&y)(?(DEFINE)(?<y>b))/",
    "haystack": "abc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(*SKIP:m(m)(?&y)(?(DEFINE)(?<y>b))/",
    "haystack": "abc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(*THEN:m(m)(?&y)(?(DEFINE)(?<y>b))/",
    "haystack": "abc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\d*\\w{4}/",
    "haystack": "1234",
    "match": [
      {
        "match": "1234"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^\\d*\\w{4}/",
    "haystack": "123",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^b]*\\w{4}/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[^b]*\\w{4}/",
    "haystack": "aaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^[^b]*\\w{4}/i",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^[^b]*\\w{4}/i",
    "haystack": "aaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*\\w{4}/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^a*\\w{4}/",
    "haystack": "aaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^a*\\w{4}/i",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^a*\\w{4}/i",
    "haystack": "aaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?<n>foo)|(?<n>bar))\\k<n>/",
    "haystack": "foofoo",
    "match": [
      {
        "match": "foofoo",
        "group1": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:(?<n>foo)|(?<n>bar))\\k<n>/",
    "haystack": "barbar",
    "match": [
      {
        "match": "barbar",
        "group2": "bar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<n>A)(?:(?<n>foo)|(?<n>bar))\\k<n>/",
    "haystack": "AfooA",
    "match": [
      {
        "match": "AfooA",
        "group1": "A",
        "group2": "foo"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<n>A)(?:(?<n>foo)|(?<n>bar))\\k<n>/",
    "haystack": "AbarA",
    "match": [
      {
        "match": "AbarA",
        "group1": "A",
        "group3": "bar"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<n>A)(?:(?<n>foo)|(?<n>bar))\\k<n>/",
    "haystack": "Afoofoo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<n>A)(?:(?<n>foo)|(?<n>bar))\\k<n>/",
    "haystack": "Abarbar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$/",
    "haystack": "1 IN SOA non-sp1 non-sp2(",
    "match": [
      {
        "match": "1 IN SOA non-sp1 non-sp2(",
        "group1": "1",
        "group2": "non-sp1",
        "group3": "non-sp2"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^ (?:(?<A>A)|(?'B'B)(?<A>A)) (?('A')x) (?(<B>)y)$/x",
    "haystack": "Ax",
    "match": [
      {
        "match": "Ax",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^ (?:(?<A>A)|(?'B'B)(?<A>A)) (?('A')x) (?(<B>)y)$/x",
    "haystack": "BAxy",
    "match": [
      {
        "match": "BAxy",
        "group2": "B",
        "group3": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^A\\xZ/",
    "haystack": "A\\0Z",
    "match": [
      {
        "match": "A\\x00Z"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^A\\o{123}B/",
    "haystack": "A\\123B",
    "match": [
      {
        "match": "ASB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ ^ a + + b $ /x",
    "haystack": "aaaab",
    "match": [
      {
        "match": "aaaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ ^ a + #comment\n  + b $ /x",
    "haystack": "aaaab",
    "match": [
      {
        "match": "aaaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ ^ a + #comment\n  #comment\n  + b $ /x",
    "haystack": "aaaab",
    "match": [
      {
        "match": "aaaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ ^ (?> a + ) b $ /x",
    "haystack": "aaaab",
    "match": [
      {
        "match": "aaaab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/ ^ ( a + ) + + \\w $ /x",
    "haystack": "aaaab",
    "match": [
      {
        "match": "aaaab",
        "group1": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:a\\Kb)*+/",
    "haystack": "ababc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>a\\Kb)*/",
    "haystack": "ababc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:a\\Kb)*/",
    "haystack": "ababc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a\\Kb)*+/",
    "haystack": "ababc",
    "match": [
      {
        "match": "b",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a\\Kb)*/",
    "haystack": "ababc",
    "match": [
      {
        "match": "b",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?:x|(?:(xx|yy)+|x|x|x|x|x)|a|a|a)bc/",
    "haystack": "acb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A(?:[^\\\"]++|\\\"(?:[^\\\"]*+|\\\"\\\")*+\\\")++/",
    "haystack": "NON QUOTED \\\"QUOT\\\"\\\"ED\\\" AFTER \\\"NOT MATCHED",
    "match": [
      {
        "match": "NON QUOTED \"QUOT\"\"ED\" AFTER "
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A(?:[^\\\"]++|\\\"(?:[^\\\"]++|\\\"\\\")*+\\\")++/",
    "haystack": "NON QUOTED \\\"QUOT\\\"\\\"ED\\\" AFTER \\\"NOT MATCHED",
    "match": [
      {
        "match": "NON QUOTED \"QUOT\"\"ED\" AFTER "
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A(?:[^\\\"]++|\\\"(?:[^\\\"]++|\\\"\\\")++\\\")++/",
    "haystack": "NON QUOTED \\\"QUOT\\\"\\\"ED\\\" AFTER \\\"NOT MATCHED",
    "match": [
      {
        "match": "NON QUOTED \"QUOT\"\"ED\" AFTER "
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\A([^\\\"1]++|[\\\"2]([^\\\"3]*+|[\\\"4][\\\"5])*+[\\\"6])++/",
    "haystack": "NON QUOTED \\\"QUOT\\\"\\\"ED\\\" AFTER \\\"NOT MATCHED",
    "match": [
      {
        "match": "NON QUOTED \"QUOT\"\"ED\" AFTER ",
        "group1": " AFTER ",
        "group2": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^\\w+(?>\\s*)(?<=\\w)/",
    "haystack": "test test",
    "match": [
      {
        "match": "tes"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<same>a)(?P<same>b)/g",
    "haystack": "abbaba",
    "match": [
      {
        "match": "ab",
        "group1": "a",
        "group2": "b"
      },
      {
        "match": "ab",
        "group1": "a",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<same>a)(?P<same>b)(?P=same)/g",
    "haystack": "abbaba",
    "match": [
      {
        "match": "aba",
        "group1": "a",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P=same)?(?P<same>a)(?P<same>b)/g",
    "haystack": "abbaba",
    "match": [
      {
        "match": "ab",
        "group1": "a",
        "group2": "b"
      },
      {
        "match": "ab",
        "group1": "a",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?:(?P=same)?(?:(?P=same)(?P<same>a)(?P=same)|(?P=same)?(?P<same>b)(?P=same)){2}(?P=same)(?P<same>c)(?P=same)){2}(?P<same>z)?/g",
    "haystack": "bbbaaaccccaaabbbcc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l/",
    "haystack": "acl",
    "match": [
      {
        "match": "acl",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l/",
    "haystack": "bdl",
    "match": [
      {
        "match": "bdl",
        "group2": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l/",
    "haystack": "adl",
    "match": [
      {
        "match": "dl"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l/",
    "haystack": "bcl",
    "match": [
      {
        "match": "l"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\sabc/",
    "haystack": "\\x{0b}abc",
    "match": [
      {
        "match": "\\x0babc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\Qa]\\E]+/",
    "haystack": "aa]]",
    "match": [
      {
        "match": "aa]]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[\\Q]a\\E]+/",
    "haystack": "aa]]",
    "match": [
      {
        "match": "aa]]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A((((((((a))))))))\\8B/",
    "haystack": "AaaB",
    "match": [
      {
        "match": "AaaB",
        "group1": "a",
        "group2": "a",
        "group3": "a",
        "group4": "a",
        "group5": "a",
        "group6": "a",
        "group7": "a",
        "group8": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A(((((((((a)))))))))\\9B/",
    "haystack": "AaaB",
    "match": [
      {
        "match": "AaaB",
        "group1": "a",
        "group2": "a",
        "group3": "a",
        "group4": "a",
        "group5": "a",
        "group6": "a",
        "group7": "a",
        "group8": "a",
        "group9": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A[\\8\\9]B/",
    "haystack": "A8B",
    "match": [
      {
        "match": "A8B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A[\\8\\9]B/",
    "haystack": "A9B",
    "match": [
      {
        "match": "A9B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(|ab)*?d/",
    "haystack": "abd",
    "match": [
      {
        "match": "abd",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(|ab)*?d/",
    "haystack": "xyd",
    "match": [
      {
        "match": "d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:((abcd))|(((?:(?:(?:(?:abc|(?:abcdef))))b)abcdefghi)abc)|((*ACCEPT)))/",
    "haystack": "1234abcd",
    "match": [
      {
        "match": "",
        "group5": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(\\2|a)(\\1)/",
    "haystack": "aaa",
    "match": [
      {
        "match": "aa",
        "group1": "a",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?1)(?#?'){8}(a)/",
    "haystack": "baaaaaaaaac",
    "match": [
      {
        "match": "aaaaaaaaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((((((((((((x))))))))))))\\12/",
    "haystack": "xx",
    "match": [
      {
        "match": "xx",
        "group1": "x",
        "group2": "x",
        "group3": "x",
        "group4": "x",
        "group5": "x",
        "group6": "x",
        "group7": "x",
        "group8": "x",
        "group9": "x",
        "group10": "x",
        "group11": "x",
        "group12": "x"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A[\\8]B[\\9]C/",
    "haystack": "A8B9C",
    "match": [
      {
        "match": "A8B9C"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?1)()((((((\\1++))\\x85)+)|))/",
    "haystack": "\\x85\\x85",
    "match": [
      {
        "match": "\\x85\\x85",
        "group1": "",
        "group2": "\\x85\\x85",
        "group3": "\\x85\\x85",
        "group4": "\\x85\\x85",
        "group5": "\\x85",
        "group6": "",
        "group7": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(\\k'Pm')|(?'Pm'))/",
    "haystack": "abcd",
    "match": [
      {
        "match": "",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(aaa)|(b))\\g{1}/",
    "haystack": "aaaaaa",
    "match": [
      {
        "match": "aaaaaa",
        "group1": "aaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(aaa)|(b))\\g{1}/",
    "haystack": "bb",
    "match": [
      {
        "match": "bb",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(aaa)|(b))(?1)/",
    "haystack": "aaaaaa",
    "match": [
      {
        "match": "aaaaaa",
        "group1": "aaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(aaa)|(b))(?1)/",
    "haystack": "baaa",
    "match": [
      {
        "match": "baaa",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?|(aaa)|(b))(?1)/",
    "haystack": "bb",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(aaa)|(b))/",
    "haystack": "xaaa",
    "match": [
      {
        "match": "aaa",
        "group1": "aaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(aaa)|(b))/",
    "haystack": "xbc",
    "match": [
      {
        "match": "b",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(?'a'aaa)|(?'a'b))\\k'a'/",
    "haystack": "aaaaaa",
    "match": [
      {
        "match": "aaaaaa",
        "group1": "aaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(?'a'aaa)|(?'a'b))\\k'a'/",
    "haystack": "bb",
    "match": [
      {
        "match": "bb",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(?'a'aaa)|(?'a'b))(?'a'cccc)\\k'a'/",
    "haystack": "aaaccccaaa",
    "match": [
      {
        "match": "aaaccccaaa",
        "group1": "aaa",
        "group2": "cccc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?|(?'a'aaa)|(?'a'b))(?'a'cccc)\\k'a'/",
    "haystack": "bccccb",
    "match": [
      {
        "match": "bccccb",
        "group1": "b",
        "group2": "cccc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/x (*MARK:ab cd # comment\nef) x/x",
    "haystack": "axxz",
    "match": [
      {
        "match": "xx"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(B){0}c)X/",
    "haystack": "acX",
    "match": [
      {
        "match": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<DEFINE>b)(?(DEFINE)(a+))(?&DEFINE)/",
    "haystack": "bbbb",
    "match": [
      {
        "match": "bb",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<DEFINE>b)(?(DEFINE)(a+))(?&DEFINE)/",
    "haystack": "baaab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[,;:])(?=.{8,16})(?!.*[\\s])/",
    "haystack": "\\   Fred:099",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=.*X)X$/",
    "haystack": "\\  X",
    "match": [
      {
        "match": "X"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?s)(?=.*?)b/",
    "haystack": "aabc",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(Z)(a)\\2{1,2}?(?-i)\\1X/i",
    "haystack": "ZaAAZX",
    "match": [
      {
        "match": "ZaAAZX",
        "group1": "Z",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[s[:digit:]\\E-H]+/",
    "haystack": "s09-H",
    "match": [
      {
        "match": "s09-H"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[s[:digit:]\\Q\\E-H]+/",
    "haystack": "s09-H",
    "match": [
      {
        "match": "s09-H"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a+(?:|b)a/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?1)(A(*COMMIT)|B)D/",
    "haystack": "ABD",
    "match": [
      {
        "match": "ABD",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?1)(A(*COMMIT)|B)D/",
    "haystack": "XABD",
    "match": [
      {
        "match": "ABD",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?1)(A(*COMMIT)|B)D/",
    "haystack": "BAD",
    "match": [
      {
        "match": "BAD",
        "group1": "A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?1)(A(*COMMIT)|B)D/",
    "haystack": "ABXABD",
    "match": [
      {
        "match": "ABD",
        "group1": "B"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?1)(A(*COMMIT)|B)D/",
    "haystack": "ABX",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)(?<m> 1? (?=(?<cond>2)?) 1 2 (?('cond')|3)))\n    \\A\n    ()\n    (?&m)\n    \\Z/x",
    "haystack": "123",
    "match": [
      {
        "match": "123",
        "group3": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?:\n(?: A| (1? (?=(?<cond>2)?) (1) 2 (?('cond')|3)) )\n(Z)\n)+$/x",
    "haystack": "AZ123Z",
    "match": [
      {
        "match": "AZ123Z",
        "group1": "123",
        "group3": "1",
        "group4": "Z"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?:\n(?: A| (1? (?=(?<cond>2)?) (1) 2 (?('cond')|3)) )\n(Z)\n)+$/x",
    "haystack": "AZ12Z",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^ (?(DEFINE) ( (?!(a)\\2b)..) )   ()(?1)  /x",
    "haystack": "acb",
    "match": [
      {
        "match": "ac",
        "group3": ""
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^ (?(DEFINE) ( (?!(a)\\2b)..) )   ()(?1)  /x",
    "haystack": "aab",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>ab|abab){1,5}?M/",
    "haystack": "abababababababababababM",
    "match": [
      {
        "match": "abababababM"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?>ab|abab){2}?M/",
    "haystack": "abababM",
    "match": [
      {
        "match": "ababM"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?(?=(a))a)+k)/",
    "haystack": "bbak",
    "match": [
      {
        "match": "ak",
        "group1": "ak",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/((?(?=(a))a|)+k)/",
    "haystack": "bbak",
    "match": [
      {
        "match": "ak",
        "group1": "ak",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(?!(b))a|b)+k/",
    "haystack": "ababbalbbadabak",
    "match": [
      {
        "match": "abak",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!(b))c|b/",
    "haystack": "Ab",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?!(b))c|b/",
    "haystack": "Ac",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=(b))b|c/",
    "haystack": "Ab",
    "match": [
      {
        "match": "b",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=(b))b|c/",
    "haystack": "Ac",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(.|(.)(?1)\\2)$/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(.|(.)(?1)\\2)$/",
    "haystack": "aba",
    "match": [
      {
        "match": "aba",
        "group1": "aba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(.|(.)(?1)\\2)$/",
    "haystack": "abcba",
    "match": [
      {
        "match": "abcba",
        "group1": "abcba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(.|(.)(?1)\\2)$/",
    "haystack": "ababa",
    "match": [
      {
        "match": "ababa",
        "group1": "ababa",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(.|(.)(?1)\\2)$/",
    "haystack": "abcdcba",
    "match": [
      {
        "match": "abcdcba",
        "group1": "abcdcba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.?)$/",
    "haystack": "a",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.?)$/",
    "haystack": "aba",
    "match": [
      {
        "match": "aba",
        "group1": "aba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.?)$/",
    "haystack": "abba",
    "match": [
      {
        "match": "abba",
        "group1": "abba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.?)$/",
    "haystack": "abcba",
    "match": [
      {
        "match": "abcba",
        "group1": "abcba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.?)$/",
    "haystack": "ababa",
    "match": [
      {
        "match": "ababa",
        "group1": "ababa",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.?)$/",
    "haystack": "abccba",
    "match": [
      {
        "match": "abccba",
        "group1": "abccba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.?)$/",
    "haystack": "abcdcba",
    "match": [
      {
        "match": "abcdcba",
        "group1": "abcdcba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((.)(?1)\\2|.?)$/",
    "haystack": "abcddcba",
    "match": [
      {
        "match": "abcddcba",
        "group1": "abcddcba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(.)(\\1|a(?2))/",
    "haystack": "bab",
    "match": [
      {
        "match": "bab",
        "group1": "b",
        "group2": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(.|(.)(?1)?\\2)$/",
    "haystack": "abcba",
    "match": [
      {
        "match": "abcba",
        "group1": "abcba",
        "group2": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?=(a))abc|def)/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?!(a))def|abc)/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?=(a)(*ACCEPT))abc|def)/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?(?!(a)(*ACCEPT))def|abc)/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?1)\\d{3}(a)/",
    "haystack": "a123a",
    "match": [
      {
        "match": "a123a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/<(?x:[a b])>/xx",
    "haystack": "< >",
    "match": [
      {
        "match": "< >"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/<(?:[a b])>/xx",
    "haystack": "< >",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/<(?xxx:[a b])>/",
    "haystack": "< >",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/<(?-x:[a b])>/xx",
    "haystack": "< >",
    "match": [
      {
        "match": "< >"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/[[:digit:]-]+/",
    "haystack": "12-24",
    "match": [
      {
        "match": "12-24"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)(?<optional_a>a?)X)^(?&optional_a)a$/",
    "haystack": "aa",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)(?<optional_a>a?)X)^(?&optional_a)a$/",
    "haystack": "a",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)b(?1)a/",
    "haystack": "abaa",
    "match": [
      {
        "match": "abaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)b(?1)a/",
    "haystack": "aba",
    "match": [
      {
        "match": "aba",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)b(?1)a/",
    "haystack": "baa",
    "match": [
      {
        "match": "baa",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)b(?1)a/",
    "haystack": "ba",
    "match": [
      {
        "match": "ba",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)+b(?1)a/",
    "haystack": "abaa",
    "match": [
      {
        "match": "abaa",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)+b(?1)a/",
    "haystack": "aba",
    "match": [
      {
        "match": "aba",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)+b(?1)a/",
    "haystack": "baa",
    "match": [
      {
        "match": "baa",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)+b(?1)a/",
    "haystack": "ba",
    "match": [
      {
        "match": "ba",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)++b(?1)a/",
    "haystack": "abaa",
    "match": [
      {
        "match": "abaa",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)++b(?1)a/",
    "haystack": "aba",
    "match": [
      {
        "match": "aba",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)++b(?1)a/",
    "haystack": "baa",
    "match": [
      {
        "match": "baa",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)++b(?1)a/",
    "haystack": "ba",
    "match": [
      {
        "match": "ba",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)+b/",
    "haystack": "b",
    "match": [
      {
        "match": "b",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)+b/",
    "haystack": "ab",
    "match": [
      {
        "match": "ab",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a?)+b/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab",
        "group1": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?=a+)a(a+)++b/",
    "haystack": "aab",
    "match": [
      {
        "match": "aab",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=\\G.)/g",
    "haystack": "abc",
    "match": [
      {
        "match": ""
      },
      {
        "match": ""
      },
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?=.(*:X))(*SKIP:X)(*F)|(.)/",
    "haystack": "abc",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?>(*:X))(*SKIP:X)(*F)|(.)/",
    "haystack": "abc",
    "match": [
      {
        "match": "a",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?:(*:X))(*SKIP:X)(*F)|(.)/",
    "haystack": "abc",
    "match": [
      {
        "match": "b",
        "group1": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})(?>a(*:1))(?>b(*:1))(*SKIP:1)x|.*/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})(?>a(*:1))(?>b)(*SKIP:1)x|.*/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})a(*ACCEPT:X)b/",
    "haystack": "abc",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})(?=a(*ACCEPT:QQ)bc)axyz/",
    "haystack": "axyz",
    "match": [
      {
        "match": "axyz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})(?(DEFINE)(a(*ACCEPT:X)))(?1)b/",
    "haystack": "abc",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})a(*F:X)b/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})(?(DEFINE)(a(*F:X)))(?1)b/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})a(*COMMIT:X)b/",
    "haystack": "abc",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})(?(DEFINE)(a(*COMMIT:X)))(?1)b/",
    "haystack": "abc",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})a+(*:Z)b(*COMMIT:X)(*SKIP:Z)c|.*/",
    "haystack": "aaaabd",
    "match": [
      {
        "match": "bd"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})a+(*:Z)b(*COMMIT:X)(*SKIP:X)c|.*/",
    "haystack": "aaaabd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(??{\"\"})a(*COMMIT:X)b/",
    "haystack": "axabc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i)A(?^)B(?^x:C D)(?^i)e f/",
    "haystack": "aBCDE F",
    "match": [
      {
        "match": "aBCDE F"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?i)A(?^)B(?^x:C D)(?^i)e f/",
    "haystack": "aBCDEF",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?i)A(?^)B(?^x:C D)(?^i)e f/",
    "haystack": "AbCDe f",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(*pla:foo).{6}/",
    "haystack": "abcfoobarxyz",
    "match": [
      {
        "match": "foobar"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*pla:foo).{6}/",
    "haystack": "abcfooba",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(*positive_lookahead:foo).{6}/",
    "haystack": "abcfoobarxyz",
    "match": [
      {
        "match": "foobar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*pla:foo).{6}|a..)/",
    "haystack": "foobarbaz",
    "match": [
      {
        "match": "foobar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*pla:foo).{6}|a..)/",
    "haystack": "abcfoobar",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*positive_lookahead:foo).{6}|a..)/",
    "haystack": "foobarbaz",
    "match": [
      {
        "match": "foobar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*positive_lookahead:foo).{6}|a..)/",
    "haystack": "abcfoobar",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(*plb:foo)bar/",
    "haystack": "abcfoobar",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*plb:foo)bar/",
    "haystack": "abcbarfoo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(*positive_lookbehind:foo)bar/",
    "haystack": "abcfoobar",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*positive_lookbehind:foo)bar/",
    "haystack": "abcbarfoo",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*plb:foo)bar|baz)/",
    "haystack": "abcfoobar",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*plb:foo)bar|baz)/",
    "haystack": "bazfoobar",
    "match": [
      {
        "match": "baz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*plb:foo)bar|baz)/",
    "haystack": "abcbazfoobar",
    "match": [
      {
        "match": "baz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*plb:foo)bar|baz)/",
    "haystack": "foobazfoobar",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*positive_lookbehind:foo)bar|baz)/",
    "haystack": "abcfoobar",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*positive_lookbehind:foo)bar|baz)/",
    "haystack": "bazfoobar",
    "match": [
      {
        "match": "baz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*positive_lookbehind:foo)bar|baz)/",
    "haystack": "abcbazfoobar",
    "match": [
      {
        "match": "baz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*positive_lookbehind:foo)bar|baz)/",
    "haystack": "foobazfoobar",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(*nlb:foo)bar/",
    "haystack": "abcbarfoo",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*nlb:foo)bar/",
    "haystack": "abcfoobar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(*negative_lookbehind:foo)bar/",
    "haystack": "abcbarfoo",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*negative_lookbehind:foo)bar/",
    "haystack": "abcfoobar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*nlb:foo)bar|baz)/",
    "haystack": "abcfoobaz",
    "match": [
      {
        "match": "baz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*nlb:foo)bar|baz)/",
    "haystack": "abcbarbaz",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?(*nlb:foo)bar|baz)/",
    "haystack": "abcfoobar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*negative_lookbehind:foo)bar|baz)/",
    "haystack": "abcfoobaz",
    "match": [
      {
        "match": "baz"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(*negative_lookbehind:foo)bar|baz)/",
    "haystack": "abcbarbaz",
    "match": [
      {
        "match": "bar"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?(*negative_lookbehind:foo)bar|baz)/",
    "haystack": "abcfoobar",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(*atomic:a+)\\w/",
    "haystack": "aaab",
    "match": [
      {
        "match": "aaab"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(*atomic:a+)\\w/",
    "haystack": "aaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/   (?<word> \\w+ )*    \\.   /xi ",
    "haystack": "pokus.",
    "match": [
      {
        "match": "pokus.",
        "group1": "pokus"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE) (?<word> \\w+ ) ) (?&word)*   \\./xi ",
    "haystack": "pokus.",
    "match": [
      {
        "match": "pokus."
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE) (?<word> \\w+ ) ) ( (?&word)* )   \\./xi ",
    "haystack": "pokus.",
    "match": [
      {
        "match": "pokus.",
        "group2": "pokus"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?&word)*  (?(DEFINE) (?<word> \\w+ ) )  \\./xi ",
    "haystack": "pokus.",
    "match": [
      {
        "match": "pokus."
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?&word)*  \\. (?<word> \\w+ )/xi ",
    "haystack": "pokus.hokus",
    "match": [
      {
        "match": "pokus.hokus",
        "group1": "hokus"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?(?=(*:2)b).)/ ",
    "haystack": "abc",
    "match": [
      {
        "match": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?(?=(*:2)b).)/ ",
    "haystack": "acb",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?(?!(*:2)b).)/ ",
    "haystack": "acb",
    "match": [
      {
        "match": "ac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a(?(?!(*:2)b).)/ ",
    "haystack": "abc",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/(?:a|ab){1}+c/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(a|ab){1}+c/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(a+){1}+a/",
    "haystack": "aaaa",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)(a|ab))(?1){1}+c/",
    "haystack": "abc",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:a|(?=b)|.)*\\z/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?:a|(?=b)|.)*/",
    "haystack": "abc",
    "match": [
      {
        "match": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(*SKIP)x)|c/",
    "haystack": "abcd",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=a(*SKIP)x)|d/",
    "haystack": "abcd",
    "match": [
      {
        "match": "d"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(?=.(?<=x)))/ ",
    "haystack": "abx",
    "match": [
      {
        "match": ""
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=(?=(?<=a)))b/",
    "haystack": "ab",
    "match": [
      {
        "match": "b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?<A>a)(?(<A>)b)((?<=b).*)$/",
    "haystack": "abc",
    "match": [
      {
        "match": "abc",
        "group1": "a",
        "group2": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaa",
    "match": [
      {
        "match": "aaaa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(a\\1?){4}$/",
    "haystack": "aaaaaa",
    "match": [
      {
        "match": "aaaaaa",
        "group1": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^((\\1+)|\\d)+133X$/",
    "haystack": "111133X",
    "match": [
      {
        "match": "111133X",
        "group1": "11",
        "group2": "11"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>.*?([A-Z])(?!.*\\1)){26}/i ",
    "haystack": "The quick brown fox jumps over the lazy dog.",
    "match": [
      {
        "match": "The quick brown fox jumps over the lazy dog",
        "group1": "g"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>.*?([A-Z])(?!.*\\1)){26}/i ",
    "haystack": "Jackdaws love my big sphinx of quartz.",
    "match": [
      {
        "match": "Jackdaws love my big sphinx of quartz",
        "group1": "z"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>.*?([A-Z])(?!.*\\1)){26}/i ",
    "haystack": "Pack my box with five dozen liquor jugs.",
    "match": [
      {
        "match": "Pack my box with five dozen liquor jugs",
        "group1": "s"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/^(?>.*?([A-Z])(?!.*\\1)){26}/i ",
    "haystack": "The quick brown fox jumps over the lazy cat.",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>.*?([A-Z])(?!.*\\1)){26}/i ",
    "haystack": "Hackdaws love my big sphinx of quartz.",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/^(?>.*?([A-Z])(?!.*\\1)){26}/i ",
    "haystack": "Pack my fox with five dozen liquor jugs.",
    "noMatch": true
  },
  {
    "matchExpected": 0,
    "pattern": "/(?<=X(?(DEFINE)(A)))X(*F)/",
    "haystack": "AXYZ",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=X(?(DEFINE)(A)))./",
    "haystack": "AXYZ",
    "match": [
      {
        "match": "Y"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=X(?(DEFINE)(.*))Y)./",
    "haystack": "AXYZ",
    "match": [
      {
        "match": "Z"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?<=X(?(DEFINE)(Y))(?1))./",
    "haystack": "AXYZ",
    "match": [
      {
        "match": "Z"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?(DEFINE)(?<foo>bar))(?<![-a-z0-9])word/",
    "haystack": "word",
    "match": [
      {
        "match": "word"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{1,2,3}b/",
    "haystack": "a{1,2,3}b",
    "match": [
      {
        "match": "a{1,2,3}b"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/\\214748364/",
    "haystack": ">\\x{8c}748364<",
    "match": [
      {
        "match": "\\x8c748364"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{65536/",
    "haystack": ">a{65536<",
    "match": [
      {
        "match": "a{65536"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\K.(?0)*/",
    "haystack": "abac",
    "match": [
      {
        "match": "c"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a\\K.(?1)*)/",
    "haystack": "abac",
    "match": [
      {
        "match": "c",
        "group1": "abac"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{,3}B/",
    "haystack": "XBBB",
    "match": [
      {
        "match": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{,3}B/",
    "haystack": "XaBBB",
    "match": [
      {
        "match": "aB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{,3}B/",
    "haystack": "XaaBBB",
    "match": [
      {
        "match": "aaB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{,3}B/",
    "haystack": "XaaaBBB",
    "match": [
      {
        "match": "aaaB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{,3}B/",
    "haystack": "XaaaaBBB",
    "match": [
      {
        "match": "aaaB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{,}B/",
    "haystack": "Xa{,}BBB",
    "match": [
      {
        "match": "a{,}B"
      }
    ]
  },
  {
    "matchExpected": 0,
    "pattern": "/a{,}B/",
    "haystack": "XBBB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/a{,}B/",
    "haystack": "XaBBB",
    "noMatch": true
  },
  {
    "matchExpected": 1,
    "pattern": "/X{/",
    "haystack": "ZZX{}YY",
    "match": [
      {
        "match": "X{"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/X{A/",
    "haystack": "ZZX{ABC}",
    "match": [
      {
        "match": "X{A"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/X{}/",
    "haystack": "ZZX{}YZ",
    "match": [
      {
        "match": "X{}"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/X{1234/",
    "haystack": "ZZX{123456",
    "match": [
      {
        "match": "X{1234"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/X{12ABC}/",
    "haystack": "ZZX{12ABC}Y",
    "match": [
      {
        "match": "X{12ABC}"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/X{1,/",
    "haystack": "ZZX{1,...",
    "match": [
      {
        "match": "X{1,"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/X{,9/",
    "haystack": "ZZX{,9}abc",
    "match": [
      {
        "match": "X{,9"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/X{,9]/",
    "haystack": "ZZX{,9]..",
    "match": [
      {
        "match": "X{,9]"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(A)(?-1)(?+1)(B)/",
    "haystack": "xxAABBzz",
    "match": [
      {
        "match": "AABB",
        "group1": "A",
        "group2": "B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(A)(\\g{ -2 }B)/",
    "haystack": "XAABX",
    "match": [
      {
        "match": "AAB",
        "group1": "A",
        "group2": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(A)((?-2)B)/",
    "haystack": "XAABX",
    "match": [
      {
        "match": "AAB",
        "group1": "A",
        "group2": "AB"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a\\c\\X/",
    "haystack": "--a\\x1cX--",
    "match": [
      {
        "match": "a\\x1cX"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(a)\\g{ 1 }/",
    "haystack": "baab",
    "match": [
      {
        "match": "aa",
        "group1": "a"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{ 1,2 }/",
    "haystack": "Xaaaaa",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/a{ 1 , 2 }/",
    "haystack": "Xaaaaa",
    "match": [
      {
        "match": "aa"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/(?'name'ab)\\k{ name }(?P=name)/",
    "haystack": "XabababX",
    "match": [
      {
        "match": "ababab",
        "group1": "ab"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A{,}B/",
    "haystack": "A{,}B",
    "match": [
      {
        "match": "A{,}B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A{ , }B/",
    "haystack": "A{ , }B",
    "match": [
      {
        "match": "A{ , }B"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A{ ,3}/",
    "haystack": "AAAAAACC",
    "match": [
      {
        "match": "AAA"
      }
    ]
  },
  {
    "matchExpected": 1,
    "pattern": "/A{ 3, }/",
    "haystack": "BBAAAAAACC",
    "match": [
      {
        "match": "AAAAAA"
      }
    ]
  }
]
