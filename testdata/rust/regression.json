{
  "test": [
    {
      "compiles": false,
      "haystack": "",
      "matches": [],
      "name": "invalid-regex-no-crash-100",
      "regex": "(*)"
    },
    {
      "compiles": false,
      "haystack": "",
      "matches": [],
      "name": "invalid-regex-no-crash-200",
      "regex": "(?:?)"
    },
    {
      "compiles": false,
      "haystack": "",
      "matches": [],
      "name": "invalid-regex-no-crash-300",
      "regex": "(?)"
    },
    {
      "compiles": false,
      "haystack": "",
      "matches": [],
      "name": "invalid-regex-no-crash-400",
      "regex": "*"
    },
    {
      "haystack": "A_",
      "matches": [
        [
          0,
          2
        ]
      ],
      "name": "unsorted-binary-search-100",
      "regex": "(?i-u)[a_]+"
    },
    {
      "haystack": "a_",
      "matches": [
        [
          0,
          2
        ]
      ],
      "name": "unsorted-binary-search-200",
      "regex": "(?i-u)[A_]+"
    },
    {
      "haystack": "ΛΘΓΔα",
      "matches": [
        [
          0,
          10
        ]
      ],
      "name": "unicode-case-lower-nocase-flag",
      "regex": "(?i)\\p{Ll}+"
    },
    {
      "haystack": "x",
      "matches": [],
      "name": "negated-char-class-100",
      "regex": "(?i)[^x]"
    },
    {
      "haystack": "X",
      "matches": [],
      "name": "negated-char-class-200",
      "regex": "(?i)[^x]"
    },
    {
      "haystack": "_",
      "matches": [
        [
          0,
          1
        ]
      ],
      "name": "ascii-word-underscore",
      "regex": "[[:word:]]"
    },
    {
      "haystack": "abx",
      "matches": [
        [
          [
            0,
            3
          ],
          [
            1,
            2
          ],
          [
            2,
            3
          ]
        ]
      ],
      "name": "captures-repeat",
      "regex": "([a-f]){2}(?P<foo>[x-z])"
    },
    {
      "haystack": "az",
      "matches": [
        [
          0,
          1
        ],
        [
          2,
          2
        ]
      ],
      "name": "alt-in-alt-100",
      "regex": "ab?|$"
    },
    {
      "haystack": "ab\rcd",
      "matches": [
        [
          0,
          3
        ]
      ],
      "name": "alt-in-alt-200",
      "regex": "^(?:.*?)(?:\\n|\\r\\n?|$)"
    },
    {
      "haystack": "azb",
      "matches": [
        [
          0,
          3
        ]
      ],
      "name": "leftmost-first-prefix",
      "regex": "z*azb"
    },
    {
      "haystack": "int",
      "matches": [
        [
          0,
          3
        ]
      ],
      "name": "many-alternates",
      "regex": "1|2|3|4|5|6|7|8|9|10|int"
    },
    {
      "haystack": "Should this (work?)",
      "matches": [
        [
          0,
          0
        ],
        [
          6,
          6
        ],
        [
          7,
          7
        ],
        [
          11,
          11
        ],
        [
          13,
          13
        ],
        [
          17,
          17
        ]
      ],
      "name": "word-boundary-alone-100",
      "regex": "\\b"
    },
    {
      "haystack": "a b c",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          1
        ],
        [
          2,
          2
        ],
        [
          3,
          3
        ],
        [
          4,
          4
        ],
        [
          5,
          5
        ]
      ],
      "name": "word-boundary-alone-200",
      "regex": "\\b"
    },
    {
      "haystack": "𨼾",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          1
        ],
        [
          2,
          2
        ],
        [
          3,
          3
        ],
        [
          4,
          4
        ]
      ],
      "name": "word-boundary-ascii-no-capture",
      "regex": "\\B",
      "unicode": false,
      "utf8": false
    },
    {
      "haystack": "𨼾",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          1
        ],
        [
          2,
          2
        ],
        [
          3,
          3
        ],
        [
          4,
          4
        ]
      ],
      "name": "word-boundary-ascii-capture",
      "regex": "(?:\\B)",
      "unicode": false,
      "utf8": false
    },
    {
      "haystack": "ba",
      "matches": [
        [
          0,
          1
        ]
      ],
      "name": "partial-anchor",
      "regex": "^a|b"
    },
    {
      "haystack": "񠡎",
      "matches": [
        [
          4,
          4
        ]
      ],
      "name": "endl-or-word-boundary",
      "regex": "(?m:$)|(?-u:\\b)"
    },
    {
      "haystack": "󦠯",
      "matches": [
        [
          4,
          4
        ]
      ],
      "name": "zero-or-end",
      "regex": "(?i-u:\\x00)|$"
    },
    {
      "haystack": "򴌱",
      "matches": [
        [
          4,
          4
        ]
      ],
      "name": "y-or-endl",
      "regex": "(?i-u:y)|(?m:$)"
    },
    {
      "haystack": "X",
      "matches": [
        [
          0,
          1
        ]
      ],
      "name": "word-boundary-start-x",
      "regex": "(?u:\\b)^(?-u:X)"
    },
    {
      "haystack": "X",
      "matches": [
        [
          0,
          1
        ]
      ],
      "name": "word-boundary-ascii-start-x",
      "regex": "(?-u:\\b)^(?-u:X)"
    },
    {
      "haystack": "񜄤򵝬",
      "matches": [
        [
          8,
          8
        ]
      ],
      "name": "end-not-word-boundary",
      "regex": "$\\B",
      "unicode": false,
      "utf8": false
    },
    {
      "haystack": "yyyyya",
      "matches": [],
      "name": "partial-anchor-alternate-begin",
      "regex": "^a|z"
    },
    {
      "haystack": "ayyyyy",
      "matches": [],
      "name": "partial-anchor-alternate-end",
      "regex": "a$|z"
    },
    {
      "haystack": "CDAX",
      "matches": [
        [
          0,
          4
        ]
      ],
      "name": "lits-unambiguous-100",
      "regex": "(?:ABC|CDA|BC)X"
    },
    {
      "haystack": "CIMG2341",
      "matches": [
        [
          [
            0,
            8
          ],
          [
            0,
            4
          ],
          [],
          [
            0,
            4
          ],
          [
            4,
            8
          ]
        ]
      ],
      "name": "lits-unambiguous-200",
      "regex": "((IMG|CAM|MG|MB2)_|(DSCN|CIMG))(?P<n>[0-9]+)$"
    },
    {
      "compiles": true,
      "haystack": "",
      "matches": [],
      "name": "negated-full-byte-range",
      "regex": "[^\\x00-\\xFF]",
      "unicode": false,
      "utf8": false
    },
    {
      "haystack": "",
      "matches": [],
      "name": "strange-anchor-non-complete-prefix",
      "regex": "a^{2}"
    },
    {
      "haystack": "",
      "matches": [],
      "name": "strange-anchor-non-complete-suffix",
      "regex": "${2}a"
    },
    {
      "haystack": "abcbX",
      "matches": [
        [
          [
            0,
            1
          ],
          [],
          []
        ]
      ],
      "name": "captures-after-dfa-premature-end-100",
      "regex": "a(b*(X|$))?"
    },
    {
      "haystack": "abcbX",
      "matches": [
        [
          [
            0,
            1
          ],
          [],
          []
        ]
      ],
      "name": "captures-after-dfa-premature-end-200",
      "regex": "a(bc*(X|$))?"
    },
    {
      "haystack": "aaz",
      "matches": [
        [
          [
            0,
            0
          ],
          []
        ],
        [
          [
            1,
            1
          ],
          []
        ],
        [
          [
            2,
            2
          ],
          []
        ],
        [
          [
            3,
            3
          ],
          []
        ]
      ],
      "name": "captures-after-dfa-premature-end-300",
      "regex": "(aa$)?"
    },
    {
      "haystack": "a0.0c",
      "matches": [
        [
          [
            0,
            2
          ],
          [
            0,
            1
          ]
        ]
      ],
      "name": "captures-after-dfa-premature-end-400",
      "regex": "(a)\\d*\\.?\\d+\\b"
    },
    {
      "haystack": "test",
      "matches": [],
      "name": "literal-panic",
      "regex": "typename type\\-parameter\\-[0-9]+\\-[0-9]+::.+"
    },
    {
      "haystack": "",
      "matches": [
        [
          0,
          0
        ]
      ],
      "name": "empty-flag-expr",
      "regex": "(?:(?:(?x)))"
    },
    {
      "compiles": false,
      "haystack": "",
      "matches": [],
      "name": "invalid-repetition",
      "regex": "(?m){1,1}"
    },
    {
      "haystack": "foo Foo bar Bar",
      "matches": [
        [
          0,
          3
        ],
        [
          4,
          7
        ],
        [
          12,
          15
        ]
      ],
      "name": "flags-are-unset",
      "regex": "(?:(?i)foo)|Bar"
    },
    {
      "haystack": "zЈ01",
      "matches": [
        [
          1,
          5
        ]
      ],
      "name": "empty-group-with-unicode",
      "regex": "(?:)Ј01"
    },
    {
      "haystack": "I have 12, he has 2!",
      "matches": [
        [
          0,
          2
        ],
        [
          7,
          9
        ],
        [
          9,
          11
        ],
        [
          11,
          13
        ],
        [
          17,
          19
        ]
      ],
      "name": "word-boundary-weird",
      "regex": "\\b..\\b"
    },
    {
      "haystack": "I have 12, he has 2!",
      "matches": [
        [
          0,
          2
        ],
        [
          7,
          9
        ],
        [
          9,
          11
        ],
        [
          11,
          13
        ],
        [
          17,
          19
        ]
      ],
      "name": "word-boundary-weird-ascii",
      "regex": "\\b..\\b",
      "unicode": false,
      "utf8": false
    },
    {
      "haystack": "az,,b",
      "matches": [
        [
          0,
          2
        ],
        [
          2,
          4
        ]
      ],
      "name": "word-boundary-weird-minimal-ascii",
      "regex": "\\b..\\b",
      "unicode": false,
      "utf8": false
    },
    {
      "haystack": "153.230000",
      "matches": [
        [
          4,
          10
        ]
      ],
      "name": "reverse-suffix-100",
      "regex": "[0-4][0-4][0-4]000"
    },
    {
      "haystack": "153.230000\n",
      "matches": [
        [
          4,
          10
        ]
      ],
      "name": "reverse-suffix-200",
      "regex": "[0-9][0-9][0-9]000"
    },
    {
      "haystack": "xyzfoobarZ",
      "matches": [],
      "name": "reverse-suffix-300",
      "regex": "\\w+foobar\\b",
      "unicode": false,
      "utf8": false
    },
    {
      "haystack": "s\\xE4",
      "matches": [],
      "name": "stops",
      "regex": "\\bs(?:[ab])",
      "unescape": true,
      "utf8": false
    },
    {
      "haystack": "s\\xE4",
      "matches": [],
      "name": "stops-ascii",
      "regex": "(?-u:\\b)s(?:[ab])",
      "unescape": true,
      "utf8": false
    },
    {
      "haystack": "line1\nline2",
      "matches": [
        [
          0,
          5
        ],
        [
          6,
          11
        ]
      ],
      "name": "adjacent-line-boundary-100",
      "regex": "(?m)^(?:[^ ]+?)$"
    },
    {
      "haystack": "A\nB",
      "matches": [
        [
          0,
          1
        ],
        [
          2,
          3
        ]
      ],
      "name": "adjacent-line-boundary-200",
      "regex": "(?m)^(?:[^ ]+?)$"
    },
    {
      "haystack": "a ",
      "matches": [],
      "name": "anchored-prefix-100",
      "regex": "^a[[:^space:]]"
    },
    {
      "haystack": "foo boo a",
      "matches": [],
      "name": "anchored-prefix-200",
      "regex": "^a[[:^space:]]"
    },
    {
      "haystack": "r-f",
      "matches": [],
      "name": "anchored-prefix-300",
      "regex": "^-[a-z]"
    },
    {
      "haystack": "samwise",
      "matches": [
        [
          0,
          7
        ]
      ],
      "name": "aho-corasick-100",
      "regex": "samwise|sam|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z"
    },
    {
      "haystack": "ab",
      "matches": [],
      "name": "interior-anchor-capture",
      "regex": "(a$)b$"
    },
    {
      "anchored": true,
      "haystack": "ab",
      "matches": [
        [
          [
            0,
            2
          ],
          [
            0,
            2
          ]
        ]
      ],
      "name": "ruff-whitespace-around-keywords",
      "regex": "^(a|ab)$",
      "unicode": false,
      "utf8": true
    },
    {
      "haystack": "h",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          1
        ]
      ],
      "name": "i429-0",
      "regex": "(?:(?-u:\\b)|(?u:h))+",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "鋸",
      "matches": [],
      "name": "i429-1",
      "regex": "(?u:\\B)",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "oB",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          2
        ]
      ],
      "name": "i429-2",
      "regex": "(?:(?u:\\b)|(?s-u:.))+",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "󾾀",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          1
        ],
        [
          2,
          2
        ],
        [
          3,
          3
        ],
        [
          4,
          4
        ]
      ],
      "name": "i429-3",
      "regex": "(?:(?-u:\\B)|(?su:.))+",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "󾾀",
      "matches": [
        [
          0,
          0
        ],
        [
          4,
          4
        ]
      ],
      "name": "i429-3-utf8",
      "regex": "(?:(?-u:\\B)|(?su:.))+",
      "unicode": true,
      "utf8": true
    },
    {
      "haystack": "\n‣",
      "matches": [
        [
          0,
          1
        ]
      ],
      "name": "i429-4",
      "regex": "(?m:$)(?m:^)(?su:.)",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "\n",
      "matches": [
        [
          0,
          0
        ]
      ],
      "name": "i429-5",
      "regex": "(?m:$)^(?m:^)",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "dodo",
      "matches": [
        [
          [
            0,
            0
          ],
          []
        ],
        [
          [
            1,
            1
          ],
          []
        ],
        [
          [
            2,
            4
          ],
          [
            2,
            4
          ]
        ]
      ],
      "name": "i429-6",
      "regex": "(?P<kp>(?iu:do)(?m:$))*",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "䡁",
      "matches": [],
      "name": "i429-7",
      "regex": "(?u:\\B)",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "0",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          1
        ]
      ],
      "name": "i429-8",
      "regex": "(?:(?-u:\\b)|(?u:[\\u{0}-W]))+",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "\n\n",
      "matches": [
        [
          [
            1,
            2
          ],
          [
            1,
            2
          ]
        ]
      ],
      "name": "i429-9",
      "regex": "((?m:$)(?-u:\\B)(?s-u:.)(?-u:\\B)$)",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "\n¨ ",
      "matches": [
        [
          0,
          1
        ]
      ],
      "name": "i429-10",
      "regex": "(?m:$)(?m:$)^(?su:.)",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "0\n",
      "matches": [
        [
          2,
          2
        ]
      ],
      "name": "i429-11",
      "regex": "(?-u:\\B)(?m:^)",
      "unicode": true,
      "utf8": false
    },
    {
      "haystack": "0",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          1
        ]
      ],
      "name": "i429-12",
      "regex": "(?:(?u:\\b)|(?-u:.))+",
      "unicode": true,
      "utf8": false
    },
    {
      "bounds": [
        4,
        6
      ],
      "haystack": "ababcd",
      "matches": [
        [
          4,
          6
        ]
      ],
      "name": "i969",
      "regex": "c.*d\\z",
      "search-kind": "earliest"
    },
    {
      "haystack": "abc",
      "matches": [
        [
          [
            0,
            3
          ],
          [
            1,
            3
          ]
        ]
      ],
      "name": "fowler-basic154-unanchored",
      "regex": "a([bc]*)c*"
    },
    {
      "haystack": "ubi-Darwin-x86_64.tar.gz",
      "matches": [],
      "name": "word-boundary-interact-poorly-with-literal-optimizations",
      "regex": "(?i:(?:\\b|_)win(?:32|64|dows)?(?:\\b|_))"
    },
    {
      "haystack": "B",
      "matches": [
        [
          0,
          1
        ]
      ],
      "name": "impossible-branch",
      "regex": ".*[^\\s\\S]A|B"
    },
    {
      "haystack": "a",
      "matches": [
        [
          [
            0,
            1
          ],
          [],
          [
            0,
            1
          ]
        ]
      ],
      "name": "captures-wrong-order",
      "regex": "(a){0}(a)"
    },
    {
      "haystack": "!˗",
      "matches": [
        [
          0,
          3
        ]
      ],
      "name": "negated-unicode-word-boundary-dfa-fail",
      "regex": "\\B.*"
    },
    {
      "haystack": "Zeee.eZZZZZZZZeee>eeeeeee>",
      "matches": [
        [
          1,
          26
        ]
      ],
      "name": "missed-match",
      "regex": "e..+e.ee>"
    },
    {
      "haystack": "path1/foo",
      "match-kind": "all",
      "matches": [
        [
          0,
          9
        ]
      ],
      "name": "regex-to-glob",
      "regex": [
        "(?-u)^path1/[^/]*$"
      ],
      "search-kind": "overlapping",
      "utf8": false
    },
    {
      "haystack": "102:12:39",
      "matches": [
        [
          [
            0,
            9
          ],
          [
            0,
            3
          ],
          [
            4,
            6
          ],
          [
            7,
            9
          ]
        ]
      ],
      "name": "reverse-inner-plus-shorter-than-expected",
      "regex": "(?:(\\d+)[:.])?(\\d{1,2})[:.](\\d{2})"
    },
    {
      "haystack": "102:12:39",
      "matches": [
        [
          [
            0,
            9
          ],
          [
            0,
            3
          ],
          [
            4,
            6
          ],
          [
            7,
            9
          ]
        ]
      ],
      "name": "reverse-inner-short",
      "regex": "(?:([0-9][0-9][0-9]):)?([0-9][0-9]):([0-9][0-9])"
    },
    {
      "haystack": "v 0",
      "match-kind": "all",
      "name": "prefilter-with-aho-corasick-standard-semantics",
      "regex": "(?m)^ *v [0-9]",
      "search-kind": "overlapping",
      "unicode": true,
      "utf8": true,
      "matches": [
        {
          "id": 0,
          "spans": [
            [
              0,
              3
            ]
          ]
        }
      ]
    },
    {
      "haystack": "β77\n",
      "matches": [
        [
          0,
          5
        ]
      ],
      "name": "non-prefix-literal-quit-state",
      "regex": ".+\\b\\n"
    },
    {
      "haystack": "a-b",
      "matches": [
        [
          0,
          3
        ]
      ],
      "name": "hir-optimization-out-of-order-class",
      "regex": "^[[:alnum:]./-]+$"
    },
    {
      "haystack": "hiya \\N{snowman} bye",
      "matches": [
        [
          [
            5,
            16
          ],
          [
            5,
            16
          ],
          []
        ]
      ],
      "name": "improper-reverse-suffix-optimization",
      "regex": "(\\\\N\\{[^}]+})|([{}])"
    }
  ]
}