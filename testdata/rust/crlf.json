{
  "test": [
    {
      "haystack": "abc\r\ndef\r\nxyz",
      "matches": [
        [
          0,
          3
        ],
        [
          5,
          8
        ],
        [
          10,
          13
        ]
      ],
      "name": "basic",
      "regex": "(?mR)^[a-z]+$"
    },
    {
      "haystack": "abc\r\ndef\r\nxyz",
      "matches": [],
      "name": "start-end-non-empty",
      "regex": "(?mR)^$"
    },
    {
      "haystack": "",
      "matches": [
        [
          0,
          0
        ]
      ],
      "name": "start-end-empty",
      "regex": "(?mR)^$"
    },
    {
      "haystack": "\r\n",
      "matches": [
        [
          0,
          0
        ],
        [
          2,
          2
        ]
      ],
      "name": "start-end-before-after",
      "regex": "(?mR)^$"
    },
    {
      "haystack": "abc\r\ndef\r\nxyz",
      "matches": [
        [
          0,
          0
        ],
        [
          5,
          5
        ],
        [
          10,
          10
        ]
      ],
      "name": "start-no-split",
      "regex": "(?mR)^"
    },
    {
      "haystack": "\r\n\r\n\r\n",
      "matches": [
        [
          0,
          0
        ],
        [
          2,
          2
        ],
        [
          4,
          4
        ],
        [
          6,
          6
        ]
      ],
      "name": "start-no-split-adjacent",
      "regex": "(?mR)^"
    },
    {
      "haystack": "\r\r\r",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          1
        ],
        [
          2,
          2
        ],
        [
          3,
          3
        ]
      ],
      "name": "start-no-split-adjacent-cr",
      "regex": "(?mR)^"
    },
    {
      "haystack": "\n\n\n",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          1
        ],
        [
          2,
          2
        ],
        [
          3,
          3
        ]
      ],
      "name": "start-no-split-adjacent-lf",
      "regex": "(?mR)^"
    },
    {
      "haystack": "abc\r\ndef\r\nxyz",
      "matches": [
        [
          3,
          3
        ],
        [
          8,
          8
        ],
        [
          13,
          13
        ]
      ],
      "name": "end-no-split",
      "regex": "(?mR)$"
    },
    {
      "haystack": "\r\n\r\n\r\n",
      "matches": [
        [
          0,
          0
        ],
        [
          2,
          2
        ],
        [
          4,
          4
        ],
        [
          6,
          6
        ]
      ],
      "name": "end-no-split-adjacent",
      "regex": "(?mR)$"
    },
    {
      "haystack": "\r\r\r",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          1
        ],
        [
          2,
          2
        ],
        [
          3,
          3
        ]
      ],
      "name": "end-no-split-adjacent-cr",
      "regex": "(?mR)$"
    },
    {
      "haystack": "\n\n\n",
      "matches": [
        [
          0,
          0
        ],
        [
          1,
          1
        ],
        [
          2,
          2
        ],
        [
          3,
          3
        ]
      ],
      "name": "end-no-split-adjacent-lf",
      "regex": "(?mR)$"
    },
    {
      "haystack": "\r\n\r\n\r\n",
      "matches": [],
      "name": "dot-no-crlf",
      "regex": "(?R)."
    },
    {
      "haystack": "ZZ\r",
      "matches": [
        [
          [
            1,
            2
          ],
          [
            1,
            1
          ]
        ]
      ],
      "name": "onepass-wrong-crlf-with-capture",
      "regex": "(?Rm:().$)"
    },
    {
      "anchored": true,
      "bounds": [
        1,
        3
      ],
      "haystack": "ZZ\r",
      "matches": [
        [
          1,
          2
        ]
      ],
      "name": "onepass-wrong-crlf-anchored",
      "regex": "(?Rm:.$)"
    }
  ]
}